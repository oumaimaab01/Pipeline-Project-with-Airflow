author,updated_at,like_count,text,public
@krishnaik06,2021-01-30T09:55:55Z,2,Revise Competitive Programming Playlist https://www.youtube.com/playlist?list=PLZoTAELRMXVNtnMPq4XDnTFu38-bbp5F2,True
@shivamjindal2166,2024-01-29T14:12:53Z,0,"def anagram(str1, str2):          # convert capital to lower     str1 = str1.lower()     str2 = str2.lower()          #cleaning up spaces in string     str1 = str1.replace("" "", """")     str2 = str2.replace("" "", """")          #convert string to list which includes specific letters     list_str1 = list(str1)     list_str2 = list(str2)     anagram_not_exit = 0          for i in list_str1:         if i in list_str2:             pass         else:             anagram_not_exit+=1           for i in list_str2:         if i in list_str1:             pass         else:             anagram_not_exit+=1          if anagram_not_exit>0:         print('Anagram Does Not Exist')     else:         print('Anagram Exist')",True
@baidash3104,2021-02-01T16:41:47Z,0,"How about this ? I guess it solves the problem in O(n)  str1='Eleven7 plus two' str2='Twelve77 plus one' def anagram(str1,str2):     str1=str1.replace(' ','').lower()     str2=str2.replace(' ','').lower()     count=0     if len(str1)==len(str2):         for i in str1:             if i in str2:                 count+=1                 str2=str2.replace(i,'',1)             else:                 return False     else:         return False     if count==len(str1):         return True",True
@KisaanTuber,2021-02-01T04:58:08Z,0,"my solution. Although not optimized for competitive programming. Suggestions to improve further?  def counter_fn(str_char):     str_char = str_char.replace("" "","""").lower()     count_dict = {}     for entry in str_char:         if entry in count_dict.keys():             count_dict[entry] += 1         else:             count_dict[entry] = 1     return count_dict  if __name__ == '__main__':     str_1 = input()     str_2 = input()     count_dict1 = counter_fn(str_1)     count_dict2 = counter_fn(str_2)     if count_dict1 == count_dict2:         print('ANAGRAM')     else:         print('NOT ANAGRAM')",True
@theoutlet9300,2021-02-01T00:50:39Z,0,"def anagram(str1,str2):   a = sorted(str1.lower().replace(' ',''))   b = sorted(str2.lower().replace(' ',''))   if a == b:     return True   else:     return False",True
@Mujahidabbastarar,2021-01-31T21:10:20Z,0,I need someone to help me in my Python homeworks for free...ðŸ˜­ðŸ˜­,True
@govindsingh2724,2021-01-30T17:15:22Z,1,"def check(str1, str2):      if(sorted(str1)== sorted(str2)):          print("" strings are anagram."")       else:          print("" strings aren't anagrams "")         str1 =""study"" str2 =""dusty""  check(str1, str2)  #sorted method returns the sorted string.",True
@witty_soul,2021-01-30T17:04:33Z,0,"def anagram(s1, s2):     S1 = """".join(s1.split("" "")).lower()     S2 = """".join(s2.split("" "")).lower()          flag = 0     if len(S1) == len(S2):         pass     else:         return ""Not anagram""          for c in S1:         if c in S2:             pass         else:             flag = 1                  if(flag):         return ""Not anagram""     else:         return ""Anagram""      #drive code if __name__ == ""__main__"":     string1 = input()     string2 = input()          print(anagram(string1, string2))",True
@akhilsoni729,2021-01-30T16:12:26Z,0,"def Anagram(str1,str2):     dict = {}     for i in range(len(str1)):         if ord(str1[i]) <= 122 and ord(str1[i])>=97:             if ord(str1[i])-32 not in dict:                 dict[ord(str1[i])-32] = 1             else:                 dict[ord(str1[i])-32] = dict[ord(str1[i])-32] + 1         else:             if ord(str1[i]) not in dict:                 dict[ord(str1[i])] = 1             else:                 dict[ord(str1[i])] = dict[ord(str1[i])] + 1      for i in range(len(str2)):         if ord(str2[i])<=122 and ord(str2[i])>=97:             if ord(str2[i])-32 in dict:                 if dict[ord(str2[i])-32] != 0:                     dict[ord(str2[i])-32] = dict[ord(str2[i])-32] - 1                 else:                     return 0             else:                 return 0         else:             if ord(str2[i]) in dict:                 if dict[ord(str2[i])] != 0:                     dict[ord(str2[i])] = dict[ord(str2[i])] - 1                 else:                     return 0             else:                 return 0      return 1    str1 = input() str2 = input() if Anagram(str1,str2):     print(""Yes"") else:     print(""No"")",True
@sonalighadage6253,2021-01-30T15:14:03Z,0,"str1 = ""eleven plus two"" str2 = ""twelve plus one""  def anagram(str1, str2):     str1 = str1.replace("" "","""").lower()     str2 = str2.replace("" "","""").lower()     if len(str1) == len(str2):         for i in str1:             if i in str2:                 pass         return True     return False print(anagram(str1, str2))",True
@dataanalyticsfun9883,2021-01-30T14:28:57Z,0,Str1 = input ('string1') Str2= input ('string2') If len(str1) == len(str2): If sorted (str1)== sorted (str2): Print('given string is anagrams') Else: Print ('given string are not anagrams') Else: Print('given string are not anagrams') Sir this way is right to to do it,True
@nishantp6569,2021-01-30T10:50:04Z,1,check weather Counter() (import it from collections) of both the words are same or not,True
@yashwanthvb8442,2021-01-30T10:49:18Z,0,"def anagram_check(s1,s2):     s1=s1.replace(' ','').lower()     s2=s2.replace(' ','').lower()               check={}          for letter in s1:         if letter in check:             check[letter]+=1         else:             check[letter]=1                  for letter in s2:         if letter in check:             check[letter]-=1         else:             check[letter]=1                               for count in check:         if check[count]!=0:             return 'Not an Anagram'     else:         return 'It is an Anagram'",True
@lpis150,2021-01-30T10:43:10Z,2,"Hi krish, i get on one Interview question, it was about decision trees :how tthe decision tree knows, What feature is in the first Node? This is Basic question the tree goes over All features, but I Red  that decision tree set the most important features  at the beginning of tree, Thanks for your answer",True
@kolla_teja,2021-01-30T09:58:07Z,1,1st view .sir,True
