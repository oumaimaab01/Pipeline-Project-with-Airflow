author,updated_at,like_count,text,public
@harshitaatray,2024-01-20T10:02:52Z,0,"def Binary(number, bits):     if number >= 2 ** bits: return ""Error""     elif bits == 1: return str(number)     else:         a = number % (2**(bits - 1))         b = number // (2**(bits - 1))         return str(b) + str(Binary(a, bits - 1))          print(Binary(13, 5))",True
@srikanthsuroju9384,2022-09-16T07:11:22Z,0,"def binary(number,bits):     string = ''     while number > 0:         rem = number %2         string = str(rem) + string         number = number//2     length_str = len(string)     if bits >= length_str:         extra = bits - length_str         for i in range(extra):             string = '0' + string         return string     else:         return ""Error message""           binary(7,3)",True
@ashwinideshmukh4920,2021-03-27T14:40:10Z,0,"n = 8 bits = 6 bin_n = bin(n)[2:] if len(bin_n) < bits:   diff = bits-len(bin_n)   print('0'*diff+bin_n) elif len(bin_n) > bits:   print(""Length error"")  else:   print(bin_n)",True
@sujitkumar-pr3rr,2021-02-01T05:02:20Z,0,"This will work perfectly using recursion:     def bin(num,bit,ans,c):   if c==num:     if len(ans)>bit:       print('Not Possible')     else:       if len(ans)==bit:         print(ans)       else:         l=bit-len(ans)         print('0'*l+ans)     return   if c>num:     return   bin(num,bit,ans+'1',c*2+1)   bin(num,bit,ans+'0',c*2)    bin(13,14,'1',1)    [pass number, bit number and rest will be same]",True
@sraj6268,2021-01-20T16:18:23Z,0,"def append_bits(x,L):     return [x + i for i in L]  def generate_bits(n):     if n==0: return []     if n==1: return [""0"",""1""]     else:         a = (append_bits(""0"",generate_bits(n-1))+append_bits(""1"",generate_bits(n-1)))     return a      def Print_Bit(n,i):     bits = generate_bits(n)     for index,bit in enumerate(bits):         try:             if index==i:                 return bits[index]         except ValueError:             print(""Error!"") n = int(input()) i = int(input()) Print_Bit(n,i)",True
@vishalch9127,2021-01-12T10:57:40Z,1,"def binary(number,bits):     if (bits < len(bin(number)[2:])):         raise Exception(""The bits size is very small"")     else:         return bin(number)[2:].zfill(bits) binary(7,4)  #output : '0111'",True
@surya-td4dg,2021-01-11T08:27:06Z,0,Awsome,True
@arjun_pan_war,2021-01-08T19:03:55Z,0,"def binary(n,bit):     if bit < len(bin(n)[2:]):       print (""error"")     elif bit>len(bin(n)[2:]):       print (str(10**(bit-len(bin(n)[2:])))[1:]+bin(n)[2:])     else:        print (bin(n)[2:])",True
@abhisheknegi9297,2021-01-07T08:53:53Z,0,"# solution def checkbits(num,bits):          binary=bin(num).replace(""b"","""")          binary=binary[binary.find('1'):]          l=len(binary)          if bits==l:              print(binary)          elif bits > l:              for i in range(0,bits-l):                  binary='0'+binary              print(binary)          else:              try:                  raise  Exception(\""Sorry, Not Convert in this bit\"",bits)              except Exception as e:                  print('Exception occur')",True
@vijaybattula6584,2021-01-06T08:00:16Z,0,"please let me know if the below is simple solution..... num = int(input('Enter the number:')) for n in range(2**num):     print((str(bin(n))[2:]).rjust(num,'0'))",True
@rajathrshettigar9808,2021-01-05T10:07:55Z,0,This really handy those who preparing for competive exams..Thanks Krish for sharing,True
@amanramasharma,2021-01-03T19:48:41Z,0,"solution .... hope its helpful to you guys def decimal(n,l):     n = bin(n)     n = n[2:]     if len(n) > l:         return ""Error""     elif len(n) == l:         return n     elif len(n)<l:         a  = l - len(n)         n = str(n)         rslt = ""0""*a + n         return rslt",True
@vishwasw,2021-01-03T18:06:58Z,0,"Using recursion, not using any built-in functions:  def getreversebinary(num,result=""""):     r=int(num%2)     result = result+str(r)       d=int(num/2)     if(d>0):         result=getreversebinary(d,result)                 return result      def appendzerosandreverse(num,bits):     if(len(num)>bits):         return 'error'     while(len(num)<bits):         num=num+'0'          return num[::-1]          def getbinary(num,bits):     return(appendzerosandreverse(getreversebinary(num),bits))      b=getbinary(8,5)  print(b)",True
@cedriclebocq1060,2021-01-03T16:10:33Z,1,"def getFormattedBinary(number,position):     b = f""{number:b}""     if len(b)>position:         return -1     else:         return b.zfill(position)",True
@zuccerbot,2021-01-03T15:00:01Z,0,"def gen_bin(number,bits):     if number < 2**bits:         print(gen_recursively(number,bits,bits,''))     else:         print(""number cant be expressed in ""+str(bits)+"" bits"")              def gen_recursively(number,bits,level,strin):     if level==0:         return strin     return gen_recursively(number/2,bits,level-1,str(number%2)+strin) gen_bin(5,3)  handled the exception in gen_bin function and actual binary string is generated recursively",True
@rahulpatel1606,2021-01-03T14:53:06Z,0,"My Solution ---> def binary(n, l):     arr = [128, 64, 32, 16, 8, 4, 2, 1]     s = ''     for i in arr:         if n < i:             s += '0'             pass         elif n >= i:             n = n - i             s += '1'         if n == 0 and len(s)==8:             break                  if l < len(s[s.find('1'):]):         print('Min length of the bits should be {}'.format(len(s[s.find('1'):])))     else:         print(s[-l:])",True
@chidambaranatarajan6317,2021-01-03T14:03:49Z,0,Hi Krish Waiting for your next question :) Could you pls post :) ?,True
@akshatpant9758,2021-01-03T11:02:05Z,0,"Krish please have a look into this.. my way of doing this without using the inbuilt bin function def bin_generator(n):     l=[]     while(n!=1):         l.append(n%2)         n=n//2     if n==1:         l.append(1)     return l[::-1]  def generate_number(num,length):     binary=bin_generator(num)     binary_string=""""     for i in binary:         binary_string+=str(i)     if length>=len(binary_string):         result=(length-len(binary_string))*""0""+binary_string         return result     else:         print(""Given number cannot be fitted into the number of bits specified by you..Please increase the length!!"")  generate_number(7,6)",True
@nikhiljadhav9407,2021-01-03T09:02:24Z,0,Sirji really so happy listing about this series ❤️ so much o want build my competative coding ❤️❤️❤️❤️❤️,True
@souhardya69,2021-01-03T08:58:34Z,1,Did he just gave me a shoutout??😂 Thanks man,True
@navdeepmehta4263,2021-01-03T08:46:45Z,0,"n=int(input(""Enter the number"")) x=[] m=int(input(""Enter the bits value"")) if n==0:     while m>=1:         print(""0"",end='')         m=m-1 else:     while n>=1:         x.append(n%2)         n=n//2 k=m-len(x) if k<0:     print(""Invalid bit value"")     print(""Default Binary value is"") else:         for i in range(0,k) :         x.append(0) x.reverse() for i in x:     print(i,end='')",True
@BABLUsharma-uu7pe,2021-01-03T08:38:58Z,0,"return(append_bits(""0"",generate_bit(n-1))+append_ bits(""1"",generate_bit(n-1))) sir  please let me what is wrong going in this",True
@rahul08yadav,2021-01-03T08:23:37Z,0,"bit = None def generate_bit(n,b):     global bit     if bit == None:         bit =""""          r = n%2     bit = str(r) + bit        if b!=1:         generate_bit(n//2,b-1)           return bit print(generate_bit(15,6))",True
@akshatpant9758,2021-01-03T07:49:12Z,0,"def gen1(num,length):     binary_num=bin(num)     if(length>=len(binary_num[2:])):         length_binary=len(binary_num[2:])         print((length-length_binary)*""0""+binary_num[2:])     else:         print(""Cannot fit a number into the specified length"")  output--> gen1(2,1) Cannot fit a number into the specified length   gen1(2,2) 10",True
@rahul08yadav,2021-01-03T07:48:13Z,0,"l = [] def generate_bit(n,b):     bit = """"     for i in range(b):         r = n%2         n = n//2         bit = str(r) + bit     print(bit) generate_bit(15,6)",True
@keenchkaat1543,2021-01-03T05:59:14Z,0,"def binaryGen (n):     bin = ''     q = n     while (q >1):         q //= 2         r = str(q % 2)         bin += r           input = str(bin)     result=''.join(reversed(input))      return result  b = binaryGen(45) ##print(b, len(b)) digits = 6 ##input(""Enter the number of digits"") if digits < len(b):     print(""error, kindly increase your digits requirement"") else:     num = digits - len(b) for i in range(num):     b = '0' + b print( b )",True
@gaddesaishailesh2772,2021-01-03T05:47:48Z,0,"Python Code :-  def binary(number,bits):     binary = """"     n = number     while n > 0:         remainder = n%2         quotient = n//2         n = quotient         binary += str(remainder)     binary = binary[::-1]          length =len(binary)     if bits < length:         return 'Error bits should be increased.'     elif bits == length:         return binary     else:         remaining = bits-length         binary = remaining*'0'+binary         return binary if __name__ == '__main__':     number = int(input())     bits = int(input())     print(binary(number,bits))",True
@pankajkumarchoudhary3845,2021-01-03T04:42:09Z,0,"def bitRecur(n):     if n==1:         return ""1""     if n==0:         return ""0""     return bitRecur(n//2)+str(n%2)  def bitGen(n,size):     bits=bitRecur(n)     if size<len(bits):          raise Exception('specified bit length is too short')     else:         return ('0'*size+bits)[-size:]  bitGen(4,6)",True
@AlokMishra_tech,2021-01-03T04:27:25Z,0,This video I had released near by 1year ago on my channel. And using this tool from a long time. 😎,True
@pankajmodi8009,2021-01-03T02:53:11Z,0,❤️,True
@udaysai2647,2021-01-03T01:36:08Z,0,"bitsize=12 #user specified value n=7 #user specified value if(bitsize>=len(bin(n)[2:])):     b=bin(n)[2:].zfill(bitsize)     print(b) else:     print('Error Occured') #if bin is not to be used n=35 #user specified value res='' while(n>1):     r=n%2     res=res+str(r)     n=int(n/2)     if(n==1):         res=res+str(1) print(res[::-1]) #if zfill is not to be used bs=10 #user specified value n=bs-len(res) if(n>0):     t='0'*n print(t+res)",True
@theoutlet9300,2021-01-02T23:01:38Z,0,"here's the solution very similar to the last one.  def conv(num,bits):          if bits < len(bin(num).replace('0b','')):         raise Exception(""Sorry, the number of bits is less than the length of the binary output"")     else:         s = '0'*(bits-len(bin(num).replace('0b','')))          return (s + bin(num).replace('0b',''))",True
@pranavs70,2021-01-02T21:45:06Z,0,"def get_binary(num):     binary_value = """"      while num != 0:         remainder = num % 2         binary_value = str(remainder) + binary_value          num = num // 2      return binary_value   def int_binary(num: int, bits: int) -> str:      if num < (2 ** bits):         bin_val = get_binary(num).zfill(bits)      else:         raise Exception(""Invalid arguments"")      return bin_val",True
@RanjeetYadav-oh9en,2021-01-02T18:51:28Z,0,"def binary(number, bitsize):     if bitsize==0:         return None     else:         return bin(number)[2:].rjust(bitsize,""0"") if len(bin(number)[2:])<=bitsize else ""Wrong Bitsize""",True
@hemanthsavasere934,2021-01-02T18:35:28Z,0,"This is a hidden gem, totally amazing for recursion or DP problems.",True
@siddheshmunagekar9915,2021-01-02T18:28:48Z,0,"def append(obj, bits):     zero = """"     for i in range(3, bits):         zero = zero + ""0""          total_zeero = zero      return total_zeero + obj   def binary_seven(number, bits):     if number == 7 and bits > 3:         return append(""111"", bits)      elif number == 7 and bits == 3:         return 111     else:         print(""Number must be 7 and bits must be 3 or greater than 3"")         return exit(1)  binary_seven(7, 7)",True
@ravisoni1386,2021-01-02T17:33:39Z,0,The great thing about python is  there are these tricks that you can use to solve something. I have abused this very much.,True
@ravisoni1386,2021-01-02T17:31:25Z,0,"Again, I am sorry to ignore all the concepts behind the problem that Krish will explain later. But here is how I will done. Remember we were told to solve this problem, so I am using what i think will be easy for me.  But it works :D  def problem2(num, bits):     answer = str(bin(num).replace(""0b"", """").rjust(bits,'0'))     if(len(answer)==size):         return answer     else:         return ""Error""  Great content Krish, I will be following your content for a long time thats for sure. Keep up the good work.",True
@ravitanwar9537,2021-01-02T16:38:06Z,0,"solution for day 2 :- def day2(num,bits):     bi=bin(num)[2:]     return '0'*(bits-len(bi))+bi if bits >=len(bi) else 'not possible'",True
@devganaviral06,2021-01-02T16:37:42Z,0,"Code: def func_bin(n):     if(n>0):         return (str(n%2)+str(func_bin(n//2)))     else:         return """" def bin_digits(n,d):          bin_d=func_bin(n)     length=len(bin_d)          if(length<=d):         print(""0""*(d-length)+bin_d)          else:         print(""Error: Number of bits mentioned are less than the length of binary representation"")      bin_digits(9,5)",True
@nehilsood4143,2021-01-02T16:32:02Z,0,"def append_bit(x,L):     return [x + elem for elem in L]  def generate_binary(n):     if n == 0: return []     if n == 1: return ['0','1']     else:         return (append_bit('0',generate_binary(n-1))+append_bit('1',generate_binary(n-1)))  len(generate_binary(3)) number = int(input('enter the number:')) bits = int(input('enter the bits:'))  list1 = generate_binary(bits) if len(list1)<=number:     print('error') else:     print(list1[number])",True
@harshavardhanasrinivasan3125,2021-01-02T16:29:42Z,0,"Thanks so much for the amazing python visualization interface . It is of great use to test line by line execution . I tried not using any in-built command .  def binary(digits,bits):     if digits<0:         print(""error)     else:         temp=digits         b=[]         while(temp>=1):              a=temp%2              temp=temp//2              b.append(a)         if(bits>=len(b)):             k=b[::-1]             to_add_zeros=bits-len(k)             if(to_add_zeros!=0):                 modified_binary=[0]*(to_add_zeros)+k                 print(modified_binary)             else:                 modified_binary=k                 print(modified_binary)         else:             print(""It would require atleast ""+str(len(b))+"" bits to represent the number ""+str(digits))              binary(8,4)  My code can be optimally bad as I am new to programming but really great to think about each step and solve!. It worked for all test cases .",True
@chinzzz388,2021-01-02T16:24:06Z,0,"def binary_strings(n,bits):          binary_val = bin(n).replace('b','')     min_len = len(binary_val) -1          if bits < min_len:         return 'Error'     elif bits == min_len:         return binary_val[1:]     else:         prefix = '0' * (bits - len(binary_val))         return prefix + binary_val",True
@vineethkumar4605,2021-01-02T16:08:58Z,0,"import sys num =sys.stdin.readline()  def krish(num,bits):     res =bin(num).replace('b','')     if len(res)-1>bits:         return 'Error!!!! Must be greater bits'     elif len(res)<bits:         return  res.zfill(bits)     elif len(res) -1 == bits:         return int(res)     else:         return res num =num.strip().split() print(krish(int(num[0]),int(num[1])))",True
@deveshkumar3504,2021-01-02T15:52:53Z,0,You can't import libraries and their inbuilt function it it,True
@deveshkumar3504,2021-01-02T15:52:08Z,0,I have been using this tool for past two years ..Great to see it on your channel,True
@chandrasuriya5766,2021-01-02T15:17:50Z,0,Sir iam already used this in c++ for  Visualizing recursion but it fails sir please provide any other visualizing tool for this or make the video about using this for recursion based problems in another language like cpp,True
@rishavdash1272,2021-01-02T14:53:40Z,0,"def genbinary(num):     binary = """"     while (num >= 1):         rem = num % 2         num1 = num // 2         binary += str(rem)         num = num1     return binary[::-1]  def bincheck(num, bits):     binary = genbinary(num)     if bits ==  2:         return 'Error'     if len(binary) <= bits:         return ('0' * (bits - len(binary)) +  binary)     else:         return 'Out of Range'      print(bincheck(18,15))",True
@suhassasetty,2021-01-02T14:52:38Z,1,"def append(a,l):     return [a+i for i in l]  def generate(n):     if n==0: return []          if n==1: return ['0','1']          else:         return (append(""0"",generate(n-1)) + append(""1"",generate(n-1)))      def gen_bitsize(binary_output,n,bit_size):     if n < bit_size:          x=bit_size-n         a=''         for i in range(x):             a+=""0""         result=[a+i for i in binary_output]            print(result)      else:         print(""error"")   n=int(input(""Enter the Number to generate the bits"")) bit_size=int(input(""select the size of each bit"")) binary_output=generate(n) gen_bitsize(binary_output,n,bit_size)",True
@ramdeoyadav5700,2021-01-02T13:34:07Z,1,its very helpful to see how code really work in background. Thanks a lot.,True
@karthikrams904,2021-01-02T13:29:22Z,1,Hi Krish - Thanks for sharing knowledge.,True
@ardileannauso3864,2021-01-02T13:04:34Z,0,Very nice 😍💋 💝💖♥️❤️,True
@amrutkhot992,2021-01-02T13:00:30Z,0,"def gen_binary(num, bits):     l=[]      while(num>0):         l.append(str(num%2))         num = num//2     binary = """".join(l[::-1])     out =  """"          if bits < len(binary):         return -1           out += ('0' * (bits - len(binary)) + binary)     return out       print(gen_binary(7,6))",True
@YashGupta-ty2hn,2021-01-02T12:58:59Z,4,"Solution for today's question:     number=int(input()) bits=int(input()) binaryForm=bin(number)[2:] if bits<len(binaryForm):     print(f""Invalid number of bits {bits}"") else:     print(""0""*(bits-len(binaryForm))+binaryForm)",True
@williammitchell9416,2021-01-02T12:53:38Z,0,0:23 dirk-girl.com,True
@anishjain3663,2021-01-02T12:48:58Z,1,Hey bhai please pin the first code commentors so its motivates,True
@anishjain3663,2021-01-02T12:47:44Z,0,"def bitfiy(n,bits):     if n==0:         print('0')         return 0     if n==1:         print('1')         return     n = n     m = n     bits = bits     rem = ''     while n!=0:         rem = rem + str(n%2)         n=n//2       if len(rem)== bits:         print(rem.split())     elif len(rem)< bits:         diff = bits - len(rem)         rem=diff*'0'+rem         print(rem)     else:         print(f""Can't show binary in {bits} bits for {m} as binary has {len(rem)} bits {rem}"" )        bitfiy(25,4)",True
@butwhy9098,2021-01-02T12:46:40Z,3,Thonny editor .this also helps..please look this too ..,True
@ianroninsset5161,2021-01-02T12:42:05Z,0,30:27 Anyone want to do this with me😍💋 💝💖♥️❤️,True
@Rajkumar-vc2pg,2021-01-02T12:31:43Z,1,Damn i always do debug to understand in vscode now it make things very easy,True
@SNOWByte333,2021-01-02T12:28:44Z,1,Thanks sir👍,True
@nellitharun8466,2021-01-02T12:23:31Z,1,Keep going sir 🙏🙏🙏,True
@abhishekdobliyal7178,2021-01-02T12:21:59Z,6,"def gen_binary(num, bits):      binary, out = bin(num)[2:], """"      if bits < len(binary):    return -1            out += ('0' * (bits - len(binary)) +       binary)       return out  NOTE : For binary conversion you may write your own function. I just used this inbuilt bin() function.",True
@lavanyabellamkonda7399,2021-01-02T12:16:16Z,5,This visualisation in debugging is reducing bit complexity anna ..👌👌,True
@sohanaryal,2021-01-02T12:10:28Z,1,Great video,True
@girishmahamuni1830,2021-01-02T12:09:27Z,1,Thank you for competitive programming,True
@pratyushchoudhary8201,2021-01-02T12:09:03Z,1,It is funny that i did this exact thing just to solve the previous question 😂😂 Edit: can someone tell me is it allowed to use in built functions like bin() foe generating binary numbers in an data structure algo interview?,True
@girishmahamuni1830,2021-01-02T12:08:58Z,1,2 nd 🙂,True
@ankurbhattacharjee3912,2021-01-02T12:08:58Z,2,Would really be great if 2 problems a day is done....,True
@random-yu5hv,2021-01-02T12:06:54Z,1,You do great! Thanks for videos. Thats all helpful,True
