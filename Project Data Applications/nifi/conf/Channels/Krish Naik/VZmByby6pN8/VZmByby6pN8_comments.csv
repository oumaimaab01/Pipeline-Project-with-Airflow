author,updated_at,like_count,text,public
@rishabhnegi1937,2023-01-25T13:34:01Z,0,"hi, just wanted to confirm, if our rating or ranking increases if we do past/old contests. I mean, lets say that I missed last month contest, but later attempt it after a month or two, will my rating/ranking increase in the CP website?",True
@Totalrandom4948,2021-04-13T02:13:33Z,0,"Hi all,  What about this solution ?  import numpy as np mylist=list(np.random.randint(1001,5999,size=50)) mylist_out=list() print('Input List') for x in mylist:     elem=[int(x) for x in str(x)]     indx=mylist.index(x)     elem[0]=0     new_elem="""".join([str(x) for x in elem])     print(x,end="","")     mylist_out.append(int(new_elem)) print(""\n"") mylist_out.sort()    print('Output List') for x in mylist_out:     print(x,end="","")      Input List 5129,4421,3868,2737,5886,2641,4023,3699,1932,2260,2474,1582,4551,2655,5986,4546,2923,2742,3207,1558,4329,2142,2104,4219,3945,1667,4704,3859,3716,5638,4182,4032,5499,5019,3441,4727,2184,4967,3037,3642,3900,1263,1081,2739,2025,2841,4232,5361,5390,5547    Output List 19,23,25,32,37,81,104,129,142,182,184,207,219,232,260,263,329,361,390,421,441,474,499,546,547,551,558,582,638,641,642,655,667,699,704,716,727,737,739,742,841,859,868,886,900,923,932,945,967,986  Pleas let me know if there is any scope of improvisation ..  :)",True
@nmuller6400,2021-02-25T10:05:26Z,0,"What's wrong about this solution?  array = [1111, 8888, 7777, 9999] solution = []  for count, number in enumerate(array):     number = list(str(number))     number[0] = str(count+1)     strings = ''.join(number)     solution.append(int(strings))  solution # [1111, 2888, 3777, 4999]",True
@HhhHhh-et5yk,2020-08-02T17:52:36Z,0,Is this useful for datascience?,True
@vaibhavshete5189,2020-06-18T19:22:38Z,1,Sir we need it So desperately abt this topic competitive coding. Thank you sir. Waiting for your latest vedios on this.,True
@MrSanjay726529,2020-03-10T19:14:09Z,0,"def sort_list(given_list):          sorted_list = []      for i in range(len(given_list)):          # bit update valie         update_num = 0          # first elements is replaced with maximum value in the element         if i == 0:             sorted_list.append(given_list[i].replace(max(given_list[i]), str(update_num),1))         else:             # find the diff between the next element and prev updated element             diff = str(abs(int(given_list[i]) - int(sorted_list[i-1])))              # update the num at len(diff) index and continue until it is greater than the previous element             curr_num = list(given_list[i])             curr_num[-len(diff)] = str(update_num)             curr_num = """".join(curr_num)              while int(curr_num) <= int(sorted_list[i-1]):                 update_num += 1                 curr_num = list(given_list[i])                 curr_num[-len(diff)] = str(update_num)                 curr_num = """".join(curr_num)                          # add it to the sorted list, once it is greater than previous             sorted_list.append(str(curr_num))      return sorted_list   if __name__ == ""__main__"":     #a = input(""enter a list of 4 digit num(1111-9999) divided by space: "").split("" "")     a = ['1098', '1077', '1021', '1045', '1064', '8999', '9999']     print(a, sort_list(a), sep='\n')     print()     b = ['1095', '1094', '1095']     print(b, sort_list(b), sep='\n')     print()     c = ['5555', '4444', '3333', '2222', '1111']     print(c, sort_list(c), sep='\n')     print()     #######OUTPUT##### ['1098', '1077', '1021', '1045', '1064', '8999', '9999'] ['1008', '1017', '1020', '1025', '1034', '1999', '2999']  ['1095', '1094', '1095'] ['1005', '1014', '1015']  ['5555', '4444', '3333', '2222', '1111'] ['0555', '1444', '2333', '2422', '3111']   let me know if this is correct",True
@uttamkumar4678,2020-03-10T17:41:03Z,0,Sir could you please share me the link for Bigdata channel,True
@socially_apt,2020-03-10T11:32:27Z,0,Start counter x with 1  Change the 1000th digit compare with next number if 1000th digit is same  New counter y with q   100th digit is less for next digits 100th digit replace the digit with past digit plus counter if it reaches a condition 9+1 or 8+2  leave that digit and replace the 1000th digit with x+y   Repeat it in loop   Hence solved  Btw nice problem @krishnaik,True
@anandemani5472,2020-03-10T07:36:46Z,0,"Hi Krish... Below is  the code...   import numpy as np l1=[9555, 3999, 1090, 2229 ] final_list=[] for k in l1:         x=k     d1=int(x/1000)     d2=np.mod(int(x/100),10)     d3=np.mod(int(x/10),10)     d4=np.mod(int(x),10)     l1_All=[]     #d1     for i in range(0,10):         new_num=(i*1000)+(d2*100)+(d3*10)+(d4*1)         l1_All.append(new_num)     #d2     for i in range(0,10):         new_num=(d1*1000)+(i*100)+(d3*10)+(d4*1)         l1_All.append(new_num)        #d3     for i in range(0,10):         new_num=(d1*1000)+(d2*100)+(i*10)+(d4*1)         l1_All.append(new_num)        #d4     for i in range(0,10):         new_num=(d1*1000)+(d2*100)+(d3*10)+(i*1)         l1_All.append(new_num)     #     l1_All.sort()         #     if len(final_list)==0:         final_list.append(l1_All[0])     else:         for j in l1_All:             if j>=final_list[-1]:                 final_list.append(j)                 break # print(final_list)                  #Output is [555, 999, 1000, 1229]",True
@varungupta2727,2020-03-10T05:12:15Z,2,Please make more dsa videos. Great resource to learn dsa!!!,True
@bhumeshchopda224,2020-03-09T20:32:31Z,2,i = 1 for n in numbers:     Change first element of n with i     i +=1  This will work only if inputs are of same   length,True
@rajneeshpal7420,2020-03-09T19:51:57Z,0,yes...this is a complete explanation of problem....,True
@sumitsaha3714,2020-03-09T19:46:26Z,0,"Hi @Krish Nayak Please find  my below python solution for your problem. Though I did not get time for analyzing time and space complexity but please let me know whether this solution is correct or not and also waiting for your next problem.   #Function calling: ---------------------------------- def digit_manipulate(pos,len_num,manipulation_list,num):     all_comb_list = []     list_num = [x for x in str(num)]     while(pos < len_num):         for i in range(0, len(manipulation_list)):             list_num[pos] = manipulation_list[i]             str_num = ("""".join(list_num))             int_num = int(str_num)                         if (int_num < 1000 or int_num > 9999 or int_num == num):                 continue             else:                 diff = int_num - 1000                 all_comb_list.append(diff)          pos += 1         list_num = [x for x in str(num)]     min_res = min(all_comb_list)     if(len(out_list)== 0):         out_list.append(min_res + 1000)     else:         while(out_list[len(out_list)-1] > min_res+1000):             all_comb_list.remove(min_res)             min_res = min(all_comb_list)         out_list.append(min_res + 1000) --------------------------------------------------------------------------------- #Main problem: ------------------------ input_list =[] out_list = [] manipulation_list = ['0','1','2','3','4','5','6','7','8','9'] n = int(input(""Please enter the length of the array:"")) pos = 0 for i in range(0,n):     a=int(input())     input_list.append(a) for i in range(0,n):     num = input_list[i]     str_num = str(num)     len_num = len(str_num)     digit_manipulate(pos,len_num,manipulation_list,num)  print(out_list)",True
@hamzawi2752,2020-03-09T18:16:58Z,0,@Krish Naik Can I put the same number of the input in the output in some cases without any change?,True
@amareshbaral8846,2020-03-09T17:50:16Z,0,"Step-1: Take the first digit starting from first 2 elements to compare, if not same, replace the digits starting with 1 and increase it.  Step-2: If not same check for the second digit and do the first step.  Could this be a way ?",True
@vamsireddy6306,2020-03-09T17:30:32Z,2,"# Input list input1 = ['1095' , '1094' , '1095' ] input2 = ['5555' , '4444' , '3333' , '2222' , '1111']  # empty list sorted_list = []  # ittertor for song in input1:     #sorted list     sorted_list.append(int(song.replace(max(list(song)) , str(len(sorted_list) + 1) , 1)))               print(sorted_list)   output: [1555, 2444, 3333, 4222, 5111] [1015, 1024, 1035]",True
@smilysmily896,2020-03-09T16:59:55Z,4,Sir huge respect to you sir  you are doing a great job sir..... Take a bow üôá‚Äç‚ôÄüôá‚Äç‚ôÄüôá‚Äç‚ôÄ  Sir make a video on how to participate in kaggle??? skills requried and complete details about the compitions based on data science,True
@shredder_plays,2020-03-09T16:55:39Z,4,Post these kind of questions daily thanks love your content.,True
@suhail5688,2020-03-09T16:48:41Z,1,thank you so much sir..,True
@gauravsonkusle6427,2020-03-09T16:45:17Z,1,"the output for 2nd example could have been- [1555, 2444, 3333, 4222, 5111]???? is it correct or wrong??? is there any reason why we chose the o/p shown in video or description???",True
@sumitsaha3714,2020-03-09T16:45:03Z,3,"hi Krish , for every test case can it be a fixed solution or it can have multiple solution ? I mean for  i/p: [5555,4444,3333,2222,1111]   o/p [1555,2444,3333,4222,5111] is valid or not ? and o/p range will also be from 1000 to 9999 ? or it can go beyond 9999",True
@nivitus9037,2020-03-09T16:35:31Z,1,Thank you so much sir ü•∞ü•∞,True
@nibinbaby9132,2020-03-09T16:25:53Z,3,Change the lowest digit so as to make array sorted increasing order,True
