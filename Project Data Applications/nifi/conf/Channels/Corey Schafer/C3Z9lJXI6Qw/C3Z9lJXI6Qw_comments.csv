author,updated_at,like_count,text,public
@coreyms,2018-10-24T16:04:43Z,41,"There are usually multiple solutions to problems like these. If your solution is different than the ones I gave here then it is not necessarily wrong. For example, it would have been possible to use a try/except block in the next method as well. If you have different solutions that work then I would love to see them.  Also, quick correction: At 3:05 I said ""class attribute"" when really I meant ""instance attribute"".",True
@orbitblade8631,2024-04-01T13:22:00Z,0,"hey, I've written another class code that works:  # Class code  class Sentence:      def __init__(self, sentence):         self.sentence = str(sentence)         self.words = self.sentence.split()      def output(self):         for words in self.words:             print(words)  mysentence = Sentence(""This is a test"") mysentence.output()  # Generator code  def Sentence(a):     a = str(a)     words = a.split()     for word in words:         print(word)  Sentence(""This is a test"")  """""" Output: This is a test """"""  this seems way simpler than the one that you have explained in the video",True
@junhuama68,2024-01-11T22:08:34Z,0,more please,True
@BinaryLynx,2023-09-28T15:01:28Z,0,"I didn't understand how it is useful from this video. To me it seems that generator didn't save any memory space. On the opposite, it took up additional space by storing not just the initial string but it's split version in an array.",True
@DrDeuteron,2023-08-02T03:08:38Z,0,"For everyone worried str.split using memory, here is a iterative splitter (which may be improved by the := operator, and possibly some operator.methodcaller on 'pop' to empty word into """".join and reset it to []):  def isplit(sentence):     sentence = collections.deque(sentence)     word = []     while sentence:         letter = sentence.popleft()         if sentence == ' ':             yield """".join(word)             word = []         else:             word.append(letter)     yield """".join(word)",True
@DrDeuteron,2023-08-02T02:23:09Z,0,"class Sentence:       index = 0  # use default class attribute, no reason to assign in init       def __init__(self, sentence):         self.sentence = sentence       def __iter__(self):          return iter(str(self).split())       def __str__(self):         return str(self.sentence)       def __getitem__(self, *args):         return list(self).__getitem__(*args).  # handles index and slice args....better than your code ;-)       def __next__(self):           try:               result = list(self)[self.index]            except IndexError:               raise StopIteration           self.index += 1. # note: automatically creates an instance attribute from class attribute...learn this, keep init small.           return result  btw: you did work in init, and that is a sin. Keep it S.O.L.I.D",True
@user-fz8qy6tt3m,2023-05-03T07:06:50Z,0,"thanks for those vidoes! question about your class solution. isnt it LBYL coding style?  class Sentense:     def __init__(self, txt) -> None:         self.words = txt.split()         self.index = 0      def __iter__(self):         return self      def __next__(self):         try:             word = self.words[self.index]         except IndexError as exc:             raise StopIteration from exc         else:             self.index += 1             return word",True
@amolparnaik5132,2022-12-28T20:42:11Z,0,Didn't think you could change creating an instance so did      def __iter__(self):         while self.index<len(self.words):             yield self.words[self.index]             self.index +=1  Just as an exercise really as then you don't need to override __next__. These videos are great by-the-way!,True
@okirschner001,2022-11-13T15:38:57Z,0,"I found a solution that is much simpler and 50% faster: class Sentence:     def __init__(self, sentence):         self.sentence = sentence     def __iter__(self):         return (self.sentence.split()).__iter__()  You make the best tutorials, thx for that. The first time you gave a ""Realworld"" example, I hit subscribe. Most other tutorials are stupid and all the same. I am a noob myself, and just started, but after your glorious previous video I came up with this solution by myself, glad I did not peak. An iterator already has an built-in __next__ function ""Corey Schafer"", so there is no need to overwrite the __next__ function. Also getting rid of 2 variables. But keep in mind my 50% more speed is only when you put the initialization included in the test..like: Anyway big thx for explaining iterators and iterables that in-deepth.  from time import perf_counter start1 = perf_counter() for _ in range(100000):     s1 = Sentence(""This is a test"")     for word in s1:         pass print(perf_counter()-start1)",True
@shashishekhar----,2022-10-28T23:40:14Z,0,Solved !,True
@aashishmalhotra,2022-09-29T03:40:59Z,0,very good u cannot learn to code until you dirty your hands,True
@rohitjoshi4341,2022-07-08T15:26:39Z,0,"I was just playing with the code you provided. I found that I could reset the self.index = 0 before raise StopIteration. This makes me resue my_sentence in multiple times loops. Otherwise, It will only work once.",True
@piotrmazgaj,2022-07-07T17:36:13Z,0,"Why not both:  # Class use with generator  class Sentence():     def __init__(self,my_sentence):         self.my_sentence=my_sentence      def my_iter(self):         my_gen=(word for word in self.my_sentence.split(' '))         return my_gen  first_sentence=Sentence(""This is a test"")  inst_gen=first_sentence.my_iter()  inst_gen.__next__() inst_gen.__next__() inst_gen.__next__() inst_gen.__next__()",True
@rohitchakravarthi94,2022-06-27T06:37:56Z,0,This is like a GOLD MINE JACKPOT,True
@paulzupan3732,2022-06-14T22:41:40Z,0,"For the class example, couldn't you just return the list of words' iterator directly?  class Sentence:     def __init__(self, sentence):         self.sentence = sentence      def __iter__(self):         return iter(self.sentence.split())",True
@gracedai6020,2022-05-21T08:27:55Z,0,"Hi Corey: Nice to have this practice in the subject - really helpful and interesting. Don't know if you can see this comment or not, but I have a question: for the generator, I tried to use the keyword 'return' rather than 'yield' and it returned the first element of the splitted list of words (sentence) 'letter_by_letter'; can you please explain the difference between 'return' and 'yield'?",True
@ironsugar8690,2022-04-02T17:50:20Z,0,what does it mean - 'dunder' ?,True
@radaboy5755,2022-02-23T04:36:55Z,0,"# one liner  sentence = ""This is a test"" word_generator = ( x for x in sentence.split( ) )  for word in word_generator:     print(word)",True
@roderickdunn2517,2022-01-15T17:08:50Z,0,"Thanks Corey, great videos! Here's another solution with a generator expression. ge_sentence = (w for w in a_sentence.split()) [print(w) for w in ge_sentence]",True
@VishalKumar-rg1yz,2021-10-04T18:16:29Z,0,corey you are my guruvu ninnu epudu gurtupetukunta ayyaa,True
@r125l6,2021-09-30T12:06:56Z,0,Thank you so much for the coding exercise. Your tutorial is well designed and structured.,True
@shubhamladha5426,2021-09-20T18:02:09Z,0,Awesome,True
@mathiasborisvelicofftalave1205,2021-08-03T01:58:15Z,0,"2k:4 like-dislike ratio, wish you uploaded more coding problem videos!",True
@edwingarcia5043,2021-07-26T04:39:56Z,0,Nice practice.,True
@roshansuthar7166,2021-07-03T10:25:35Z,0,I would like to see more problems and solutions videos,True
@k_drive,2021-06-16T05:42:39Z,0,thought i understood the tutorial completely till it came time to do this practice question 😂 cheers for the explanation at the end there,True
@naveen9102,2021-06-15T08:31:46Z,0,Just want to say thank you,True
@user-ww2lc1yo9c,2021-06-14T14:51:43Z,0,Why is it hard to find horny female python instructors?,True
@user-ww2lc1yo9c,2021-06-14T14:42:14Z,0,"Why do we need a dunder iter, why not just have a dunder next and be done with it?",True
@kyachahtahai,2021-06-13T05:22:28Z,0,"Problem with treating Sentence as iterator (returning self from __iter__) is, state is not reset. We cannot run the for loop again over the same object of sentence. Ideally __iter__  should return a new iterator with fresh state. generator do takes care of that (we can also implement __iter__ of Sentence class as generator, if we still need class).",True
@joem8251,2021-06-03T03:46:24Z,0,Helpful supplement!,True
@priyankobanerjee101,2021-06-02T08:52:52Z,0,"def my_gen1(my_sent):     my_words=my_sent.split()     index=0     if index>len(my_words):         raise StopIteration     else:         index+=1         yield my_words[index]        Why is this wrong?",True
@soyciro4623,2021-05-15T19:07:06Z,0,"Trying to replicate Sentence's class use of __next__ method, I got with this solution for the generator:  def sentence(sentence):     index = 0     words = sentence.split()     while index < len(words):         yield words[index]         index += 1  Not as efficient and short as yours, but that's how I solved it! :)",True
@manavshah6811,2021-04-29T15:11:04Z,1,"Genuine Query: Wouldn't using sentence.split() defeat the whole purpose of using a generator in the first place?   Per my understanding, generators are used because of two main reasons. First, they do not require additional storage. By using the split() method, I would argue that an array is being created that occupies O(n) space where n is the no. of words. Second, generators are better because they eagerly return/yield results when the actual computation is lengthy. By using split, we are already traversing the entire sentence. Please clarify how this implementation that uses generators, is helpful.   Corey, if you are reading this, I can't thank you enough for your videos! They have helped me immensely and I often frequent them when I need to jog my memory on a particular topic.   Thanks!",True
@DishankTak,2021-04-18T12:45:24Z,0,split function uses memoery to story a list of words in an array and also take up some time. The main moto  rather purpose of uisng iterator or generator is that 'retrieveing the data without using space at runtime'. But using spilt we are completely opposing the purpose. Correct me if i am wrong. I am a Learner too.,True
@shravanbommu7226,2021-03-22T07:19:00Z,0,"my_sen = 'This is a Test' for word in my_sen.split():     print(word)",True
@waleedismail5248,2021-03-09T15:48:15Z,0,"Plz help me ????????????  my_sentence = Sentence(""This Is A Test"") TypeError: Sentence() takes no arguments   EDIT ::::: OMY God I did it by adding attributes since It didn't take arguments , I still don't get it, any help why it didn't took an argument??? this is how it worked : my_sentence = Sentence() my_sentence.sentence = "" This Is A Test"" my_sentence.Index = 0 my_sentence.words = my_sentence.sentence.split()",True
@kasyapdharanikota8570,2021-01-28T11:32:05Z,0,please continue your videos are very good,True
@kingrajput6202,2021-01-18T11:21:54Z,0,that one guy who disliked...........,True
@nabiladnan99,2021-01-08T19:22:52Z,1,my generator solution:  def my_gen(sentence):     words = sentence.split()     i = 0     while i < len(words):         yield words[i]         i += 1,True
@nabiladnan99,2021-01-08T19:18:20Z,0,"This is some high quality teaching. You sir, are the best!",True
@Pd69bq,2021-01-04T01:16:25Z,0,"tbh id say explain under the hood principles behind some commonly used iterator ""recipes"" like zip(*[iter(string)] * n) is way more useful than just rewriting iter() function in several ways",True
@AbdurRahman-iy7nd,2020-12-01T04:40:04Z,0,"def sentence(string):     i_string = iter(string.split(' '))     while True:         try:             yield next(i_string)         except StopIteration:             break   my_sentence = sentence('This is a test an I passed it')  for word in my_sentence:     print(word)",True
@serhiypidkuyko4206,2020-11-24T22:19:56Z,0,"Thank you for your video-tutorials Carey. They are extremely useful (as well as awesome). As for this one I think that implementation has a ideological shortcoming. I mean using both in your class and in your generator the split() function. For example: the main reason to create and use generator - to be better in terms of both memory use and performance in larger programs. But your code produces all the list (of words) at once, the list your are going to loop over one-by-one. If I am wrong persuade me please.",True
@GodotEnjoyer,2020-10-19T19:03:29Z,0,"I did this : ``` class Sentence:      def __init__(self, sentence):          self.sentence = sentence.split()      def __iter__(self):         return self      def __next__(self):         if len(self.sentence) == 0:             raise StopIteration          word = self.sentence[0]         self.sentence = self.sentence[1::]         return word ``` The only reason i am showing this is because idk if it's efficient way to manipulate the attribute sentence. Any advice?",True
@usefmoorehead272,2020-10-04T01:04:53Z,0,This was great!!  I really enjoy your videos.,True
@hassnainamjad1059,2020-10-02T16:37:37Z,0,"sir, in line 10 we are returning self ... i don't understand why ..  anyone can explain plzzzz??",True
@BrendanMetcalfe,2020-09-29T13:44:31Z,0,thanks - i love your playlist!!  I have a similar python List Comprehension playlist on my channel I invite people to check out,True
@sungchulyonseiackr,2020-09-22T14:47:07Z,0,"# Comparing with the previous version,  # in this version # I don't use len(sentence), but use the try except block to stop generating!   def words_generator(sentence):      # My initial pointer is pointing the start of sentence.     idx = 0          # I use the while loop to generate words,     # since I as a generator don't know how many words are out there.     #     # I don't want to use len(sentence.split()),     # since len(sentence.split()) will produce a list and spend lots of memory.     # This is againt the generator idea that saves lots of memory.     while True:                  # I first check whether I stop generating.         # I don't use len(sentence) to stop generating!          try:             a = sentence[idx]         except IndexError:             break          # If I decide to generate, here is the generating step:         start = idx # start is the pointer of start of word         end = idx # end is the pointer of end of word         while True:             try:                 # Usual Case Handling:                 if sentence[end] != ' ':                     end += 1 # move the end point to right if current character is not ' '                 else:                     end += 1 # move the end point to right if current character is ' ' (final move)                     idx = end                     break             except IndexError:                 # When I tried to identify the last word,                 # sentence[end] raises the IndexError.                 # So this is how I handle the last word case:                 end += 1                 idx = end                 break                          yield sentence[start:end]  #my_sentence = words_generator('This is a test')  # https://www.nytimes.com/2020/09/21/technology/microsoft-zenimax-video-game-deal.html my_sentence = words_generator('Microsoft landed a major blow in its decades-long battle with its video game industry rival Sony on Monday, announcing the $7.5 billion acquisition of a video game company that narrowed the gap between the two tech giants’ offerings.') for word in my_sentence:     print(word)",True
@sungchulyonseiackr,2020-09-22T14:35:47Z,1,"def words_generator(sentence):      # My initial pointer is pointing the start of sentence.     idx = 0          # I use the while loop to generate words,     # since I as a generator don't know how many words are out there.     #     # I don't want to use len(sentence.split()),     # since len(sentence.split()) will produce a list and spend lots of memory.     # This is againt the generator idea that saves lots of memory.     while True:                  # I first check whether I stop generating.         if idx >= len(sentence):             break          # If I decide to generate, here is the generating step:         start = idx # start is the pointer of start of word         end = idx # end is the pointer of end of word         while True:             try:                 # Usual Case Handling:                 if sentence[end] != ' ':                     end += 1 # move the end point to right if current character is not ' '                 else:                     end += 1 # move the end point to right if current character is ' ' (final move)                     idx = end                     break             except IndexError:                 # When I tried to identify the last word,                 # sentence[end] raises the IndexError.                 # So this is how I handle the last word case:                 end += 1                 idx = end                 break                          yield sentence[start:end]  #my_sentence = words_generator('This is a test')  # https://www.nytimes.com/2020/09/21/technology/microsoft-zenimax-video-game-deal.html my_sentence = words_generator('Microsoft landed a major blow in its decades-long battle with its video game industry rival Sony on Monday, announcing the $7.5 billion acquisition of a video game company that narrowed the gap between the two tech giants’ offerings.') for word in my_sentence:     print(word)",True
@pkavenger9990,2020-09-02T07:49:15Z,0,Man you are too fast that i have to listen to it at 0.75 speed.,True
@janluka21,2020-08-16T13:03:33Z,0,"Hi Corey, using the split function will waste all the advantages of using a generator. I think the best way to do it, is just keeping in memory the current word and the index over the original sentence This is my solution:  def gen_sentence(s): 	i, curr = -1, """" 	while i+1<len(s): 		i+=1 		if s[i] == ' ' and curr: 			yield curr 			curr = """" 		elif s[i]==' ': continue 		else: curr+=s[i] 	if curr: yield curr",True
@kiyotaka627,2020-08-14T03:02:05Z,0,who disliked this video?? come out show yourself,True
@visharadverma9903,2020-07-12T13:41:02Z,0,This has 0 dislikes holy-,True
@mohamedgomaa7793,2020-07-03T05:10:06Z,1,Thanks so much for effort you are the best. This is my solution for generator def sentence(sentence):     words = sentence.split()     index = 0     while index < len(words):         yield words[index]         index += 1,True
@IndianDashCamAdventures,2020-06-29T04:09:23Z,0,love this practice .. god bless you !!,True
@mohit4u007,2020-06-24T03:04:04Z,0,Seperate problem video are much appreciated Corey.,True
@riyaaaaaaa4369,2020-06-18T13:22:26Z,1,It’s been a long time since I’ve seen a YouTube video with 0 dislikes 😄,True
@mad8ry,2020-06-17T21:10:04Z,0,words=sentance.split() my_sentance= (word  for word in words) print(next(my_sentance)),True
@iriswang6760,2020-05-23T01:42:37Z,0,def my_sentence_gen(str):     words=str.split()     index=0     while index<len(words):         i=index         index+=1         yield words[i],True
@2990steven,2020-05-22T20:31:47Z,1,Great idea,True
@sharifmansuri607,2020-05-19T09:32:31Z,1,Thanks for the coding problem video,True
@sharifmansuri607,2020-05-19T09:31:36Z,1,Thanks a lot for coding problem videos,True
@peti826,2020-05-17T10:41:57Z,0,"Damn I feel like I've missed the whole point of Iterators so I must ask...please interrupt me where I got wrong in my assumptions:  So when I use a for loop on a list for example, what's going on in the background is:  the list gets converted into an iterator by the __iter__() dundermethod, thus the for loop can access the values one by one by utilizing its __next__ dundermethod.   But what's the point here in the video in doing this whole process of making an iterator out of a list then calling a for loop, rather than skipping the first step, and instead just calling a for loop which would automatically do this all by itself? I'm feeling dumb af",True
@rbnn,2020-05-17T05:58:35Z,0,Can’t you just say “return self.words[self.index++]” instead of using the temp variable index?,True
@varunmallya5852,2020-05-05T12:38:14Z,0,"Zero dislikes ladies and gentleman, Yes you read that right. Keep up the great work corey",True
@DTW11,2020-05-04T13:03:22Z,0,"at 08:04, I have copied all the code but when I Run I get the error: 'Sentence' object in my_sentence is not iterable. How are you able to run yours without getting the same error? Thanks",True
@yaboobayyaboobay8191,2020-04-29T10:24:23Z,0,"What is the point of the StopIteration exception, why not just simply let the loop finish?",True
@karthikbasavarajappa785,2020-04-22T15:37:34Z,0,"Can we not use ""yield""  in a dunder method?",True
@rakesh989,2020-04-16T15:36:28Z,1,You're amazing. Thank you for all the videos.,True
@hubertcombomarketing2693,2020-04-12T16:26:23Z,0,Good as always. Thanks.,True
@saiabhilashbabu6382,2020-04-02T21:25:39Z,0,"if I run below code , print statement executes only once. Looks like iterator not resetting. But we are able to for loop regular python lists multiple times. How it is possible??   for word in my_sentence:     print(word) for word in my_sentence:     print(word)",True
@sahilnagotra547,2020-03-26T14:36:59Z,1,"this is a great idea, it would be great help if you upload this type of videos more often",True
@sohailmmn9812,2020-03-26T12:07:11Z,1,You definitely deserve much more followers. Well done.,True
@kareemjeiroudi1964,2020-03-12T20:50:03Z,0,Could you please tell us the package you're using in SublimeText to get this great File Navigator on the left sidebar?,True
@kareemjeiroudi1964,2020-03-12T19:35:13Z,1,I loved this challenge!,True
@senolkurt7864,2020-02-08T16:27:44Z,1,"Thank for the video! Absolutely, great idea to upload practice videos.",True
@darmalsali1383,2020-01-22T06:04:39Z,0,I am learning python for automation. is the generator enough or should I know about the class method too?,True
@hichamichkantana9438,2019-12-30T21:20:30Z,0,"My solution is very similar to yours except, I used the len method to keep track of the list and pop to remove the item at index 0",True
@kouroshjafari4238,2019-11-28T16:08:00Z,1,Thanks Corey for the great videos! I highly recommend coding problem videos.,True
@zraffens5145,2019-11-20T12:58:22Z,1,Where are the other problems? You said you would create a lot of them.,True
@taoge7521,2019-11-11T19:17:41Z,0,"since self.index was already defined in the __init__ method, isn't it unnecessary to define it again in the __next__ method. overall, great video, much love. keep up the great content.",True
@thiagocavila,2019-10-07T01:09:34Z,1,Excellent tutorial and challenge. I just found that your solution to the problem wasn't going to use split() as it would create a list of all words again in memory. Wouldn't this solution be space inefficient in terms of what you just explained in the tutorial?,True
@riskzerobeatz,2019-09-26T23:30:47Z,7,Simply the best Python channel on youtube :D Thanks Corey!,True
@bakihussain4231,2019-09-18T21:59:48Z,0,"Yes please throw some problems for OOP series, Functions and other applications of python",True
@johnnybegood8669,2019-09-02T22:27:00Z,16,-zero dislikes -everyone liked that,True
@meatyout,2019-08-23T18:10:30Z,0,"Is this a valid option (although a bit less readable...)?   def sentence(sentence):     gen = (word for word in sentence.split())     return gen   Or without a function, a simple generator that we can loop over or print(next(gen)) gen = (word for word in sentence.split())",True
@erikdevries9868,2019-08-18T08:25:39Z,0,"I've learned a lot from your videos, but got a bit frustrated while my code wasn't working, finally i typed over your code and still no good result. Finally figured out this code was not running in python 2.7.15+, but it did in version 3.6, so after all i'm happy. Still don't understand why it wouln'd run in 2.7 since __iter__ and __next are there. Below the output when run in 2.7   dir of class = : ['__doc__', '__init__', '__iter__', '__module__', '__next__']  Traceback (most recent call last):   File ""./class_exercise.py"", line 25, in <module>     for word in sentence: TypeError: instance has no next() method",True
@ahmedjumaah9727,2019-08-14T13:42:34Z,0,"Hi Corey, thanks for the content. All your videos are very useful and  your approach to explaining the topics is very clear. I have a suggestion, would it be feasible to do some video sessions on python for deep learning?, since it is a hot topic.",True
@tradingguru8775,2019-08-02T11:24:31Z,2,These videos are better than theoritical concepts. It gives us insight into real world problems. Keep up the good work.,True
@mylesmontclair,2019-07-10T05:20:09Z,2,"Hi Corey,   I thoroughly enjoyed this coding problem. I found it to be challenging but not overwhelming and the content in the previous tutorial video was just helpful enough. You're the best teacher I've ever had in any subject. Thank you much!",True
@ForsakePariah,2019-07-04T01:59:58Z,1,"Corey, please, drop everything you're doing and come teach at my university. I have spent HOURS trying to understand this. Thank you!",True
@jingyuchang1885,2019-06-25T21:32:28Z,0,"class Sentence:     def __init__(self, sentence):         self.sentence = sentence       def __iter__(self):         words = self.sentence.split()         for word in words:             yield word",True
@arashchitgar7445,2019-06-24T12:35:02Z,5,"Hi, Thanks for your great tuts. I've got 2 questions: 1- In the last video you said we use this iterator/iterable stuff in order to not keeping our data in a list to prevent the memory overload, but you are still keeping the sentence in a list. what's the part I got wrong? 2- When we use the next() method, we move the state to the next position, so how can we reset that and get back to the first position?",True
@wilsoncazarre,2019-06-20T02:11:20Z,0,"My solution (I didn't saw the solution so far):   class Sentence:     def __init__(self, sentence: str):         self.words = sentence.split(' ')      def __iter__(self):         self.index = 0         return self      def __next__(self):         if self.index >= len(self.words):             raise StopIteration         self.index += 1         return self.words[self.index-1]   for word in Sentence('Testing this out'):     print(word)",True
@StevenTse,2019-06-16T16:45:38Z,1,"practice makes perfect, coding problem is great.  please keep on posting, thankyou",True
@vitaliidmitriev7179,2019-05-26T14:26:38Z,0,Thank you for the video!   Here's what I came up with as a generator solution  for word in (word for word in 'This is a test'.split()):     print(word),True
@albertomedinarobredo,2019-04-24T13:45:56Z,1,"Hi Corey, Why do you include a instance variable self.sentence? It works fine directly doing self.words = sentence.split(), but I'm wondering if it would come up handy if you were to give other functionalities to the class.  Thanks!!",True
@402varun,2019-04-17T16:48:12Z,0,"why can't i be able to get the same output without the __iter__ method, as __next__ is anyways returning the value we want",True
@iqtieruddinahammad5884,2019-04-09T21:44:30Z,0,"my_sen = ""This is a sentence"".split()  for word in my_sen:  print(word)",True
@niteshrawat576,2019-03-17T11:36:32Z,0,"I know i am late to the party, also guess mine is not the optimal, but still here is my 2 cents:     def __next__(self):         try:             current = self.words[self.index]         except:             raise StopIteration         else:             self.index +=1             return current  PS: I am curious to know that aren't we defeating the purpose of iterator my loading the whole string in memory by self.words = self.sentence.split() ??",True
@parvizhagverdiyev5232,2019-02-15T08:59:18Z,0,"thanks for your explanation,but i still cant get index side of code,please give me some resources..",True
@parvizhagverdiyev5232,2019-02-15T08:58:52Z,0,"thanks for your explanation,but i still cant get index side of code,please give me some resources..",True
@deepdabbler,2019-01-31T00:24:55Z,2,"Hi Corey, Please keep posting coding problems. These are great for practicing and solidifying one's understanding of the concepts you teach. Is there a reason you store both the original string and the list in the class object? Wouldn't the memory requirements be more? It seems to me that storing only a list would be sufficient (at least my solution works with just a list).",True
@ishpeace4886,2019-01-21T04:23:10Z,1,well-explained! thanks Corey. Amazing way of teaching,True
@techcode_man,2019-01-20T22:40:12Z,1,"Corey, this is an excellent idea. Please continue to provide such sample problems. Two Thumbs up!",True
@mengzhenc3704,2019-01-20T09:29:49Z,0,I love this kind of videos! It is awesome! Btw can u go through the private method and function of python at some point? thx!,True
@prabhathkota107,2019-01-19T08:39:33Z,1,Beautifully explained,True
@bonbonpony,2018-12-29T18:28:40Z,0,"""a"" is not a word, it's a letter :q",True
@apollossevere8602,2018-12-27T12:08:22Z,8,"Dude you MUST keep this up! We seriously need examples on how to use all of the functions and statements etc, we've learned into solving common problems. So thank you for this🙏.",True
@madhu.badiginchala,2018-12-16T10:30:49Z,0,"Thank you Corey. Coding problems are very help to cement the concept. Also, could you please make tutorial on 'Python object memory optimisation' techniques. Thanks in advance.",True
@rahulparmar208,2018-12-12T09:19:48Z,2,Very beneficial please continue with this,True
@Jamlau,2018-12-10T12:17:02Z,1,"Really masterpiece,easy to understand.非常感谢您的教程，简单直白详实。",True
@spaceyx,2018-12-04T09:36:28Z,1,U are a very gifted person when it comes to teaching m8. Thank u so much!,True
@user-qs6dp2fw7q,2018-11-25T17:39:31Z,1,Many thanks,True
@henrylin2008,2018-11-24T16:17:37Z,2,Thanks for excellent explanation and great example! would love to see more of coding problems!,True
@sharp5641,2018-11-19T14:07:53Z,1,This is Awesome!!! Waiting for more...,True
@vishalshukla8535,2018-11-17T13:18:49Z,1,Will wait for more 😊,True
@jipeejoce1353,2018-11-14T18:18:40Z,2,"Please, continue to make this type of  'coding challenge' videos. They' re essentials in my opinion.",True
@JohnDoe19840,2018-11-12T23:35:39Z,1,I love your videos. Your the best python teacher out there. Please can you do some more real-life examples with python,True
@Talon_24,2018-11-10T18:31:41Z,1,"Greetings! I think this is a great way to enhance your Tutorials, it gives a really good hands-on to the topic. Best regards and thank you for your videos!",True
@sandeepvk,2018-11-05T05:36:01Z,0,"only time i watch a video at 0.75 is when I watch Corey, lel...",True
@andymao3946,2018-11-05T05:16:10Z,1,Exercises like this one help me learn quicker. Your comment about using generator more frequently also provides a valuable reference as I learn Python. I'd like to see more coding exercises please.,True
@PACKERSFANSheshank,2018-11-03T21:13:57Z,0,I don't know if you will see this but if you do please please if you have the time make a video for hosting a flask application. I'm not able to understand any of the other tutorials and if you can make another video to the flask blog one showing how to deploy that on the internet free that would be great.,True
@erwingutowitz7920,2018-11-03T02:40:30Z,0,"This is a cheat, right?  class Sentence:      def __init__(self, sentence):         self.words = iter(sentence.split())      def __next__(self):         return(next(self.words))      def __iter__(self):         return(self)",True
@asratmg,2018-11-02T10:12:16Z,0,"Wow it excellent video, and the way you delivered is also awesome. But I do have some question if you can help me. I am trying to solve a supply chain network design problems using python. Currently I am using Pulp solver to solve simple mixed integer problems, I solved a two tiers (nodes) network having 'suppliers and distribution centers'. But I couldn't do for the three tiers (nodes). And I want to integrate my solution for the three nodes as 'suppliers, distribution centers, and customers'. Please can you help me in this. Thank you.",True
@prateekjha6862,2018-11-02T05:06:37Z,3,"A video tutorial series on 'Data structures and Algorithms' would be great. I know this might take up a lot of time, but almost every interview has questions from DSA.  Your tutorial series on Django helped me a lot at my current project. Thanks.",True
@mohammedthahajk7619,2018-11-01T03:44:37Z,1,i did a seminar on python programming just by learning from your videos. Thanks a lot corey. I sincerely request you to make videos on GUI with python please,True
@CyL3Nz,2018-10-31T23:10:20Z,0,"Corey, awesome tutorials! I wonder if you could create a series for gui frameworks with python? I'm not talking about tkinter which is well enough documented and fairly easy to understand but just way to narrow in its scope. I have tried learning wxpython or pyqt but I just can't wrap my mind around how these really work and the documentation especially for wxpython is horrendous.",True
@nawendusingh2858,2018-10-31T06:28:17Z,0,You should write a book.,True
@umaraftab6073,2018-10-30T23:17:00Z,0,I wish you do a video on encoding-decoding. I often times run into a problem with that. Thanks in anticipation.,True
@umaraftab6073,2018-10-30T23:14:52Z,26,"Corey, I am just amazed at how you deliver a complex concept so easily - I actually meant the word ""deliver"". You actually do that so good brother. Lucky to have an instructor like you on YouTube. Thank you so much for your great stuff.",True
@nelsonking,2018-10-30T03:24:40Z,0,"Hey Corey, do you have any plans of doing a project maybe even the same one in the Django series but done using Django-REST framework? No need for the client, just the REST API endpoints. That would be nice.",True
@darkfenix8283,2018-10-29T16:58:09Z,0,"Hey Corey ,  absolutely love your videos, could you recommend  a channel for learning c++?",True
@ketalciencia3163,2018-10-29T03:36:42Z,3,I Got a notifiaction for this video. I never subscribed or watched this channel.  Ty YouTube!!,True
@willyadrianp,2018-10-28T13:52:42Z,0,"Can i request a tutorial? Django rest API, django for backend and vue or react for backend with real project",True
@piotrs89,2018-10-28T07:30:46Z,1,"Hi, great video! However I have a question, what is a point of using iterator/generator if you create the whole list in your memory anyway? I thought that iterators are a way to get round this and not to hold everything in a memory.  If we had a sentance with billion words, the program would crash when executing self.words = self.sentence.split(), wouldn't it?",True
@techkanakesh6765,2018-10-27T19:05:28Z,0,I am new to this channel please tell me obt ur channel,True
@ShubhamSharma-rm9ry,2018-10-27T08:23:04Z,1,coding challenges help learners that how to implement and help to remember the concept,True
@sadshonenkid553,2018-10-26T22:04:38Z,0,who wants corey to create a continuation to the django or flask videos,True
@StankyPickle1,2018-10-26T19:19:32Z,1,Wish these videos were around when I was first learning. Keep up the good work!,True
@patrickfreeman9094,2018-10-26T18:58:54Z,1,Thumb up for the tutorial/problem combo.,True
@caseymccray3861,2018-10-26T16:19:44Z,1,YES THE IDEA IS GREAT,True
@4086pp,2018-10-26T16:05:41Z,1,Are Generators memory efficient if so how can you explain that.,True
@RealToriMan,2018-10-26T16:05:20Z,2,"I just want to save I love your calm voice and easy-to-understand explanation, no 'uhh' or 'err' in your explanation that can interrupt my focus while listening to your explanation <3",True
@mohamedyahya4014,2018-10-26T15:39:45Z,2,You know what?love you:),True
@lininchebaganiacao3868,2018-10-26T10:55:58Z,1,New subscriber here great videos,True
@koungmeng,2018-10-26T06:05:07Z,3,Lol my generator is: def sentence(sentence):     words = sentence.split()     index = 0     while index < len(words):         yield words[index]         index += 1  this is how silly i am. XD,True
@3hurricane4mark7,2018-10-26T01:31:51Z,1,"Great!  This will enhance your lessons, and adhere to a standard if and when you decidec to group them into training courses.  Thanks again Corey.",True
@LucidProgramming,2018-10-25T15:59:12Z,6,"Clear, clean, and concise. Your videos are an inspiration to my own channel on Python. I would really love to collaborate on a YouTube tutorial project with you should you be receptive to that idea. Cheers, and thanks again for the video.",True
@silverzero9524,2018-10-25T12:48:00Z,3,def sentence(sent):   return iter(sent.split())    3rd way (lazy),True
@didierleprince6106,2018-10-25T07:39:20Z,0,🧐🤔😅😊,True
@Skaxarrat,2018-10-25T06:45:03Z,42,Coding challenges are even better than the tutorials,True
@guyzee5251,2018-10-25T05:38:38Z,2,perfect timing with this one Corey; I just spent some time tinkering with the collections module!  This made it 'click',True
@manjusvijaykumar5444,2018-10-25T05:32:50Z,3,Hi Corey.. These coding problems are great. learnt a lot. Please continue them.,True
@Softwareengineeringdev,2018-10-25T04:08:32Z,1,✔️,True
@slavoie,2018-10-25T01:28:43Z,2,"I definitely enjoyed this format! Splitting theory and practice into two videos makes it very easy and convenient to revisit the desired part. Even though I like finding a solution on my own to coding challenges, I really like to compare it to what an experienced programmer would do to find out where improvements could be made. Also, on more complex problems, it really helps to see if the structure of the program is correct and if something is missing (exception, test case, etc.). All in all, I love all your videos and this one makes no exception, except on StopIteration ;).",True
@lune0808,2018-10-24T21:39:49Z,0,"I enjoyed trying this by myself! Do anyone know if it is possible to create a special method in a class that handles indexes? For example: class Foo:  def __index__(self, number):   """"""I wrote index as the name but i don't know if such a function exists""""""   *Things*  A = Foo(..) print(A[3])",True
@geoptus,2018-10-24T19:42:54Z,39,"HI Corey, these coding challenges are a great idea - great way to get us thinkin'. I hope you make these a regular feature :  )",True
@NathanTallack,2018-10-24T19:17:18Z,1,"Great work!  But using the for loop in your generator is cheating, especially when you went to the trouble of showing us the while loop with the incrementing counter in the tutorial.  ;)",True
@sauldominguezgomez3863,2018-10-24T18:14:32Z,0,Can we put the generator inside the __iter__ method?,True
@shaheerzaman620,2018-10-24T17:50:00Z,0,"Hi Corey,  My __next__ function is little different  class Sentence:     def __init__(self, input_string):         self.input_string = input_string         self.words = input_string.split()         self.count = 0     def __iter__(self):         return self      def __next__(self):         if self.count >= len(self.words):             raise StopIteration         value = self.words[self.count]         self.count += 1         return value",True
@lnkrishnan,2018-10-24T17:24:48Z,0,"Hey Corey .. any chance you can start putting out python videos on daily mundane stuff, like perhaps read csv files and output it sorted based on date field when date is in specific format, or quickly reporting how many mp3 files are in a folder and which is largest among them? Just ways that can get us thinking in python?",True
@mohamedkholti8755,2018-10-24T17:23:55Z,2,Thank you a lot! this is very interesting. keep the coding problem idea !,True
@manojrpoojari8975,2018-10-24T16:57:16Z,2,Your videos are always really good. And these coding problems would be a bonus. Thank you.,True
@736939,2018-10-24T16:39:46Z,0,Finally! And please explain the Mixins,True
@ghanteyyy,2018-10-24T16:38:59Z,2,Coding problem seems to be very interesting like all videos of yours. Please continue this series.,True
@wolfisraging,2018-10-24T16:33:09Z,2,"Man your videos are so legid, keep it up. I have learned so much from you. Thanks",True
@yadneshkhode3091,2018-10-24T16:21:56Z,1,Thank you sir !!!,True
@furankuraw7741,2018-10-24T16:18:40Z,1,POGCHAMP... DO MOOORE PLEASE,True
@vishnurammageshvaran3484,2018-10-24T16:09:46Z,3,Good luck Corey I enjoy your video keep working hard and get  success,True
@coreyms,2018-10-24T16:04:43Z,41,"There are usually multiple solutions to problems like these. If your solution is different than the ones I gave here then it is not necessarily wrong. For example, it would have been possible to use a try/except block in the next method as well. If you have different solutions that work then I would love to see them.  Also, quick correction: At 3:05 I said ""class attribute"" when really I meant ""instance attribute"".",True
