author,updated_at,like_count,text,public
@coreyms,2018-07-12T19:06:14Z,187,"I made a slight mistake in the video. The -f option on git clean is for ""force"" and not for ""files"". The documentation can be found here for more info: https://git-scm.com/docs/git-clean",True
@java2e,2024-02-25T13:39:34Z,0,"I tried 'git reset --hard' and untracked files were removed as well! But I saw that when you ran the same command, it didn't remove untracked file. Is this a new behavior of git in new versions?",True
@arcanelore168,2024-02-24T00:38:48Z,0,Does it still apply these days?,True
@ianwanjala8621,2023-11-30T11:50:11Z,0,"hey, how do you do the save on git bash once you've done the git commit -amend command?",True
@nextgodlevel4056,2023-07-26T06:19:19Z,0,"when we accidently reset --hard <commit hash>,  for reverting this effect why we use git checkout <hash> instead of git reset --hard <deleted commit hash> ?",True
@PimpMyYugioh,2023-06-16T10:53:45Z,0,Such a well-explained video. Really helpful! Even for someone who has read most of the Pro Git book,True
@bensonjunior833,2023-05-24T18:06:27Z,2,Best git tutorial out there,True
@overunityinventor,2023-05-09T06:53:43Z,0,Did i find the frequency where the input becomes zero? And are they Rodin coil?,True
@moinkhan,2023-01-18T15:26:40Z,0,Great video. Thank you.,True
@apoorv9492,2023-01-16T08:40:57Z,0,Really good straight forward tutorials. Highly appreciated Corey.👍,True
@hanjarake_taro,2022-11-17T20:01:02Z,0,"Git is so unintuitive, hence it should be discontinued and replaced by something much natural. It's the worst thing ever.",True
@greggompers16,2022-11-13T01:29:48Z,0,Corey's videos are the best Thank you Corey,True
@LOrealHardly,2022-09-21T13:19:15Z,0,"Brilliant video, worth it's weight in gold, too!!",True
@gzagenius4610,2022-08-24T14:08:27Z,0,"Very helpful and so well explained, just like your Python vids. Gold",True
@LNMLucasMasiero,2022-08-16T00:36:52Z,0,Thank u so much. Really useful git video by seeing it on practice,True
@J-K-AG,2022-08-10T19:27:37Z,1,I'm lost after 10 mins. It's kinda difficult to follow. Some pictures of the flow could have been nice,True
@MauricioSalazare,2022-06-24T21:40:46Z,0,"This is the best video tutorial for Git. Neat, straight to the point, stunningly clear. High quality teaching.",True
@tahiralauddin79,2022-05-12T09:33:44Z,0,On 2:13 you didn't write a bunch of gibberish. You wrote exactly the same line 4 times except for the line number 4. You exactly wrote sdfasdfasdf 4 times. Your talent,True
@tahirmir6634,2022-05-11T04:33:45Z,0,"Hi, when you said if other devs already checked out our commit and now we need to do git revert. Do you mean, we have pushed those commits and then they have checked out those changes because committed code is still at local. isn't it?",True
@girish2555,2022-04-21T18:58:01Z,0,Crystal clear explanation 🔥,True
@stormShadow64,2022-04-10T18:20:26Z,0,Awesome video,True
@HarisAli-ci1dj,2022-03-29T07:56:51Z,0,Thanks a lot. This was really helpful!,True
@lcrdcastro,2022-03-24T11:19:32Z,0,"Great video , thanks for sharing your knowledge.",True
@kunalk1896,2022-03-16T08:49:31Z,0,This is one of the best videos for someone who manages git repository. Loved it,True
@user-qs2um4uw3r,2022-03-12T13:22:21Z,0,"Raiffeisen management, you direct exposure to Russia of €22.9bn. You are sponsoring war in Ukraine!    Raiffeisen, staying in Russia you are sponsoring war in Ukraine. Unexpired cards – unlimited shame!    Raiffeisen management, your company keeps on paying taxes to the Russian government, which started the war in Ukraine. Do not cooperate with the aggressor, give Ukrainians a chance to live! #StopBusinessInRussia Raiffeisen management, you direct exposure to Russia of €22.9bn. You are sponsoring war in Ukraine!    Raiffeisen, staying in Russia you are sponsoring war in Ukraine. Unexpired cards – unlimited shame!    Raiffeisen management, your company keeps on paying taxes to the Russian government, which started the war in Ukraine. Do not cooperate with the aggressor, give Ukrainians a chance to live! #StopBusinessInRussia",True
@FAAAx2,2022-02-06T19:44:02Z,0,"I paid 30€ for a git course of multiple hours. Well, I just discovered this video and it's quite better for 0€. Thank you",True
@Jack-dx7qb,2022-01-31T12:38:23Z,0,Thank you for the high-quality tutorial. I have learned so much from you! Best wishes.,True
@ROMAN-zu3wu,2022-01-09T10:18:05Z,0,I learned something now ..thanks,True
@jebronekitty,2021-12-14T17:38:04Z,0,"Why is everything in command line, why can't people use gui. It's easier...",True
@harikishoremandla6783,2021-12-04T18:21:56Z,0,This is just amazing.,True
@gomes8335,2021-11-23T03:35:03Z,1,God,True
@TheSumanb,2021-11-20T23:41:25Z,0,"One of the best , please keep on publishing great thanks , subscribed :)",True
@Aarmaxian,2021-10-15T14:43:36Z,0,too good to be true!!!,True
@pratyushsingh1606,2021-10-06T12:22:56Z,0,"You are amazing.. I have seen tons of videos.. But after watching this, i was like.. This is how you explain.. Thank you for taking out time to make this amazing video 😍",True
@urbanmunda2451,2021-10-06T07:47:28Z,0,Amazing video. cleared all my doubts. Thanks a lot,True
@3mar1997,2021-09-28T18:18:37Z,0,You are an absolute legend and a True teacher ❤️🔥,True
@JamesLee-tg9xl,2021-09-26T02:40:57Z,1,Best git tutorial ever made on planet earth.,True
@keshavparad4792,2021-09-25T01:32:36Z,0,Thank you man u saved my project love from india,True
@affreenmjha4113,2021-09-14T23:29:45Z,0,Great troubleshooting video for git,True
@emmanuelmichael5314,2021-09-10T04:18:39Z,0,Amazing! thanks a lot,True
@plot.python,2021-08-27T01:23:29Z,0,Great video nonetheless Corey.  Thank you,True
@EUU100,2021-07-16T20:57:35Z,0,"thanks a lot very clear and helpful, what do i do if after a hard reset i get this error  hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details.  any help would be greatly appreciated",True
@adejohjoshua8592,2021-06-17T10:07:03Z,0,This video is awesome,True
@brunagobi7393,2021-06-15T17:02:54Z,0,thank you..this tutorial just saved me,True
@Eaglea12k,2021-05-24T12:13:25Z,0,Awesome explanation... very useful,True
@sesedmien1,2021-05-22T05:10:32Z,0,You rock Corey!,True
@maqdala,2021-05-16T20:42:49Z,0,Now I seriously understood what git reset does.,True
@sankalparora9261,2021-05-16T08:51:13Z,0,"Hello!  Great video!  Please help me, git log on the subtract-feature branch is not showing the subtract-feature specific commits, but all of them.",True
@abdelatif4002,2021-05-05T21:10:14Z,2,"## undo last commit          $ git commit --amend -m ""the new message""          * this will also add any files on the staging area to the last commit (without creating a new commit)         $ git commit --amend         * Keep or edit the old message         $ git log --stat         * show the files that were changed within the last commit.         * note: this commands will also change the hash of the commit therefor it will change the git history.                ## Copy a commit         * First checkout the branch where to copy to         $ git cherry-pick (hash)          * note: cherry-pick doesn't delete commits.                                                             ## Delete commits                                 $ git reset (hash)              * delete commit and keep changes in working directory           $ git reset --option (hash)                --soft > keep changes in the staging area                          --hard > discards changes to the tracked files but keeps untracked files in the working directory                                                               ## Delete all untracked files         $ git clean -df         df=force delete                                                                 ## Restore commits                    $ git reflog         * shows commits in the order when u last refrenced them         $ git checkout (hash)         * restored commit is in a detached HEAD stat(wil l be trashed at some point)         $ git branch backup         * save the restored changed(commit) to a new bra nch (backup here)  ## Revert commits         $ git revert (hash)         * undo a commit without changing the git history(this creats a new commit in top of the original commit)         $ git diff (hash) (hash)         * show difference between two commits",True
@antonyspiano2403,2021-05-01T14:22:29Z,0,"Not commenting anything special, cause Only God knows how this tutorial helped me . Thanks a ton brother !",True
@nikhileshsaggere,2021-04-26T07:25:11Z,0,"Hi Corey, thanks for the nice explanation. Could you please provide your insights with examples of reverting a merge commit?",True
@jkmutea,2021-04-20T12:41:26Z,0,Best git video I have seen .. keep it up,True
@parthokr,2021-04-19T19:33:12Z,0,Just wow! Great tutorial on git undoing,True
@abhiraj533,2021-04-13T14:27:24Z,0,Always love your videos thanks a lot.,True
@waklara9973,2021-03-08T10:05:03Z,1,Cory you are life sever !!! I was crying ...,True
@fuad471,2021-02-23T11:04:37Z,0,"very helpful tips from real work flow , thank you.",True
@dhairyalakhera893,2021-02-19T05:12:53Z,0,Complete undoing in just 21 minutes... Great video...,True
@joshuaramirez4678,2021-02-15T19:28:47Z,0,Nice examples!,True
@abduogalal53,2021-02-10T10:04:31Z,0,you're the master,True
@livingwithlinlin3122,2021-02-10T05:12:42Z,0,The best as always,True
@TReXcuRRy,2021-01-29T18:12:41Z,1,"Great video. Clear and densely packed info, with excellent examples. Thank you.",True
@jadia,2021-01-27T18:51:54Z,1,The BEST video on advanced git out there. I'm amazed by the use cases Corey has shown. I can't thank you enough for the efforts you put. I'll definitely do my part to support your channel.,True
@jasarora9331,2021-01-19T16:36:23Z,1,This is a must watch for every junior dev (including me).,True
@rounakjain5774,2021-01-09T00:57:01Z,0,Thanks!,True
@navnathjadhav9111,2020-12-22T16:44:18Z,0,Thank you very much...,True
@tan2cang93,2020-12-20T15:03:23Z,0,"thank bro. now I know about reflog - the saver for me. anyways, is there any way to write the commit message in git revert command?",True
@josemadrid4343,2020-12-11T11:34:44Z,0,Awesome video. You explain things in a way that just make sense. Thank you.,True
@miguelramos7697,2020-12-06T22:44:08Z,0,"Great info, thanks for sharing!!!",True
@bhatnagarcapital,2020-11-16T06:01:26Z,0,how to amend the last commit 4:45  How to add a file in the last commit 7:48,True
@kamalsk8023,2020-11-12T19:16:18Z,0,"Awesome explanation 👌👍,",True
@pooyarowgh,2020-11-06T04:10:17Z,10,I am git newbie. This video saved my files that I thought I lost in a series of unintended commits. About 2 weeks worth of work! Thanks so much Corey and keep up the good work.,True
@KevinTempelx,2020-10-28T20:19:56Z,0,Thank you!,True
@kareemnoureldin,2020-10-16T11:13:56Z,0,Thanks :),True
@hichamsouleimani1920,2020-10-11T18:06:10Z,0,I learned a lot from your second video on git. Thank you again.,True
@MarkCharbo,2020-09-30T04:08:35Z,1,Solid! thank you,True
@justinwong4149,2020-09-20T18:01:14Z,0,"Detailed notes, piggybacking off of @Ajeeth Kumar very helpful comment! Cleaner formatting: https://www.evernote.com/l/ApD7lxP97NJPeacPj1GLMpzu0bRm1IX_ADY 1. 1:42   - Revert back the code that was written     1. command: git checkout calc.py     2. While this is still a valid command in 2020, within the command line git now suggests using 'git restore FILENAME’.          1. reasoning: git is trying to separate the different functionalities of git checkout into their own commands, i.e git restore and git switch 2. 3:36   - Updating the commit message alone (amend)     1. git  commit --amend     2. CAUTION: this changes the commit history, don’t do this if you have already pushed to your remote, as it will effect other users 3. 5:50   - Accidentally left off a file that we wanted to commit     1. commands         1. git add FILENAME         2. git  commit --amend FILENAME     2. CAUTION: this changes the commit history, don’t do this if you have already pushed to your remote, as it will effect other users 4. 7:38   - Move the commits to a different branch (cherry-pick)     1. git checkout subtract_feature     2. git cherry-pick COMMIT_HASH 5. 10:26 - 3 different types of reset     1. git reset --soft HASH         1. resets to the HASH specified, but keeps changes in the staging directory (as if we called git add on these files)     2. git reset --mix HASH         1. this is the default reset mode         2. resets to the HASH specified, keeps the changes in the working directory- similar to git reset --soft     3. git reset --hard HASH         1. make all of our tracked files match the state they were in at the time of the commit specified.          2. CAUTION: This will get rid of all other changes that you made after the commit you reset to.          3. Note: untracked file changes will not be removed. 6. 13:38 - Getting rid of untracked files (git clean)     1. git clean -fd         1. -f flag is force (f does not stand for file, per corey’s amended youtube comment)         2. -d flag also removes directories 7. 15:01 - Retrieve critical files that were lost, and you want them back (git reflog)     1. For when you ran git reset --hard, but you realized you need those changes you deleted     2. You have ~30 days to recover those changes before git garbage collection     3. commands         1. git reflog             1. find the hash you want to revert to         2. git checkout HASH             1. you will be in a detached head state (not on a branch)         3. git branch backup             1. create a branch from this detached head to preserve 8. 18:10 - Backing out changes, when other people have already checked out your changes (git revert)     1. concept: create a new commit to reverse the effects of an earlier commit. It will not modify any existing commits, it is creating NEW commits that undo previous changes.     2. command: git revert HASH_TO_UNDO",True
@HK-sw3vi,2020-09-18T18:15:31Z,0,"this is like learning how to land a plane, You can't just be complete by knowing how to commit, you gotta know how to undo your bullshit.",True
@howards5205,2020-09-16T04:40:50Z,0,"Wow, these videos are SUPER helpful. I'm going to watch it again.",True
@CuriousAnand,2020-09-09T07:37:09Z,1,"Seriously, this is a life saver!",True
@mithunpolawar749,2020-09-07T20:36:36Z,1,Awesome explanation..!,True
@EmadHa,2020-09-02T23:02:28Z,0,Well done with this tutorial,True
@ericsu0630,2020-08-25T15:12:18Z,4,"Git Developers: ""what if they want to roll back to a previous commit?"" Also Git Developers: ""what if they decide to roll back to a previous commit and want delete the changes?"" Also Git Developers: ""but what if they delete the changes but regret that they've deleted it?""  PARANOID MUCH?!",True
@fernandofurtado7164,2020-08-08T05:59:54Z,0,excellent work!,True
@RogerBarraud,2020-08-07T01:07:10Z,0,Suggestion: I'd find this easier to follow / navigate to appropriate bits if you were to show gitk or similar graphical branch history along with the cmdline and code files.,True
@dabeanman808,2020-08-01T16:18:20Z,0,"Dude!!! Thank you so much for these git walkthroughs, best on youtube IMO!",True
@vikashgauravvkg,2020-07-20T11:45:50Z,0,"well, explained pretty well in this video",True
@sunilpoojari91,2020-07-11T14:54:45Z,1,Very Informative Video!  Thank You So Much. 🙌🏻,True
@enriquemillanvalbuena5241,2020-07-08T16:32:30Z,1,Thank you so much for your video. It is really handy! :D,True
@fabianwinkelmann3931,2020-07-04T09:47:23Z,0,"To get an overview over the complete git history type ""git log --all --decorate --oneline --all"". You can also assign an alias, so you don't have to write the previous command out everytime. alias graph=""git log -all --decorate --oneline --all"". Then you can just type graph",True
@GeniousSoftwareServices,2020-06-27T12:01:25Z,0,"Nice Video. Thanks. Our AWS S3 with GitLab Integration Video https://youtu.be/acKflkrDUYE",True
@goutamkundu6392,2020-06-12T16:33:32Z,1,Great tutorial on git. I highly appreciate your efforts. Many thanks,True
@dharamveerbhadoria2083,2020-06-07T20:50:57Z,1,Very useful.,True
@saurabhmittal6947,2020-05-28T13:38:46Z,1,This is really some very very important content. Thank you. You just got one more subscriber :),True
@ankukumar7874,2020-05-26T19:53:05Z,0,"Why have you pushed feature branch to remote,  git push -u origin FeatureBranch. At the end you are eventually deleting that branch, you merged feature branch with master and then pushed master to remote, git push origin master. Why do we have to unnecessarily create a branch in remote and then end up deleting it in the end",True
@alexisaddicted,2020-05-25T16:28:49Z,1,"Amazing, user-friendly explanation!!!!",True
@jackofnotrades15,2020-05-24T05:28:54Z,1,Just perfect.,True
@kotnikrishnachaitanya,2020-05-15T12:50:41Z,0,How to get file from previos commit.,True
@aram5642,2020-05-13T16:26:00Z,0,"Do you have a recipe for a scenario where you need to return to an oldish feature branch - you no longer remember what changes you had introduced, so you need a quick diff between the current head and the commit that started the branch? What would be the sneakiest way to find the branch origin SHA?",True
@aram5642,2020-05-13T16:21:42Z,0,"Great vid! When it comes to git reset there is also a ""keep"" option but I have never had a clear situation to see its benefits.",True
@webinarcactuss9203,2020-05-09T13:20:57Z,0,"Thanks for video, really helpful",True
@MadhushreeSinha,2020-05-07T04:34:01Z,0,"how to show that ""on master"" with cmd in windows?",True
@PrashantYadav-xw7do,2020-05-04T19:21:07Z,0,"I love the way you teach. It's very easy to understand and apply everything, I do recommend your lectures to everyone cause you are super cool. Thanks man",True
@ubaidraza1165,2020-04-24T21:21:33Z,2,You are awesome. your teaching skills are extraordinary In 21 minutes you just cleared everything that I need to understand to get rid of all those confusions that often happened to me.  Thank you so much <3,True
@madhavgd4365,2020-04-20T14:24:47Z,0,Awesom tutorial i ever seen about git reset/reset /reset hard/revert commands,True
@aakashdhoundiyal6841,2020-04-15T13:26:01Z,0,great tutorials on advanced concepts... can you also tell how to combine all commit messages into one commit message in git?,True
@ladislavszabo4247,2020-04-15T07:36:37Z,1,"great explanation, thanks for video!",True
@Dipenparmar12,2020-03-31T07:00:15Z,1,Excellent job....bro..,True
@SimplySpiceIt,2020-03-24T18:50:31Z,0,"Just curious: Why can't we use git checkout <branch-to-reset-pushed-commits> git reset --soft HEAD~(number of commits to be back) git commit -A <all what needed to be> git push origin <branch> --force ? instead of ""revert""ing each of all commits? In that way, we could save one commit being extra added to the branch and hence clean.",True
@pacedelacruz4913,2020-03-24T17:05:11Z,0,"There's GOT to be a way to develop a gui for this as, looking at all this mess, I feel like I'm back to working in DOS, like??? Nah... I'll develop a gui and become as rich as Gates did with his Windoze, mwahahahaha 😈  (No mind me: cabin fever with this ugh quarantine. Stay safe and thanks again!)",True
@pacedelacruz4913,2020-03-24T16:59:56Z,1,Awesome video. Thanks again.,True
@VadimSchulz,2020-03-22T15:45:23Z,0,thank you,True
@ajeethv,2020-03-21T15:23:56Z,235,"1:42   - Revert back the code that was written  3:36   - Updating the commit message alone (amend) 5:50   - Accidentally left off a file that we wanted to commit  7:38   - Move the commits to a different branch (cherry-pick) 10:26 - 3 different types of reset 13:38 - Getting rid of untracked files (git clean) 15:01 - Retrieve critical files that were lost, and you want them back (git reflog)  18:10 - Backing out changes, when other people have already checked out your changes (git revert)",True
@riyan5259,2020-03-09T03:22:34Z,0,"clear screen ---------------------------------------> clear Check git version ----------------------------------> git --version Add name to global variables -----------------------> git config --global user.name ""NAME"" Add name to global variables -----------------------> git config --global user.email ""EMAIL"" Check the configurations/ variables ----------------> git config --list  Main git commands (Handling/staging/committing)====>  ALL THE COMMANDS ARE RAN IN GIT BASH.  KEEP IN MINE THAT THE WORD 'ORIGIN' MEANS REMOTE REPOSITORY (name)  1  : go to the working directory     list files in the directory --------------------> ls -la  2  : Initialise repository (new) --------------------> git init (Should create a .git file in the directory     stop tracking directory ------------------------> rm -rf .git (Make sure to be in the directory)  3  : check untracked/ tracking files ----------------> git status (red = untracked , green = tracked)     : ignore files that should not be ----------------> touch .gitignore (Make sure to be in the directory)     committed/ staged (Don't put     .gitignore to the list)  4  : Check difference -------------------------------> git diff  5  : Track/commit file ------------------------------> git add -file name- (stage a specific file) git add -A (stage all files)           6  : Remove a file from staging area ----------------> git reset -file name- (un-stage a specific file)             git reset (un-stage all files)  7  : Commit all files those are in ------------------> git commit -m ""-Commit name/message-"" (with a message)                    the staging area (git status)                 : (If you run git status now, --------------------> ""On branch master nothing to commit, working * directory/tree clean""     you should see something like this)        8  : Check the committs -----------------------------> git log  9  : Clone and use a repository ---------------------> git clone --repository url-- --where to clone-- (Clone from website)  10 : Declare the origin for the git repository ------> git remote add origin ""--repository url--"" (Link must end with a .git)  11 : Fetch/Get data/files from the repository -------> git pull origin --branch name--  ===> What is a branch?      |A branch is a memory of changes that have  |      |been made while the the branch is selected |      |in the prompt or anywhere else.            |                                                12 : Make a new branch -----------------------------> git branch --branch name--    : There are two typed of branches, one is Local                                      branch, the other one is remote tracking      branch.       Local branch => Only available on your local                    machine or your local                     workspace.       Remote-tracking branch => The branch which                connects your local                                repository to your                       central repository. 13 : Delete a local branch -------------------------> git branch -d --branch name which you want to delete--    : Delete a remote branch ------------------------> git push origin --delete --branch you wanna delete--    : see all the branches --------------------------> git branch -a  14 : Move to a branch ------------------------------> git checkout --The branch which you want to go to--    : A branch is a memory of changes while the       branch is selected in the prompt.  15 : Push ------------------------------------------> git push -u origin --from which branch-- (This command associates local branch to remote branch)  16 : Merge a branch to the master branch (or any) --> git merge --branch from which you want to merge into--(Make sure you're in the branch you want to move the changes to such as master)  17 : See which branches have merged into the -------> git branch --merged      branch you're currently on.  18 : Make the branch a remote repository (Add it ---> git push origin --local branch--      into origin) or watchable by the main website  19 : Change the commit message of the last commit --> git commit ammend -m ""--your updated message--"" (The git history/ 40-digit code that you submit in a commit will be diff)      you did without doing another one.  20 : How to duplicate a commit from one branch to -----> Go to the branch you wanna copy from      another if you've committed in a wrong           1: git log to copy the commit code because you'll be needing it      branch.           2: After you copied the commit code,             Go to the branch you wanna copy it to              3: git cherry-pick --commit code/history code/40-digit code--  21 : How to reset  22 : Delete commits and git log history ------------> 1: Copy commit code             2: git reset --soft --paste commit code-- (soft) (It will not reset the staging area hence we won't loose any work we've done)              : git reset --paste commit code-- (mixed) (It will reset the staging area hence we will loose the work done)              : git reset --hard --paste commit code-- (hard) (It will get rid of EVERYTHING including the staging area THAT IS TRACKED                 BUT UNTRACKED FILES WILL STAY AS THEY WERE and                 the work done) 23 : How to go back to how things were before ------> 1: git status (The file you modified will be red)      modification.          2: git diff (You'll see the difference before the last commit on that file)             3: git checkout --file that you want to revert changes--             4: git status (You will see that the file is not modified)             5: git diff (You'll not see any difference)                Hence, the file has reverted to its last version. 24 : If you wanted something to get committed ------> 1: Create the file you wanna send to the last commit (Ignore this if the file has already been created)      in the last commit, do this.                     2: Put that in the staging are (The file)             3: git commit --amend                                                           Now that a file has probably popped up on your screen, you can edit!             4: git log --stat (To see the files and changes committed on the log)",True
@vinodboddukuri,2020-03-07T06:12:21Z,0,Nicely covered all git mistakes that people generally do. Thank you very much for making this video.,True
@tambolaking5383,2020-02-20T07:35:45Z,1,Awesome tut. With examples it made damn easy to understand,True
@jasminaoukde2016,2020-02-08T15:43:12Z,2,"Lots of useful information in one place, I really enjoyed it :) Thanx Corey",True
@ArshilGenius,2020-02-02T11:37:31Z,3,Cleared lot of doubts! Thanks!,True
@josephh836,2020-01-28T06:50:05Z,0,"Thanks for informative explanations.  i have problem that i couldn't find out it.    i have created a project by root in my UNIX system.  then i make a lot of change on that. using git i give accessibility to a non root user ""for example Alex"" to pull and make his change on the project. but when he wanna write the change, permission denied massage is appeared and he can not write his change on the file. i checked the file permission and i saw the permission of all file and folder in project directory and sub directories change to ""rw-r--x--"". i wanna keep project file and folder permission on ""chmod 666"" and prevent change it through deployment by git. what should i do?",True
@seancharles1595,2020-01-16T20:43:58Z,2,"Outstandingly useful, Thank you.",True
@bilalali1470,2020-01-14T19:04:46Z,5,"Thumbs up if u like that ""Hey! How is it going everybody?"" :p",True
@_isaac_muniz_,2019-12-30T21:31:53Z,0,"Great tut and I still have a doubt.  If I want to revert my whole project to a previous commit, how can I do it?",True
@josephgavinsyverson,2019-12-30T20:42:18Z,0,kick ass video,True
@studyonline3236,2019-12-28T15:28:17Z,11,I can see simplicity and at the same time your professional way of explaining it. Thank you for investing your time to save our's,True
@wandererlion2699,2019-11-26T17:11:10Z,0,Does git checkout check out a branch or does it roll back to the last commit? You were using git checkout to change branches in the last video. Thanks!,True
@nathanellis7819,2019-11-14T15:50:25Z,1,I love you ... it is true,True
@JasperEjoc,2019-11-10T11:48:24Z,1,"Thanks for this, very useful",True
@gabrielpolobrallard1701,2019-10-09T13:31:25Z,1,great video! thanks!,True
@ashrafulfuad2967,2019-09-29T19:17:07Z,1,Thank you so much this is really helpful for git learners,True
@avinavsingh5157,2019-09-18T18:33:39Z,0,"improper use of git has cost a lot of people their jobs, do you know   what a great video you have made....cheers man.Thank You.",True
@deepeshmohan9165,2019-09-04T16:08:29Z,2,Thank you for the great tutorial :),True
@bozhang525,2019-08-16T16:54:26Z,0,"For reset --hard, you don't need to use checkout and then create a backup to restore. YOu can simply use reset --hard <the commit you want restore to>. Say A->B->C, after doing git reset --hard B, you can do git reset --hard C to go back to C. The only issue with --hard is that all uncommitted changes will be lost.",True
@BanglawalaNeesarg,2019-06-10T22:19:08Z,5,"After deciding to ditch the Git GUI in favor of command-line, I came across your videos. You have done a fantastic job compiling the essentials and demoing them! It feels like I finally understand what ACTUALLY is going on when I use these commands. Thank you!!",True
@XxNGameCubexX,2019-06-10T19:13:22Z,0,"""We want to get back  to the way things were...""  Haha you said that so many times that I just started laughing after a while. Great set of videos, by the way! Thanks for teaching me how to use git!",True
@516deepak,2019-06-07T10:25:28Z,1,Great job Corey its so helpful  inday today work,True
@divakark1,2019-06-01T12:04:14Z,0,"Great video! I need help. I did (git add -A) a lot of commits earlier which resulted in several files getting added. After that i've made several commits to some files. Now during MERGE REQUEST, these several unwanted files need to be removed as they cannot be merged. Can you guide me on how to remove files from merge request?",True
@kumarprateek1279,2019-05-29T13:47:20Z,0,Great playlist for beginners.Just need couple of more videos on resolving merge conflicts etc,True
@prashantbiradar7896,2019-05-25T19:10:52Z,1,1000 Likes,True
@laureen69,2019-05-23T22:03:59Z,2,That's what 'advance' git tutorial i've been looking for... superb thank you,True
@uniquechannel3086,2019-05-20T03:45:15Z,1,Thanks,True
@jiaweiyu9150,2019-05-19T16:58:13Z,0,"How could I exit the interactive editor after git commit --amend? I've tried q, ^C and ^X...none of them works.. Thank you for answer.",True
@JimTheKiwifruit,2019-05-13T03:13:53Z,1,My butt is saved! Thanks!,True
@plreuokjhg,2019-04-19T16:34:39Z,1,Good explanations,True
@plreuokjhg,2019-04-19T16:34:29Z,1,Good explanations,True
@WilsonMar1,2019-04-08T04:49:06Z,0,"Five year later now, this is still among the best videos I've found in my list of all videos I've seen at https://wilsonmar.github.io/git-github-videos",True
@codewithsub5083,2019-04-05T18:17:26Z,2,Really a great video. Learnt a lot from this video.  Thanks,True
@chaiti19,2019-04-01T23:17:55Z,8,Best of the best!!Thank you is an understatement!!,True
@fendevfendev5903,2019-03-29T02:43:28Z,3,One of the best git videos I have seen.  Thank you Corey!,True
@aravindm800,2019-03-24T14:07:35Z,0,What's your PS1,True
@danielb.6476,2019-03-21T09:32:50Z,1,No more gitkraken for cherry-picking! 🕺🏿 Awesome video! Thanks for this.,True
@KamelJabber1,2019-03-17T02:48:42Z,1,Fantastic video!,True
@aealarco,2019-03-07T10:51:54Z,1,"thank you very much, very useful video !!",True
@yklash,2019-03-06T21:50:39Z,0,"Very clean, clear bless you !",True
@masihsadri,2019-02-08T10:04:17Z,1,"very good tutorial  as a suggestion: if you use ""git log --oneline --graph --all"" is better than ""git log"" for new users. you can also define new alias at first and use it instead of ""git log"": how to create an alias command: alias ThisOne=""git log --oneline --graph --all"" is better than ""git log""  -- and now you can you ""ThisOne"" instead of ""git log""  Best Regards",True
@cyberpsybin,2019-02-07T19:12:01Z,0,git gud,True
@SiphoMkhwanazi,2019-02-06T10:58:49Z,2,@Corey Schafer thank you for this tutorial. You're a life saver.,True
@AICodingAdventures,2019-02-03T23:39:52Z,1,Very good video!!!,True
@PaulMcCannWebBuilder,2019-01-18T22:49:12Z,0,"Despite the quick 'clears', which throw off and freak out beginners, this is the clearest explanation of fixing mistakes and changing history. Thanks.",True
@poojanpatel2437,2019-01-16T14:19:06Z,1,Great,True
@aneksingh4496,2019-01-15T20:47:18Z,0,Can u please explain what are the perils of git rebase,True
@aleksagordic9593,2018-12-10T16:06:44Z,1,"Perfect video, thanks! Keep it going, guys like you make this world a better place.  1 advice though: use head/head~/head~n/head^ syntax instead of sha-1 codes so that you can focus more on the intention and less on the implementation details of git.  For example: 10:40 - instead of using git log to find sha-1 codes, just use git reset --soft head~  (I want to reset to the second to latest commit) 20:00 - instead of using git log to find sha-1 codes, just use git diff head~ head  (i.e. I want a diff between second to latest commit and latest commit on the branch I'm on)  additional tips: - checkout head^ which differs from head~ only when you have merge commits. (you can also use head^n) - use head~n to go back n commits into the past. - head is a synonym for the sha-1 of the latest commit.",True
@mahitejgangaraju2842,2018-11-18T01:40:17Z,1,Great Video. covers all the important scenarios,True
@carlellis9647,2018-11-16T15:26:58Z,27,This is the second video I've watch by Corey. I've been in software development for over 20 years and he explains Git better than anybody I've come across. Keep up the great work you're doing. :),True
@vinaykhurana9933,2018-11-15T16:32:18Z,1,What a wonderful explanation!!! Superb job. :),True
@rockywright4237,2018-10-20T18:27:06Z,0,I wish you'd use a plain text or like markdown file instead of python,True
@sl023,2018-10-11T03:40:21Z,0,"I need to know tracked and untracked , staging and unstaged with example , please u share ur ideas",True
@cnreddy,2018-10-09T17:52:07Z,2,Great video. Thanks :),True
@cuongngo7858,2018-10-07T02:07:03Z,0,"@Corey Schafer I have a question , around 3:00 , after we add some code on master branch, when I execute git checkout otherbranch, those changes on master branch are also move to otherbranch, it differs from what I see from the video, what did I miss?",True
@sebastianbraun2473,2018-09-23T11:35:34Z,1,Best explanation by far,True
@ivanovmg,2018-09-14T19:59:58Z,1,This lesson is awesome! Thank you for very clear explanation!,True
@jerry5646,2018-09-12T21:25:12Z,2,The best of the best.,True
@bikramdas3461,2018-09-06T19:52:51Z,1,Salute you. You made my day.,True
@jonathanbrand3379,2018-09-04T18:06:59Z,0,"Thank you so much for this tutorial.  A lot of guides and videos focus on the 'happy' path of using git in development, but tend to leave aside the ugly bits that creep into our workflow more often than we'd expect.",True
@drstrangelove09,2018-08-20T14:09:47Z,0,complicated!!!,True
@firojsiddiki2207,2018-07-31T17:37:56Z,0,"you told: git reset --soft <hash of commit you want to keep> // deletes all wrong commits, preserve changes in file,keep in staging area . What if we want to delete all other commits leaving exactly 2 commits. How to specify this in cmd???  Help plz",True
@marwanfikrat8432,2018-07-30T03:55:42Z,1,Thank you!,True
@janarthananv3268,2018-07-28T11:04:05Z,39,Am DevOps. Best tutorial for python and git so far. Even paid tutorials are not able to reach this level of profession . Keep it up :),True
@kttalkZ,2018-07-27T17:53:33Z,1,Amazing sir,True
@coreyms,2018-07-12T19:06:14Z,187,"I made a slight mistake in the video. The -f option on git clean is for ""force"" and not for ""files"". The documentation can be found here for more info: https://git-scm.com/docs/git-clean",True
@costaszeimpekis994,2018-07-09T19:01:55Z,1,Nice job man,True
@yasak6476,2018-07-08T10:57:14Z,0,a great lesson but there is a lot of information and hard commands i hope that u do more videos for more commands like theses,True
@amanthakur1987,2018-06-29T07:03:28Z,2,Exactly what a developer needs rather than bombing with extra useless stuff on git. Good one.....Thanks...,True
@arturmavlyuchenko7647,2018-06-18T09:30:20Z,0,"so, how do we modify this message without doing another commit. Well, to do that, we can just do another commit…)) hahahah",True
@shamanth312,2018-06-11T08:54:08Z,0,Nice videos on git tutorials. Please make an video on git rebase command,True
@TheShneek,2018-06-09T16:31:07Z,1,This was great thanks for making this video.,True
@amrelsayed4363,2018-05-14T21:47:31Z,0,"Perfect Git Tutorial,  BTW while studying the tutorial, trying ""git reflog"" i accidently typed reset commit id instead of checkout and then the backup branch hasle and guess what it gave me the same thing!  Thanks a lot really great tutorial",True
@mathewkargarzadeh3158,2018-05-10T03:43:40Z,1,I loved the lessons. getting more in depth knowledge  on git.  Thanks Corey !!!. you are the best,True
@ashishm8413,2018-04-20T03:42:54Z,6,"After watching this video, I wish I could give it a thumbs-up 51 times so you hit 1000.  Deserves it!",True
@Xellos976,2018-04-15T14:46:06Z,0,"At 17:19, at which step is the deleted commit from reflog going to the backup branch?",True
@samuelpimenta1942,2018-04-14T17:13:02Z,0,Thx a lot!!!,True
@adityanehra,2018-04-07T13:01:20Z,3,while(1) {     like++; },True
@rishigupta2507,2018-04-04T20:37:34Z,1,Best git videos I have ever seen great job bro!!,True
@SaberRiryi,2018-04-04T04:32:18Z,0,I created a bad commit message with my commit. I then proceeded to push that bad commit to my remote repository. I'm the only one that accesses that repository right now though so no one else has pulled my changes. Am I okay to do a --amend (which changes the history) and then push my changes to my remote repository? I'm using bitbucket not that this matters.,True
@mehmetalisahin3560,2018-04-03T08:55:06Z,0,Thanks. Awesome explanation and samples.,True
@sriramab,2018-04-03T08:12:15Z,1,"Wow. Watched all the videos on GIT. The flow and structure of the lecture(s) in all the videos is so smooth, that I Never had to rewind  and ponder .."" what did he say""... . More than perfect !",True
@harvesterharvester,2018-04-02T12:30:41Z,0,"best tutorial worked on , you should teach more",True
@iorbit,2018-03-24T09:46:39Z,1,You explain everything very clearly and in a good pace,True
@deoray,2018-03-20T12:56:28Z,7,"Very very helpful tutorial for some of the more advance/obscure features related to rollback and reset. While this tutorial is long  and someone in need of quick answer may run out of patience, I still recommend a good listen. Its better to know details rather than following commands without knowing basics. Thanks Corey for quality tutorial.",True
@amardeepbhowmick3614,2018-03-17T08:16:20Z,3,Best video on git ever!! intuitive and covers most of the practical use cases!,True
@crosby3108,2018-03-05T01:07:12Z,0,This is a freaking great video thank you sir,True
@makedredd299,2018-02-23T22:47:10Z,0,Thanks Corey for this video.  I also got some nice detached HEAD advises I'd like to share.  From when I managed to loose 6 hours of work when just blindly following commands from google searches and stackoverflow posts.  ** Git cartoon ** https://xkcd.com/1597/   ** Detached HEAD advises ** https://stackoverflow.com/questions/48848732/error-failed-to-push-some-refs-to-gitgithub-comname-project-git/48855048#48855048,True
@tomppa31,2018-02-10T11:05:57Z,0,I love you.,True
@1apocalyps,2018-01-10T17:31:14Z,0,Great video straight to the point and not a second was wasted!!,True
@JohnnyMetz,2018-01-04T01:19:36Z,5,Best git video I've ever seen by far. Well done!,True
@MrEldari,2017-12-14T00:42:19Z,0,Great!,True
@vitalyb7759,2017-12-08T13:48:36Z,0,w,True
@greatgibson0,2017-12-01T20:05:58Z,0,I bet this video saved many lives.,True
@archtaurus,2017-11-08T17:47:00Z,22,"The most awesome tutorial about git reset/checkout/revert commands, I ever seen so far. Great! Thankyou!",True
,2017-10-26T03:48:24Z,2,Wow!!! This is perfect! Excellent explanation. Thank you,True
@HuntroMZ,2017-10-16T21:56:04Z,6,The -f in git clean stands for force and not file. (13:56),True
@melshman,2017-10-09T12:15:49Z,0,"When I was following tutorial, I made a change to a .py file in the cloned repo and then tried to check out the 'file' committed to revert back changes, but I get the following permissions errors... Any ideas what might be causing this issue?  I am on win10 and Git Bash.  $ git checkout pyExample.py error: unable to create file pyExample.py: Permission denied  tried again... and got slightly different error:  $ git checkout pyExample.py fatal: failed to stat 'pyExample.py': Permission denied  I had another issue in the first Git video that might be related.  When trying to PUSH back to origin master I get this:  $ git push origin master Counting objects: 4, done. Delta compression using up to 8 threads. Compressing objects: 100% (4/4), done. Writing objects: 100% (4/4), 458 bytes | 229.00 KiB/s, done. Total 4 (delta 2), reused 0 (delta 0) remote: error: refusing to update checked out branch: refs/heads/master remote: error: By default, updating the current branch in a non-bare repository remote: is denied, because it will make the index and work tree inconsistent remote: with what you pushed, and will require 'git reset --hard' to match remote: the work tree to HEAD. remote: remote: You can set the 'receive.denyCurrentBranch' configuration variable remote: to 'ignore' or 'warn' in the remote repository to allow pushing into remote: its current branch; however, this is not recommended unless you remote: arranged to update its work tree to match what you pushed in some remote: other way. remote: remote: To squelch this message and still keep the default behaviour, set remote: 'receive.denyCurrentBranch' configuration variable to 'refuse'. To C:/Users/tarmstrong/git/Clone-Repo/../PyGame-Remote-Repo  ! [remote rejected] master -> master (branch is currently checked out) error: failed to push some refs to 'C:/Users/tarmstrong/Google Drive/Personal/PythonScripts/git/Clone-Repo/../PyGame-Remote-Repo'",True
@TheZakarumite,2017-10-01T15:46:01Z,0,"Hi, very good tutorials. Helped very muck. I have one question : how can we delete a file from a commit? (for example if we add a file, which does not belong to this commit)",True
@ZamatoElite,2017-08-28T16:54:55Z,0,Fantastic series. Very helpful,True
@DimaDesu,2017-08-26T01:10:07Z,0,Great explanation. Appreciate it!,True
@silversurferablaze1,2017-08-22T08:53:50Z,0,Best Git tutorial!,True
@balam856,2017-08-14T01:10:06Z,2,Presenter has good knowledge on the topic & great presentation skills.... That's what makes this video great !!! Thanks for sharing your knowledge....,True
@mogreen1249,2017-08-13T10:12:50Z,0,"Excellent critical video really good ,just subscribed ,Thanks Corey Schafer.",True
@amineurin944,2017-08-02T16:29:47Z,6,Just amazing Corey. Thanks! reflog FTW!,True
@CarlosMartinez-zb6fj,2017-07-26T00:37:17Z,0,This is brilliant. Thank you,True
@BrechtGijbels,2017-07-18T15:21:32Z,2,Very clear! Thank you 👍,True
@dhanashree318,2017-07-18T13:25:39Z,5,Thanks a ton for your efforts in making this. All your videos are amazingly well explained in simplistic way.,True
@rajeshantony74,2017-06-30T04:42:39Z,7,one of the Excellent video on git..thank you so much,True
@srikanthshetty6150,2017-06-11T23:28:29Z,13,excellent video,True
@DjLeonSKennedy,2017-05-11T18:52:21Z,4,"its awesome, thank you",True
@chengqingxu9126,2017-05-09T23:45:41Z,0,"Hi  many thanks fro your tutorials. They helps a lot!! I have a small questions about revert. after you revert, you only revert the the commits in your remote repository or  you revert the commits change in local user repository as well after these commits being pulled",True
@greob,2017-05-03T22:38:17Z,0,"Fantastic video, thank you very much!",True
@padmavatijadhav4173,2017-04-25T18:06:15Z,3,thanks a lot . it was really helpful video which Cleared most of our doubts. and probably will save hassle in future.,True
@rhassino,2017-04-23T17:37:11Z,0,Thanks a lot. Very useful video on Git.,True
@chrisk8703,2017-04-20T01:22:42Z,0,"I've never learned something about version control before but the way how you teach programming stuff is just amazing. While watching the first two videos about git I was myself asking questions like ""ok but what if I accidently write a wrong comment"" but you go through all those traps and show the appropriate solutions. Thanks for sharing your knowledge!",True
@diasneto5231,2017-03-18T20:38:35Z,0,Great explanation,True
@MrSumitahuja,2017-03-14T02:20:52Z,0,"Super ,amazing and  too good",True
@shubhamaggarwal4800,2017-03-12T17:15:57Z,16,this guy deserve a medal for this :),True
@x0rZ15t,2017-03-01T13:13:37Z,0,Perfect!,True
@timfitzgerald1923,2017-02-22T16:16:10Z,37,Brilliant structure and sequencing and crystal clear examples. A lot of key functionality covered effectively and concisely.,True
@kishorekumaru9,2017-02-20T03:58:36Z,0,Nailed it. A big LIKE,True
@EnduranceT,2017-02-07T17:40:32Z,0,Holy shit why is this so complicated? Lol I think I had an easier time learning x86 assembly.,True
@scoutdrago4,2016-12-18T01:43:54Z,0,"My biggest issue is when I make changes to a file, and they don't pull them and then they make some other changes in the same file (or the other way around, where I don't pull the changes), so then they can not push their changes. How would we go about fixing that?",True
@slaklad4321,2016-10-11T15:05:19Z,28,Perfect Lesson,True
@ThePauloRobertoCruz,2016-09-28T23:03:14Z,3,super cool stuf,True
@harshwardhanrathore8973,2016-09-27T06:32:36Z,10,"One of the most helpful video on git that I came across, great job :)",True
@davidcarter8272,2016-08-18T18:49:50Z,3,Great video,True
@alexshpak3344,2016-03-09T20:01:01Z,8,excellent,True
@avishal4,2016-01-26T07:40:41Z,150,One of the best git (or any other) tech videos i've seen in a long long time! Great job!!,True
@nagendraprasad768,2015-11-21T18:52:08Z,0,Nice video. How do we remove a file from the staging area ?I don't see any video of yours on git rebase,True
