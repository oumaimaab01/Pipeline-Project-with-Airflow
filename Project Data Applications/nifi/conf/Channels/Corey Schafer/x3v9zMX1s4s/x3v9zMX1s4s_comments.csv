author,updated_at,like_count,text,public
@shahriarzaman4715,2024-05-05T16:11:52Z,0,Life's easy with static type system. Use traits/interfaces,True
@hnd4r7,2024-04-04T05:14:22Z,0,"Thank you for sharing this duck type philosophy. Ask forgiveness, Not permission. 1. avoid multiple acess 2. avoid double check race condition.",True
@briskwalk1100,2023-03-26T17:16:48Z,0,"really useful thing, I didn't know that, thank you!",True
@oliaquino4049,2023-01-10T13:50:22Z,1,"I finally understood this topic after watching it the 2nd time. and I realized.. this is how I code!  as a beginner , I always ask for permission lol. I always thought that it was kinda wrong because its a cluttered way of coding but I also thought that as long as I'm getting the results I want , It's ok. I should probably simplify my code more haha.",True
@thunder____,2022-12-31T12:01:08Z,0,"I'm glad I was already aware of how new f-strings are before discovering your channel, bc if I didn't know f-strings didn't exist yet at the time you made this video, I'd be very confused at around 7:36 lol",True
@finix7419,2022-09-30T19:42:50Z,0,"thank you Corey ,learning python is actually enjoyable with a teacher like you",True
@Petemackenshaw,2022-09-16T06:34:05Z,1,"In the quack() fly() bark() example, the code worked as expected since it was the last method ('bark') that was missing in each case. But we can't be sure of that. What if 'bark' was the first method call in the sequence or quack was the missing method from the class. In that case none of the methods would get invoked but ideally we would still want the two existing methods on the class to be invoked.  Is there a better way of tackling this issue other than adding the try/except to each method call individually?   Thanks in advance!",True
@rambo5004,2022-06-03T19:42:36Z,0,"Can you please make a video on the typing module? Specifically, im pretty lost when it comes to generics",True
@amortalbeing,2022-04-06T05:38:51Z,0,"@14:40, didnt know we can treat except as an if, and if that ends up false, we can use an else after it!!!",True
@veyselaksin,2022-04-01T07:37:26Z,0,Thank you so much for this tutorial. I have question that Can I use BaseException for all exception type? Does it make sense?,True
@bartuslongus,2022-02-28T09:01:26Z,0,Perfect. Thank you.,True
@MarekSuchomel,2022-02-19T18:10:48Z,0,"I have a problem with EAFP. Just looking at the code I cannot see if it will work correct or not, if the catched exception really covers potential error resulting from the previous code.",True
@thomasslone1964,2022-02-17T20:49:38Z,0,"i just remembered, this is why ive given up writing python code like 6 times before i could really learn it, bro its rediculous how many ways i can say the same expressions in ruby",True
@slonbeskonechen8310,2022-02-11T11:01:12Z,0,"grab a duck, make an f..ck!",True
@ericmacharia804,2022-02-09T19:04:31Z,0,"This is a great video explaining how to use try/except. But one thing to keep in mind, try/except are most useful in catching errors, ie when you need to display errors to users based on an operation. If you go adding these blocks everywhere then a memory intensive op might be executed overloading your system, only for the whole function to be cancelled since some later block of code did not pass",True
@jonathan3488,2022-01-25T10:19:38Z,0,"Great presentation about EAFP. I personally rather use type hinting with the typing module, to make it less error prone",True
@muntadher8087,2022-01-05T06:18:50Z,0,"Thank you so much! this really helped me, thank you so much",True
@marcello4258,2021-11-06T15:22:50Z,0,good point at the end for this atomic transaction. yes this is always tricky if you are not using mutex,True
@rickliles2460,2021-10-10T21:39:42Z,0,Just getting started wyth python -- Wondering -- could ya parse the thing.__dict__ for the available attributes and create a set based on a filter...   then match the set to a dictionary of thingies to determine how to use the object?     Kinda like a regex for objects    regex for text is one dimensional ...   object oriented regex can have N dimensions,True
@anindian4601,2021-07-01T03:21:01Z,0,"I DONT KNOW WHICH BASTARD GIVEN DUCK TYPING NAME, BCOS i dont think it has any relation with fucking DUCK 🤣🤣",True
@AmeerulIslam,2021-06-20T05:56:06Z,0,Brilliant explanation! Best Python teacher!,True
@alecdelu83,2021-06-08T00:19:10Z,0,"When Corey says ""Now you may be wondering..."" I'm like hold your horses, I may be understanding just yet.",True
@hasibahmad3660,2021-04-29T23:12:32Z,1,"I have watched a lot of tutorials on youtube, coursera, udemy on python but when it comes to your tutorial, I just can't skip a minute or speed up the video to finish it quickly. Your video says every minute is important, so, don't skip, just learn... Such an eloquent teacher you are who has precision as well as profound knowledge",True
@finalsecretofchrono1339,2021-03-09T06:03:05Z,0,"So with this specific race condition example, the opening of the file natively prevents the deletion of the file by another function/user?",True
@ZzZ-km2bh,2021-02-09T18:51:13Z,0,"Can please anybody tell me, what is the keyboard combination to comment/uncomment a block of code?  It really kills me. thanks!!",True
@vsabinat,2021-02-02T05:55:31Z,0,Excellent explanation,True
@goodboy9413,2020-12-26T18:53:56Z,0,Hey duck! Please fly while quacking!,True
@za012345678998765432,2020-12-13T15:37:42Z,0,"Using try except is faster than if when no exceptions is raised, and slower when an exception is raised. So a good rule of thumb is to use try when you expect it to work most of the time, and if when you expect it to not work most of the time",True
@JJ_eats_wings,2020-11-22T05:21:44Z,0,pure awesome!,True
@heshankumarasinghe3159,2020-11-14T17:47:55Z,0,Thank you.... Learnt new stuff.... Gonna watch this vid again....,True
@tshaylatte9502,2020-10-24T19:41:57Z,0,thank you once again,True
@rafaelbraschi,2020-08-27T17:47:45Z,0,Very good... But why using the 'else' on this last try/except? Its not be a better aproach to leave all the code on the 'try'?,True
@ligrt2426,2020-08-14T23:36:12Z,0,"hello Corey , i really learned a lot from ur videos , thnx so much. but my question on this video is that the 1st eg of class person and class duck , is it related or same as polymorphism  in python? Thank you",True
@athisii_ekhe6167,2020-08-08T16:44:38Z,1,"Corey, you are the best at explaining things.",True
@xaco56,2020-08-04T15:49:43Z,0,"Another way to think of it is that the library will be doing those checks anyway.  If you put in checks of your own, you are duplicating the library code, and the checks will be done twice.",True
@satoshinakamoto171,2020-07-24T04:39:15Z,0,this is really helpful. thanks .,True
@hanjiali1,2020-07-20T21:53:33Z,2,"Well, the file needs to be closed at the end of the video to prevent error, although it went exception.",True
@saunaknandi1814,2020-07-03T15:31:51Z,0,who is that mother fucking asshole that disliked this video,True
@ExplorerDheeraj9271,2020-06-28T04:29:36Z,1,Thank you so much.....loving your teaching...😍😍,True
@cjromb,2020-06-16T20:08:46Z,1,"Race Condition example: I admit, I didn't look at ALL the comments to see if this was discussed, and I'm definitely NOT arguing about if statements vs. try...I'm coming from a background where race conditions are a BIG deal that ran the entire design of the system...and I'm also just switching over to Python from another language. Anyway...In the race condition example...you mention that the small amount of time between the IF and and the OPEN/READ in the Non-Pythonic way could mean that the file that LOOKED like it was available is suddenly NOT available.   So I'm thinking about this...I can immediately think of several scenarios where if you just immediately read the file, like in your Pythonic example....but then that same file disappeared in that same micro amount of time....it might be a problem that you've already read (and may be processing) a file that just disappeared or got locked/inaccessible for one reason or another.  What happens when it goes to read, and the file has been locked?  I'm going to see if I can reproduce that as a test. In general, I'm curious about what to do to avoid that kind of situation, but still code in a pythonic manner.  My whole life is about EAFP....so definitely can appreciate code like that. LOL Also, I have sooo many of your videos in my queue!  They're fantastic!",True
@aniruddwakikar3004,2020-05-23T06:50:52Z,0,U should improve ur teaching skills like navin reddy,True
@aniruddwakikar3004,2020-05-23T06:50:24Z,0,You are explaining like ur reading the script,True
@sergeyb.3502,2020-05-22T13:01:20Z,82,From now on I'm going to go pythonic with my wife.  EAFP.,True
@glenbenton2175,2020-05-18T12:39:53Z,0,"Isn't the statement ""with f:"" on 14:22 unnecessary here?(no-race condition)",True
@alixaprodev,2020-05-07T05:53:42Z,0,you are the best teaching methodology I have ever seen,True
@akiratoriyama1320,2020-04-23T14:10:43Z,1,Thank you!!,True
@mcan543,2020-04-21T00:17:36Z,1,"#KeyTakeAways 7:00 and 10:42 Asking forgiveness, not permission > more proactive and pythonic way",True
@meosh930,2020-04-06T07:18:09Z,10,"6:42 The reason we got all the attributes checked is because the ""bark"" attribute is located at the last line in try. What's a good way to ensure everything in try block runs and gets checked, in real life where we don't know which one's missing? For example, if we had the below order inside try block, thing.quack() thing.bark() thing.fly() .. Correct me if I'm wrong, but I feel it stops after not finding bark(and therefore moves into exception block) without checking fly?",True
@user-xc5xf8gp8n,2020-03-07T18:59:16Z,65,"Summary: Duck Typing and EAFP are the fundamentals for a code to be 'Pythonic'   Duck Typing is when programmers do not care about exactly what an object is, but only care about whether an object can do the operations that we need it to be. In Corey's example where he created classes 'human' and 'duck' and instance for each,  both had the method 'quack' and 'fly'. Therefore, a programmer who does duck typing makes functions that can make use of objects that are of any classes, as long as they support the operations used in the function. (I believe this is partly caused by python's feature that we don't have to set the data type for the input and output of function. For example, Golang, or simply 'GO' is an programming language created by Google, and it requires the programmer to specifically set the input and output data type for function.)   This leads to occasional errors, that occur when some objects do not support the operations.   To avoid an error, programmers have 2 choices. 1. Avoid it in the first place 2. handle the error   The first choice necessitates using an if block. Corey displays an example where he checks whether certain objects have certain attributes, to prevent errors such as 'class ~~~ does not support attribute ~~~'.  He also shows an example where a file might could not be open even after chekcingthat is is accessible using an 'isaccessible' method, which could lead to an error. This is called 'Look before you leap', abbreviated as 'LBYL', and 'Asking Permission' from 'Easier to Ask Forgiveness than to ask Permission'.   The second choice leads the coder to use 'try' and 'except' block, which handles the error after it has been found.   There are reasons that the second method is favored over the first. 1. It is faster. The first method, 'LBYL' is checking whether an object supports an operation. That means the computer has to access and interpret what kind of class or type the object is. Executing the operations after that 'check', will make the computer having to interpret what the object is 'twice'. 'Asking forgiveness' method only has to access the object once, using the if block. This makes the runtime for 'asking forgiveness' faster, becuase it has less workload for the computer to do.   2. It is more readable compared to the first. In the video, Corey shows an example where he had to check whether a dictionary had a number of keys in it.  That was indeed lengthy, which made it harder to read. In another example he showed, he had to be sure that a list had more than 6 arguments in order to print an item at index 5. He used an len() method and >= conditional, which was obviously  lengthy . Using Try and Except blocks was a relatively concise and clear about what the code was all about.   3. It gives more control over 'unexpected' error. In the last example that Corey showed, 'LBYL' method did take account of instance where the file might not be accessible. However, Corey points out that a file could be closed right away and raise an error. 'LBYL' method has no way of handling this situation, since it is only designed to 'prevent' an error and does not has the ability to confront it. Try and Except blocks on the other hand, has the ability to resolve errors of any kind.   Thank you Corey, you are changing the world for what you have done. I believe that your such actions of uploading free education videos are creating a difference in the world. Anyone in the world, whether they have money or not, can educate themselves as long as they have internet. That is the first step towards reaching general rights to education. Thank you!!! I will support you soon when I get a job!",True
@JuniorBloxHD,2020-02-23T04:12:05Z,2,"At 4:52, you have code that checks two conditions with a nested if statement. Couldn't you use and instead?",True
@7674Manish,2020-01-05T17:40:05Z,1,I have watched most of your videos and can say you are awesome. Thanks for the contribution.,True
@bulldawg4498,2019-12-23T02:43:25Z,0,"In the Java OOP world, polymorphism and interfaces take the place of ""duck typing"" ...",True
@simonolofsson7488,2019-12-17T14:21:21Z,1,"Thank you for this video, Corey. I've been coding Python for almost two years and just realized I've been duck typing without knowing it. I still recognize the anti-patterns from my development in C. Putting names on these patterns made it super clear.",True
@AssadNiang,2019-11-11T01:20:51Z,0,Your fonts are too small Some of us use smartphones to watch this,True
@rakeshkumar-jk4lt,2019-10-01T16:03:19Z,0,"Duck flew over my head, highly technical.",True
@mokopa,2019-08-08T07:19:22Z,1,"coming from a C/java background, I must admit that the EAFP approach seems like a lazy, not-my-problem way of coding. Write robust code, not 'readable' code. If your code is well-written and doesn't need constant fixing, it doesn't need to be 'readable' because no-one is going to need to read it. Constant checks avoid accumulated errors",True
@rajeshraut2955,2019-08-05T09:21:49Z,0,Please increase your font size,True
@_Karlsson,2019-07-19T09:41:55Z,8,"This (EAFP) is the second biggest reason Python is so slow, right after memory handling. Not having a compiler/IDE that tells you the obvious error before you run the app (An IDE can't because Python source gives no hint as to what kind a data structure a parameter is accepting), and all that extra unnecessary branching looking for several kinds of returns behind the scenes to identify exceptions from return values instead of just having the bytecode call the function with the correct parameters to begin with and give a compile time error if it doesn't exist. (Compile time error means much less necessary processing power in production/non-debug environment, and of course less angry customers)   It also breaks apps when trying to scale them (adding features) as all these exceptions will pop up everywhere, and it will happen during runtime in production instead of during development because there's no hint of error before that.   If this disregard for type safety would make Python faster it would be one thing, but the thing is that it makes Python so much slower than languages that have type hinting (and a compiler that understands the types, ie not Typescript) or static typing.    These videos are amazing to learn Python even though they are more than 3 years old now, but Python itself has not improved one bit during that time except for a few convenience methods. PyPy fixes this somewhat, especially if also making some modules with Cython, but it doesn't support modern Windows computers (with modern I mean the the 64 bit standard since 2004) and it's a lot of extra work that should just be done automagically in the standard compiler like in other interpreted languages with virtual machines and the like.   I really hope a new language will emerge forked from Python, with the nice base syntax, but performant and type safe.   Thank you for making this series, it really helps someone like me coming from languages like C, C++, Java, JS, Rust and Kotlin.",True
@panagiotisdeligiannis9610,2019-07-17T15:48:16Z,0,"Great video, thank you. Unfortunately I was 3 years late and now I 'll just schedule to change my code. :D  One question: There are times that instead of just calling two methods, we have to make a big job and the method calls are seperated by some processing time (method0() ----- TIME CONSUMING JOB --- method1() ). Is that a case that we could check if the methods exist prior, so that we can avoid losing time if the methods do not exist?",True
@entropyz5242,2019-06-29T21:46:27Z,13,"I like the pythonic way. It’s more badass with no permission needed. If it messes up, it will handle it like a G.",True
@Lahiru_Udana,2019-06-09T12:59:19Z,1,Thanks for this great video,True
@xschen4045,2019-05-16T08:14:31Z,10,I guess I'm gonna be Pythonic from now on.,True
@sukurcf,2019-05-09T12:58:15Z,1,Dude. How did you comment two lines at once? at 7:37,True
@michaelholding5469,2019-04-14T16:30:12Z,0,I suppose the obvious pitfall with this approach is that you might unexpectedly find that due to a minor error you have just overwritten a file that contains valuable data?,True
@hasifkhan8197,2019-02-18T20:16:48Z,1,"I'm unable to understand anything in this particular video, In the whole series till now. Maybe it's my first attempt of learning the OOps Concepts.",True
@FamilyGuySweden,2018-11-12T19:34:27Z,3,"I am a newbie to python and it helped me alot, thanks Corey",True
@akashpatel5505,2018-10-17T12:53:44Z,18,I have to agree with other commentators.  You are awesome at explaining python concepts!,True
@salrite,2018-09-26T14:14:43Z,0,"Can anyone please explain how are quack and fly attributes, they are methods (functions) right ?",True
@markb6193,2018-08-06T20:18:27Z,5,"Just like to add also. Your videos are fantastic; love the way you explain the concepts underneath. As most of it is hidden these days, you rarely see people explaining what's going on in the background.",True
@markb6193,2018-08-06T20:15:57Z,1,"Only thing that annoys me about try/catch, is that people use it far too lazily, when they should be using an if.",True
@8w494,2018-07-27T12:54:11Z,9,To me this seems very dangerous. I prefer static typing for this reason.,True
@ptf42069,2018-06-08T06:56:00Z,0,"Is ""assert"" considered one of LBYL?",True
@isaacobiri1407,2018-06-02T06:41:24Z,2,The video tutorials is the best and I really appreciate the fact that your are a good teacher and you make complex things easy to understand. Thanks very much!!!!,True
@abdallahelkasass6332,2018-05-16T13:15:28Z,0,<3,True
@IsaacC20,2018-05-11T23:53:03Z,0,"The mnemonic, EAFP, is non intuitive imo. Long story short:   Prefer try/catch/else blocks to checks (type checks, value checks) to handle invalid inputs to functions.",True
@TheSpacecraftX,2018-03-04T19:43:28Z,4,"Yeah I'm not convinced. I'd much rather get an early warning that it's the wrong type than figuring out why a type conversion error happened at runtime several functions deep, using a library I'm not very familiar with. it makes more sense to me to have it checked for you rather than explicitly writing all the checking yourself when a compiler can do it for you. Try catch statements are a thing in static languages so why go to the extra trouble it causes to forego type checking entirely. Is it pythonic to use try catch in Java or C++ or C#?",True
@hongphuongo1862,2018-02-08T05:43:10Z,0,"if only Youtube has a ""Haha"" reaction for your videos and codes. Very funny and attractive way to teach programming skills.",True
@Xhisorz1,2018-02-05T17:47:09Z,0,How to learn duck typing and more in 15 minutes,True
@sudipta_samanta,2018-01-03T06:35:10Z,0,"Can you please explain this line: print(""I'm {name}. I'm {age} years old and I am a {job}"".format(**person)) how unpacking of dictionary values works ?",True
@codecobber1107,2017-12-22T09:50:16Z,0,"Superb as usual, Thanks again Corey",True
@patrickmullan8356,2017-12-11T15:46:06Z,17,"The only problem I see here, is that I have to know all Error-Types, now.  Meaning, which error (or its corresponding literal) do I have to catch in the exception part.  Is there a easy way to solve this? Or a concise look-up table, somewhere",True
@DsiakMondala,2017-12-09T13:34:38Z,0,"Ouch, I'm having a very hard time with this duck... My code is not optimized to this style at all, I feel like I must learn a new way to define classes and functions before this trumps over classic coding.  The worst is not knowing what the functions wants and not knowing what it will return to me. Going back to read the class is proving to be very time consuming.",True
@SeaDadLife,2017-10-28T22:08:38Z,0,"Great video! Thanks for sharing your wisdom. I get the advantages of EAFP. However, an object may have quack() and fly() methods yet not fulfill the contract of a Duck object. In large applications would sufficient code in the try-catch block really be more efficient than just using isinstance?",True
@ahmedesmaeil6194,2017-09-29T01:21:35Z,0,"what is the relation between duck typing and ABC ""Abstract Base Classes""  ?",True
@turboromy,2017-09-16T02:07:53Z,0,"Got a dumb question.  At about 2:00, is there a term to call ""quack_and_fly(p)' as opposed to what I expected 'p.quack_and_fly()' ? I'm wondering if it's a new concept or something I missed.",True
@randomguy75,2017-09-05T07:56:17Z,0,bloody fucking perfect is every fucking video on this channel. thanks mate.,True
@TinkCSA,2017-09-05T02:46:50Z,0,great video! could you zoom in a bit next time? Having only 30 lines in view will be great.,True
@noelrivero8070,2017-08-23T02:39:09Z,0,Thank you so much for the explanation!!!,True
@meunomejaestavaemuso,2017-08-04T04:53:35Z,10,"Nice video But I would like to point a small mistake.  When you say that you are throwing some error, what you actually mean is catching it. Since you are using the `except SomeError`. Throwing the error would use the `raise SomeError`.  When you except the error you are asking forgiveness, but when you throw the error you are not.  a = 'a' b = 1  try:     print(a + b) except TypeError:     print('Forgive-me for trying to add an string to an int')  if isinstance(a, str) and isinstance(b, int):     raise TypeError('ERROR! You can\'t add string to ints!') else:     print(a + b)      ########################################## Forgive-me for trying to add a string to a int Traceback (most recent call last):   File ""<stdin>"", line 10, in <module>     raise TypeError('ERROR! You can\'t add string to ints!') TypeError: ERROR! You can't add string to ints!",True
@adamwisniewski9386,2017-07-29T13:30:47Z,3,"But what if I need to call these three methods, and calling only one or two of them will mess things up? In that case I would have to check if they all exist before running them, would that still be unpythonic or is there pythonic way to deal with such circumstance?",True
@TonyFlexPromo,2017-07-24T13:29:09Z,3,Your videos are flawless and priceless. I have learned so much new stuff on your channel.,True
@mohittheanand,2017-06-17T19:30:33Z,0,great video. just one question. is my_dict.get('some_attribute') following EAFP,True
@SirThane13,2017-06-03T19:49:22Z,2,"I've also found in what little I've done that EAFP pushes you towards code with fewer bugs. The exceptions are verbose and easier to diagnose. With it, I'm forced to see everything that doesn't match up. If I check for every little thing (as admittedly I used to), it turns into a scavenger hunt for why something I needed to run didn't. You can fix this by adding logging to every checked function, but that destroys your project with clutter. I've naturally gravitated towards EAFP, but you've put it into words.  As always, thank you a thousand times for your excellent instruction.",True
@Ninja-iq2xt,2017-05-08T15:20:49Z,3,"Thanks for explaining such concepts Corey, You should better know that their isn't anyone who is teaching as good as you. Your channel could just take off once it gets visibility on youtube. Loved your channel!",True
@royalpranay,2017-05-07T17:57:30Z,1,"Thanks for the tutorials. I also have a small question regarding EAFP, What if I don't want my program to stop execution? Shouldn't it be better to ""Ask Permission"" and if not allowed, the program should continue further execution.",True
@johnny_silverhand,2017-04-25T07:21:15Z,0,Nice and clear explanation,True
@malharjajoo7393,2017-04-08T17:45:53Z,0,"The explanation was good but felt the motivation wasnt clear , like why we would like to take this approach",True
@cahangirove,2017-03-31T06:33:52Z,0,Great video! But I have a question. What about performance? Is try.. except.. method is faster than if.. else.. statements or vice versa?,True
@ivandrofly,2017-03-28T04:59:18Z,0,thank you,True
@MatiasEzelQ,2016-11-30T22:51:38Z,0,Could you do a video explaining how to use python base api? PD: Great videos!,True
@kopuz.co.uk.,2016-11-03T03:17:30Z,0,"Very good info here, thanks.",True
@shrikantdangi6064,2016-10-20T20:18:57Z,0,nicely explained,True
@rajeshkumarreddy,2016-07-14T19:28:26Z,2,I have learned a lot in Python from your videos than my online courses. A ton of thanks to you.,True
@sosurim,2016-07-13T22:48:22Z,155,"You have a God given, natural talent for teaching, especially for Python. I can't get enough of your videos. Please, please make as many as you can. I've subscribed and will probably  'like' them all. Thank you!   BTW: Can you make another video that details your particular environment  for optimal debugging Python code with Sublime? What is your solution for doing break points, variable checking, etc.? Thank you again so much.",True
@samchan2535,2016-06-02T01:01:10Z,2,"Thanks,Schafer. It 's been a great help for me.",True
@HugoDoucet,2016-02-18T14:28:20Z,1,Thank you for sharing this philosophy. This has been a great help for me.,True
@djanthony6662,2016-02-18T02:59:44Z,3,"Coming from PHP, this vid is one of the sweetest 15 mins in my life. Thank you.",True
@catatonico123,2016-02-12T02:11:55Z,1,"Another great explanation, thanks",True
@SeekHeart,2016-02-10T01:10:45Z,8,another example of pointing out something not pythonic is not using a list comprehension when it's appropriate.,True
