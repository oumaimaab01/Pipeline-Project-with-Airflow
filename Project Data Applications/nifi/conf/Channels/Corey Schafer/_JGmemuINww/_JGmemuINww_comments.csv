author,updated_at,like_count,text,public
@coreyms,2019-04-24T15:38:00Z,34,"I wanted to clarify this a bit since I got a lot of questions about this in my last video. In the last video, I was trying to keep the length of the video a bit shorter so I sacrificed a bit on the detail, but in hindsight, I probably should have taken the time to explain it a bit better. I hope this is a clear explanation for anyone who was still confused on this topic after the last video! Hope everyone is having a great week!",True
@gabriel-quintiliano,2023-05-12T01:47:16Z,2,"Thanks for this super helpful video! I've already bumped into the observation that we should never use mutable arguments as values to keyword arguments in python and instead set it to None and check before actually setting it, but I thought ""mutable"" was referring to arguments (in general) that the function or class would changes or alter itself, little did I now that ""mutable"" = python's mutable types (list, dict and set). Now that I gave it a second thought I couldn't make sense of how it really worked and it was driving me crazy, your video helped me a lot!  This kind of behavior remembers me a bit of C programming language with functions dealing with arrays, as all kinds of variables (but pointers) were passed by value and thus the function received but a copy of that variable and therefore any modifications it performed weren't reflect on the real variable outside of the function, meanwhile, arrays are passed by reference (reference of the memory address where the real array var is), so it's like the function is receiving the real array variable and the modifications performed with reflect on this same array outside of the function.  The relation I could make is that in Python, the mutable type variables used as keyword arguments are passed by reference, and the function manipulates the variable itself, thus for the next function call, the function is in fact will be taking that same default variable, but as it is right now with all the changes. Meanwhile, while with non-mutable types it's like the variable is being passed by value, just a copy of the real variable to act as a function's local variable which will exist only for the while the function is on stack, so on the next function call, the function will be getting the same default value unchanged.",True
@BryanJL,2023-02-14T19:10:38Z,0,thanks!,True
@awesomedavid2012,2023-01-26T00:54:34Z,0,"Note you can also say ""emp_list = emp_list or []"" so long as your parameter will never be another falsey value",True
@Trippykiyay,2023-01-23T06:51:00Z,0,Man you are a legend.,True
@Loicbo,2023-01-12T00:58:06Z,0,Why did chatgpt bring me here? lol,True
@init1508,2022-10-22T18:37:14Z,0,the datetime example at the end is really good!,True
@kosmonautofficial296,2022-08-24T16:37:55Z,0,Great video thanks!,True
@adsfwef1331,2022-08-16T09:18:45Z,0,This is the best explanation I ve seen so far. Thank you soooo much!!,True
@Saheryk,2022-04-21T20:47:12Z,1,"""override"", the emp_list = None variable is overriden by empty list []",True
@ramupoonjolai9974,2021-11-11T22:33:56Z,0,Nice video,True
@swarupsarangi734,2021-11-08T16:39:02Z,0,best teacher ever <3,True
@alirza6949,2021-10-26T17:48:10Z,0,Finally I get it. Thank you..,True
@niwanthakaweragoda9480,2021-05-04T16:38:20Z,0,Thank you so much! This really helped!,True
@alex08585,2021-02-13T03:44:23Z,1,"OMG i finally get this now, i spent about a week trying to figure out, why this piece of code was written in this manner, the ""None"" part tripped me off a bit, now its so much clearer. Great work!",True
@Michelle-ek5do,2021-02-05T00:42:21Z,1,This level of explanation is really appreciated. Thanks for this!!!!,True
@haroldpepete,2020-10-30T17:52:36Z,0,"That was really weird, it is like something that you understand only in the python world",True
@dellsantiago8108,2020-10-12T20:50:19Z,1,Awesome  best teacher,True
@berin4427,2020-07-01T05:03:09Z,0,"thanks, but I think to better explain this difference between [ ] and None, we need to go to how python treats immutable and mutable objects differently.",True
@Oda3908,2020-06-26T05:39:21Z,0,At first glance this feature really seems to be strange and confusing. Now those type hints/document string make much more sense for those keyword values with a None default value.,True
@dawei9450,2020-06-25T08:35:52Z,1,"Dear Corey, thanks for this clear explanation. If I get it correctly, anything immutable should do and not just None. Then may I use an empty string ' ' instead of None? Is there any rationale to choose the None over other immutable variables?",True
@phamvantho4981,2020-05-10T05:44:12Z,0,"Hi Corey, thank you for all the great work. May I ask if this has anything to do with CLOSURES?",True
@johnsabini3218,2019-12-08T20:50:16Z,1,Brilliant - datetime example,True
@zeldamage001,2019-11-26T13:28:41Z,1,"Maybe you should use the concept of pointers in this explanation. I don't know if that's beyond the scope of these tutorials, but pointers explain what's actually going on here.",True
@ihalil95,2019-09-21T08:43:49Z,1,"Hey Corey! It looks like emp_list=[ ] is still on the memory. Why is not vanishing away after executing function? If we are overwriting it and it is still on the memory, why we can't reach out of function scope? Thanks in advance!",True
@YMcarpediem,2019-07-29T14:17:11Z,1,"As my understanding the pointer of default value is initialized once and won't be changed, then it depends on the pointed value is mutable or not ( a list is mutable while a datetime value is immutable) .",True
@angeljiminian5305,2019-06-24T04:27:04Z,1,Awesome further clarification.,True
@zzzanon,2019-05-26T20:48:41Z,10,"The time demonstration near the end really helped me understand. The default values are defined only once (during the function definition), but evaluated multiple times (during each function call). However, if the default value is a mutable data-type (e.g. a list), it can be mutated/changed 'in-place' (i.e. without re-defining it). Thank you!",True
@wenbinchen8192,2019-05-23T09:08:53Z,1,Thank you!,True
@user-gx9hk8gt3k,2019-04-30T18:00:12Z,0,"Thank you for the tutorial, Corey !  Can you make a video on hosting flask web app on pythonanywhere.com, please?",True
@alanhwu4394,2019-04-30T12:38:14Z,1,Thanks!  Awesome explanations and example. Love the video,True
@brainplot,2019-04-29T20:38:19Z,0,Honestly I think you explained it well and it was already clear from the original video; but I get why some people may have been confused.,True
@ulrichwake1656,2019-04-29T03:26:04Z,1,thank you corey,True
@jayakrishnandamodaran218,2019-04-26T21:38:25Z,1,Excellent explanation. Thank you.,True
@playgoods,2019-04-26T07:27:47Z,1,thank you :),True
@KajokaTanzania,2019-04-26T06:48:03Z,0,"thanks  sir Corey ,but sorry sir can you make video to show us  how to add payment on our blog post site you made.. example users they have to  pay for subscription before login to the website , if they have payed let log in directly....or any kind of payment eg credit card!!!",True
@enriquebruzual1702,2019-04-25T20:24:14Z,1,"Where was this video three weeks ago, I wrote a series of modules that on the surface ran ok (one time run test) but when I combined it with a scheduling library. Many of the functions started behaving oddly. I can now go back an re-evaluate my code, ðŸ˜–. Well I can now search for instances of this problem.",True
@RagHelen,2019-04-25T16:54:52Z,0,"I did not understand how you want to be the employees list look like, but any result would be incremental. Why you would restart the list every time is beyond my understanding. As to the datetime fct: Remove the freaking datetime object from the arguments. It belongs into the function, then it'll give you the correct time every time.",True
@ItzSenaCrazy,2019-04-25T15:31:43Z,1,I got it!! Thanks,True
@albertomedinarobredo,2019-04-25T11:17:07Z,1,"Hello Corey, I think I understand the whole picture, but this question might expose that I actually don't. Isn't the datetime.datetime object immutable? If my doubt is out of scope here, I can delete the thread so it doesn't confuse others. Thanks :-)",True
@silverzero9524,2019-04-25T09:57:35Z,0,so......    its messed up  just use None as default value and then assign true default value xD looks like bad code but yeah OK,True
@treelight1707,2019-04-25T07:49:03Z,3,"This was quite helpful. I learned this the painful way. Also happens with dicts, default args for classes. I knew that it existed, but didn't really understand why until now. I felt like I was doing something 'unprofessional' by setting the default arg to None. Seeing you do it made me feel comfortable. Thanks for the vid.",True
@RichardAnderson99,2019-04-25T06:21:58Z,1,How illogical. Can anyone explain to me why did the Python designers choose to do it that way?,True
@hamids4550,2019-04-25T05:45:05Z,2,Can you do projects? I think people will learn better through practicing in projects. Thank you for your great vids,True
@buuqmarabo2778,2019-04-25T05:16:51Z,1,thanks for your help.,True
@astrix8812,2019-04-25T04:57:29Z,0,"Hello sir, can you please explain to us about 'Websocket'?",True
@MarsGamer7,2019-04-25T04:42:57Z,0,"Hey Corey, just wanted to know - Will we have the same problem if we use dictionaries or sets?",True
@xnick_uy,2019-04-25T03:10:22Z,0,"Is it possible to set the default value as something from a Generator (those that yield something), so the default gets 'pseudo-evaluated' each time the function is called?",True
@jachfeng6201,2019-04-25T02:33:01Z,0,"The local variable ""emp_list"" in the ""add_employee"" function has a different ID from the ""add_employee.__defaults__"" attribute, which means there are two different objects but always kept the same value after a call. How it is?",True
@greob,2019-04-24T23:44:07Z,1,"Thanks for clarifying, nice follow up.",True
@AstonishedByTheLackOfCake,2019-04-24T21:32:04Z,0,"using other functions as default arguments seems to work just fine though, and that is even when the output of said function changes through the course of the program and you call the function using the other function as def argument several times (i. e it updates the value of the argument to whatever new value is relevant in accordance with the function being called), so the datetime method call value retention to whatever was first evaluated seems to solely apply when using class method calls as default arguments?",True
@Saiteja7749,2019-04-24T19:36:42Z,1,Perfecto! You are the best! Thanks for this video.,True
@matsib1096,2019-04-24T19:31:36Z,1,"When I read about this for first time (Python Tutorial, Section: ""Default Argument Values"") it helped me think around this in terms of the identity of an object, using 'id' function.   With a code like this one:   ------------------------------------------------------------------------------------------------------------   def add_employee(emp, emp_list_0=None, emp_list_1=[]):     print(f'emp_list_0( ID={id(emp_list_0)} ): {emp_list_0}')     print(f'emp_list_1( ID={id(emp_list_1)} ): {emp_list_1}')     if emp_list_0 == None:         emp_list_0 = []      emp_list_0.append(emp)     emp_list_1.append(emp)   def print_defaults_args_of_add_employee():     defaults = add_employee.__defaults__     print(f'emp_list_0( ID={id(defaults[0])} ): {defaults[0]}')     print(f'emp_list_1( ID={id(defaults[1])} ): {defaults[1]}')   print('Default arguments of ""add_employee"" before run:') print_defaults_args_of_add_employee() print()   add_employee('Corey') add_employee('John') add_employee('Jane') add_employee('Gauss')     print() print('Default arguments of ""add_employee"" after run:') print_defaults_args_of_add_employee()   ------------------------------------------------------------------------------------------------------------   It's clear what python is doing. First, note that, even when the value of 'emp_list_1' is changing, its ID is ALWAYS the same. When the 'def' statement it's executed, and the function is created, python evaluates each default value,  assign an 'id' to it,  and bind it to the corresponding variable... Just ONCE.   Then, each time you call the function, if you don't provide a value for that argument, python pass THE SAME ID EACH TIME. That ID could be bond to a mutable type, or to an inmutable type;  python doesn't care about that: ALWAYS PASS THE SAME ID that was created at the time of function creation.   If you change what is """"""""inside"""""""" that ID (if you change the object that is referenced by that ID) or not ( inside or outside your function body) is other story.  In case of inmutable types (like None) you can't change it, even if you want to.",True
@SusanAmberBruce,2019-04-24T18:57:29Z,1,neeta!,True
@justafriend5361,2019-04-24T18:42:38Z,1,You are talking about mutuable default arguments. This makes me wonder and forces me to ask if there are also immutable default arguments.,True
@poke_champ,2019-04-24T18:07:41Z,2,Some of the best videos. Makes me want to read the documentation and learn all the cool tricks,True
@josephralph7640,2019-04-24T18:05:59Z,2,"Amazing Video, you are the best python teacher.",True
@ashfaqrahman2795,2019-04-24T16:50:28Z,6,"Best programming language being taught by the best teacher. The main principle of python is ""First class everything"" which means everything is an object. Even a function is an object.  Function evaluates and stores all its defaults in a tuple and sets its attribute named as __default__.   Random fun fact: A class is an object of type object class in python. Peace.",True
@archstampton5910,2019-04-24T16:49:13Z,17,"Thank Corey , very helpful.  Not directly related,  but if you could do a video ""Shallow vs Deep Copying of Python Objects"", that would be very appreciated.",True
@leophysphile2898,2019-04-24T16:25:09Z,0,"Thank you a lot for the further explanation! I actually get confused with the mutable objects every single time when I use them. My biggest headache is when should we use copy.copy() , as python seems sometimes just assign the reference of a mutable objects to the new variable, but sometimes it really copy the value. The behavior is so unpredictable.",True
@malikrumi1206,2019-04-24T16:24:52Z,10,"Wonder if this should be renamed ""Common Mistakes part 2"",  or ""Common Mistakes, continued"" to make sure people watching 2 months or 2 years from now don't miss the connection between this and the original?",True
@tonyli7014,2019-04-24T16:12:59Z,2,WOW. I never notice this kind of the issue. Somehow I think it is like a class that is initialized with default arguments. Do you have any insights about why Python behave as such?,True
@sandeepsuryaprasad6025,2019-04-24T15:56:04Z,23,Thanks Corey.. this really helped!!  It cleared all my confusion.  The datetime example that you gave is really awesome!,True
