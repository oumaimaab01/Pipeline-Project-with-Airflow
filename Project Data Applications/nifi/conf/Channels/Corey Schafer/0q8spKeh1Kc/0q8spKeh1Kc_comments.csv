author,updated_at,like_count,text,public
@lambball4425,2023-06-24T14:41:47Z,0,And after all these years we now have f strings which is even more intuitive than .format i.e.  greeting = f'' My name is {name} and I am age {age}',True
@abhinavs2484,2022-12-21T17:57:42Z,0,or use f strings,True
@thenoobjpttv238,2022-03-30T22:44:08Z,0,name = john results = outstanding print(f'My name is {name} and your tutorials have been {results}!!!!!!!!!!!!'),True
@geekmuralin,2022-03-06T04:01:42Z,0,thank you,True
@ashish_wanderer,2021-03-21T14:26:29Z,0,Thank you,True
@Aulin001,2020-07-10T12:13:17Z,1,Its five years ago video but still all python beginners like me felts its new... Thank a lot Expecting more from you   a='python' b='corey' c=f'we can learn {a} easily with {b} ' c Output:we can learn python easily with corey,True
@user-xc5xf8gp8n,2020-03-07T09:01:57Z,5,"Summary: String Interpolation is a method used to modify the strings. It means when a string value is added in between the string using a placeholder.   It is opposed to the term 'string concatenation', where strings are added up in a repetitive manner in a row.   It is preferred more often because ... 1. being less prone to error such as missing out the spaces as Corey did in the tutorial 2. being more readable as it is shorter in length. 3. easier to modify later on when we need to change the string value that is being embedded within the string.",True
@thoughts_empty,2019-12-07T23:09:04Z,1,"So I should always use String Interpretation over String Concatenation method, when I need to list inside of a function? Because it's better to read and faster to write. Can I use it always or are there some cases were you still need to use String Concatenation?",True
@cintiamarques7641,2019-11-05T23:51:10Z,3,Thanks for the upload! Very well explained even for newbies,True
@kamalb,2019-07-17T14:25:45Z,34,Python 3.6+ has f-strings f'I am {age} years old and my name is {name}' is enough.,True
@lightninginmyhands4878,2019-04-06T23:14:19Z,2,Great vid,True
@damodarsahu3868,2018-12-22T05:20:55Z,1,"Hi corey, i like your videos. Every second is very informative.                                                                                       I have some doubts. Please clarify me.   t1 =(1,2,'a-') d1 = id(t1) d2 = id((1,2,'a-')) del t1 t2 =(1,2,'a-') d3 = id(t2) d4 = id((1,2,'a-')) d1,d2,d3,d4 (85256016, 82259544, 85256016, 85430208) # may i know why d1 and d2 not change but d3 and d4 change?",True
@damodarsahu3868,2018-12-22T05:18:44Z,0,">>> a=257 >>> b=257 >>> a is b False >>> 257 is  257 True  >>> a=256 >>> b=1 >>> a+b is 257 False >>> 256+1 is  257 True >>> c=257 >>> c is 257 False >>> a+b is c False >>>",True
@damodarsahu3868,2018-12-22T05:17:33Z,0,"Why does some operations result False ?  >>> a='abc';b='xyz' >>> a is 'abc' True >>> b is 'xyz' True >>> 'abc'+'xyz' is 'abcxyz' True >>> a+b is'abcxyz' False >>> c = 'abcxyz' >>> c is a+b False >>> c is 'abcxyz' True >>>",True
@damodarsahu3868,2018-12-22T05:17:03Z,0,"In command prompt:  >>> a,b='a-b','a-b' >>> a is b, id(a), id(b) (False, 13827360, 13826592) >>> del a >>> del b >>> a='a-b';b='a-b' >>> a is b, id(a), id(b) (True, 13826592, 13826592) >>>   In jupyter notebook:  a,b='a-b','a-b' a is b, id(a), id(b) (True, 83335520, 83335520) del a; del b a='a-b';b='a-b' a is b, id(a), id(b) (False, 83335576, 83333840)  Both results are opposite.  I don't know why it happens.   So i checked as below:  >>> 'a-b' 'a-b' >>> id('a-b') 14154912 >>> id('a-b') 14154912 >>> id('a-b') 14154912 >>> a='a-b' >>> id(a) 14154912 >>> a='a-b' >>> id(a) 14154848 >>> a='a-b' >>> id(a) 14154784 >>> a[0],a[1],a[2] ('a', '-', 'b') >>> id(a[0]),id(a[1]),id(a[2]) (5713184, 5667488, 5754400) >>> a='a-b' >>> id(a) 14154880 >>> id(a[0]),id(a[1]),id(a[2]) (5713184, 5667488, 5754400) >>> id(a) 14154880 >>> 'a-b' is 'a-b' True >>> # I checked the id(a) time to time changes when reassigned to 'a-b', but the ids of element s of a and id('a-b') always remain same. May i know why it is happening so?    >>> id('a-b') 14154912 >>> id('a-b') 14154912 >>> id('a-b'),id('a') (14154912, 5713184) >>> id('a-b'),id('a') (14154912, 5713184) >>> id('b'),id('a-b'),id('a') (5754400, 14155072, 5713184) >>> id('b'),id('a-b'),id('a') (5754400, 14155072, 5713184) >>> id('b'),id('a-b'),id('a') (5754400, 14155072, 5713184) >>> id('ab'),id('a-b'),id('a') (14155072, 14154912, 5713184) >>> id('ab'),id('a-b'),id('a') (14155072, 14154272, 5713184) >>> id('ab'),id('a-b'),id('a') (14155072, 14154912, 5713184) >>># Why id('a-b') sometimes repeats after one statement and sometimes remain same?    >>> a='a-b' >>> id(a),id('a-b') (14154272, 14155040) >>> id(a),id('a-b') (14154272, 14155040) >>> id(a),id('a-b') (14154272, 14155040) >>> a='a-b' >>> id(a),id('a-b') (14155040, 14155104) >>> a='a-b' >>> id(a),id('a-b') (14155104, 14154912) >>> a='a-b' >>> id(a),id('a-b') (14154912, 14154880) >>># Why id(a) and id('a-b') are changing?  when i checked in jupyter notebook, the value of id('a-b') always changes May i know what is the reason?",True
@damodarsahu3868,2018-12-22T05:15:47Z,0,"a='ab-c' b='ab-c' a is b # False a[0] is b[0], a[1] is b[1], a[2] is b[2],  a[3] is b[3] #(True, True, True, True)  May i know the reason?",True
@taraksaha9,2018-12-18T19:32:17Z,1,you are simply a great personality.,True
@chilipker,2018-10-26T19:37:25Z,1,"is it possible to put the name and age variables into a function and then call them with .format(function(name, age)) somehow?",True
@tomaspinto3833,2018-10-24T16:08:55Z,1,GREAT!,True
@hyfytale9577,2018-10-14T04:46:02Z,1,Really nice!,True
@irishrunner4657,2018-07-14T22:34:06Z,2,Thanks man! a great help! :),True
@neeraj9973,2018-04-07T13:12:19Z,1,thank you Corey.,True
@onlyonly7612,2018-03-21T17:26:31Z,7,This is also known string formatting.,True
@geoptus,2018-01-04T13:41:41Z,4,"That last example of 'greeting' can become an f-string with very little modification, another clear and convenient string interpolation type ; )  This 'programming terms' series has been very useful, especially, for me, the 'closures' explanation. Many thanks Corey",True
@mirtuchy8762,2017-09-01T18:10:24Z,2,Thanks! Looks like string interpolation is a great technique for internationalizing a product,True
@joedempseysr.3376,2017-07-23T22:33:15Z,48,"Thank you {name} for all your {adjective} tutorials.format( name=Corey, adjective=outstanding )",True
@rCrelic,2016-10-13T00:51:14Z,0,Greate video mate,True
@KumailAhmed,2015-07-11T08:22:49Z,1,Which IDE are you using for python? It's really beautiful?  Is it available for windows?,True
