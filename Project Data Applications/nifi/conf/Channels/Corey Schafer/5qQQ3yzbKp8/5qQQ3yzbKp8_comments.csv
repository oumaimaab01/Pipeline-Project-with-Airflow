author,updated_at,like_count,text,public
@potatobot2802,2023-09-29T05:57:11Z,0,Thank you so much for your generous time and effort!,True
@EminoMeneko,2022-12-17T12:02:03Z,0,There is string buffer in Java too I think but also StringBuilder I always use. Is it that much of an issue? Is there no garbage collection in Python ? Good to see you have a series of technical terms to clarify.,True
@bhaskarkush.2932,2022-12-11T14:46:40Z,0,Great explanation buddy .... Keep up the great work,True
@william.darrigo,2022-11-22T23:20:18Z,0,You explained this so clearly. Thanks ðŸ˜Š,True
@deanbitter2718,2022-10-26T15:08:02Z,0,your explanation  was Awesome.,True
@user-qn5by5iv7u,2022-08-21T11:28:51Z,0,2022,True
@waiitwhaat,2022-06-22T07:59:53Z,4,This video feels like finding gold among the archives. Though the tools are outdated (python 2) but the concept remains a timeless asset.,True
@malus08,2022-04-19T13:00:44Z,0,Great video!!,True
@bobsonclimber,2022-04-02T08:40:34Z,0,Excellent explanation..thank you,True
@JadeJuno,2022-03-13T22:16:23Z,0,"My main question about this mutable and immutable stuff, is why would you want to have an immutable value over a mutable one?-",True
@colinmaharaj,2022-02-06T11:53:19Z,0,"Immutable mean, don't use that language.",True
@anwarsosko5963,2021-12-30T20:27:04Z,0,You're amazing,True
@qguk,2021-10-27T19:37:32Z,0,Thank you so much this was briliantly clear <3,True
@koferperk,2021-10-22T07:25:53Z,0,thanks!,True
@viktornikolov827,2021-10-12T20:31:38Z,0,"A very helpful video, thank you!",True
@Michael16000,2021-10-03T12:06:38Z,0,Many thanks,True
@basselkordy8223,2021-10-02T13:06:39Z,0,"Very informative, Thanks!",True
@farrukhafzaal940,2021-09-18T06:05:28Z,0,"Thank you @Corey, this is a wonderful explanation",True
@love_radiation6408,2021-05-09T08:48:55Z,0,Can you explain dynamically typed programming,True
@rijumonechoudhuri981,2021-05-03T21:25:37Z,0,Thanks so much for explaining why its important to know which objects are mutable and which are not.,True
@musicfan2000,2021-04-13T19:10:39Z,0,"thank you, king",True
@ZeryusXD,2021-04-01T18:34:59Z,0,Excellent explanation thanks!,True
@pashnyovv,2021-03-30T09:18:00Z,0,and I didn't get the answer what I can use in python instead of str (like StringBuilder in java) ?,True
@cliffordmathew1036,2021-03-26T19:43:39Z,0,Thanks,True
@alinapostol2230,2021-02-06T02:04:27Z,0,"Great explanation, thanks!",True
@peacemekka,2020-12-18T09:09:22Z,0,nice.,True
@kollivenkatamadhukar5059,2020-12-07T18:25:49Z,0,Great Explination 5 articles = 1 Video,True
@mrsajjad30,2020-12-06T07:21:57Z,0,Thank you for compiling such a beautiful example for explaining the topic.,True
@ayushyadav1010,2020-11-10T16:10:12Z,0,Is,True
@ankitjhunjhunwala9895,2020-09-27T20:24:25Z,1,"Adding one more point, immutability makes the data thread safe.",True
@bloodbath8804,2020-08-16T11:32:04Z,0,thank you very much very very much,True
@AbhishekKumar-qr5ql,2020-08-02T06:09:47Z,1,Best explanation !!,True
@andytheodorko9874,2020-06-21T14:03:42Z,0,"Why not make strings mutable? What can I use in C# to make the string mutable? What about char[], is this mutable? Any consequences of not using string but using char[]?",True
@alishashrestha7967,2020-06-08T06:13:09Z,2,By far the best explanation of immutability for beginners. Thanks!,True
@Avarn388,2020-05-27T19:28:41Z,7,"I already had a good grasp of mutable and immutable, but I'll admit; your explanation definitely made the distinction clear. Especially with regards to how immutable objects occupy a distinct space of memory and how trying to modify them can create multiple objects in memory. Overall, I learned a lot so thank you very much for posting these. :)",True
@matuagify,2020-05-26T17:46:41Z,17,"Man, have watched thousands of video's on YouTube. But you are the best . No one explains better than you.  I'm glad I I found your channel.",True
@mitchellvandoorn2625,2020-05-18T18:46:14Z,1,"This was clear, thanks!",True
@shixianli1367,2020-04-08T11:45:59Z,1,great video,True
@rachelwinchell4681,2020-03-26T01:55:33Z,0,I'm getting a syntax error when I go to print a. wants me to add (). please advise,True
@user-xc5xf8gp8n,2020-03-06T11:00:08Z,6,"Summary: 1. 'Mutable' means that an object can be modified, while 'immutable means it can't.   2. We can check whether a data is mutable or not by printing out the id(memory address) of an object after performing an modification to the data type.   3. Example#1. Strings are immutable in Python. But we can still reassign a whole new string value oto a variable that holds a string. However, it is not possible to modify a substring while keeping the memory address the same.   4. Example#2. Lists are mutable in Python. We can change one item of the list while keeping the memory address of the entire list the same.   5. Why should we know this concept? There are 2 reasons 5-1 We can avoid and fix errors caused by modifying an immutable data type. 5-2 We can speed up our programs. Memories are being shifted when performing operations on immutable objects means that it is going to take a lot more amount of time, and making our program slower. By avoiding operations on immutable data and thus the memory shift, we can improve our program speed.",True
@MarcusLucasOficial,2020-03-03T04:02:26Z,1,This is the greatest explanation on this top! Can you give more examples when using mutable and immutable variables are good or bad when processing large amounts of data?,True
@arkb9,2020-02-13T15:53:15Z,0,Whatâ€™s happening in the employee example? I mean how could I make the list mutable?,True
@pavelooo2289,2020-01-23T21:22:15Z,0,Thanks for clearing the concepts. -the 1000th liker.,True
@pinkfloyd089,2019-11-22T05:36:14Z,1,best video to explain the concept . Thank you,True
@soumyazyx,2019-11-12T21:16:27Z,15,Thank you Corey for your time and effort. Keep spreading the knowledge.,True
@YeGaogaosanyong,2019-11-04T04:51:48Z,1,"The difference between mutable and immutable objects is very nicely explained in the first half of the video. You are absolutely correct that an application which keeps appending value to an immutable object runs slow as it constantly copies the existing value to a new memory space. However, there is no guarantee that by changing it to a mutable object the application will run fast. Using list, it is indeed the case as list in Python is essentially a variable-sized array which has extra spaces to add new elements. So its operation to append is ""amortized"" O(1). But if one uses numpy array, then it is essentially the same as using string which copies the existing elements over to a new memory location whenever new elements are appended (i.e. O(N) operation).",True
@rohithanda6669,2019-10-16T09:07:07Z,1,Very well explained...!,True
@nallilley3863,2019-08-29T15:59:06Z,1,Super helpful. Thanks. UK CS teacher.,True
@user-kc5wn1ti3b,2019-08-28T08:29:48Z,0,When'd the garbage collector release the previous addresses when concatenating the string(the example with the html list)?,True
@soham19902008,2019-08-20T09:26:46Z,0,"Dear Corey,      May I please have your mail id, so that I may ask a few things. Thank You",True
@rapirapir1544,2019-03-21T11:07:09Z,0,Why have I not found your videos up until now,True
@rapirapir1544,2019-03-21T11:06:45Z,0,Why have I not found your videos up until now,True
@deadlock107,2019-02-25T17:53:34Z,1,"I don't get it totally. So when I make a variable like x=""arbitrary string"", then change  to x=""another string"" , then the first one still remains in the memory or the memory space disengage?",True
@TheLollercaster,2019-02-12T16:01:24Z,2,"thanks for the video, I wanted to understands mutable vs immutable in terms of JavaScript, and your example really helped me out to understand it",True
@ShahzaibKhan-li8wi,2019-01-29T17:29:28Z,0,i'm trying to print address of variable but not printing,True
@insertoyouroemail,2018-12-31T02:34:42Z,0,"Optimization is not only relevant in terms of performance but also in terms of maintainability, reliability, predictability and readability.",True
@Epistemer,2018-12-21T23:06:43Z,1,thank you :),True
@thirumalaivasan6745,2018-11-22T08:08:12Z,0,Can anybody explain me how did he commented multiple lines of codes using shortcut key? as a windows user? 3:07,True
@radhakrishnavarukuti1601,2018-11-13T09:05:53Z,1,great explanation!!,True
@nicolasdupere,2018-07-26T15:04:15Z,0,You are so good to explain... who are the 2 morons who didn't get it! ;),True
@abhilashm4911,2018-07-02T06:39:07Z,1,"thank you very much Corey , u explain very clearly",True
,2018-06-21T00:42:33Z,0,Is there a book where I can find these programming terms?,True
@mritunjaykumar8684,2018-05-22T11:33:49Z,0,"Your last minute lines just cleared all things. But, how can I determine whether the method I am creating or functions I am using is mutable or immutable?",True
@Ryan-vn7de,2018-05-09T18:44:06Z,0,"Awesome explanation, thanks!",True
@mickmack9360,2018-04-04T03:20:38Z,5,"Great Videos, thank you!! One question: The different addresses are the addresses to which output pointed in the past. However, after each concatenation the old object gets garbage collected. So where is the problem? All the time, there is just one object, that moves from one location in memory to another, letting the old objects be destroyed...",True
@xonted5929,2018-03-29T17:54:35Z,0,thank you,True
@mohamedbilal5634,2018-02-25T06:18:51Z,0,Thanks for the great explanation,True
@think.force-anil,2018-02-19T16:01:12Z,30,"Hi Corey, thanks for this video. Well the String and StringBuffer example was comprehensible. You made it very clear that having to concatenate 1000's of string would take a performance hit and it would be highly memory inefficient to do that. But you forgot to state what would be the memory efficient way to approach this problem. What would be the StringBuffer/StringBuilder equivalent Java solution in Python?",True
@fosatech,2018-02-18T03:47:42Z,0,Thanks! Subscribed,True
@babelwrap,2018-02-15T09:52:58Z,1,"If you did ""a=[6,2,3,4,5]"" the address would change, the same way a string would. I believe strings being placed in a different address is not a characteristic of their immutability. Please clarify.",True
@RC-bl2pm,2017-10-29T19:09:52Z,1,Corey you really push the fog out. Thanks very much.,True
@cd-stephen,2017-10-05T15:57:47Z,1,"Corey - Your explanations are amazing,",True
@academichelp8738,2017-09-27T04:42:54Z,0,"when i create this array estsim=np.zeros(9000,9000,2), dtype=np.int), again in python, it gives Memmory error. Can you help me out please.",True
@tcao1k,2017-08-20T04:57:18Z,0,"Hi Corey, how is using remove an element in a list vs a string that could make more sense in immutable with mutable ? since, it is possible to  replace a letter  ""o""  or ""a"" or ""A"" in string but it's ID still point to the same memory location.  >>> str2 = "" hello "" >>> str2.replace(""o"",""a"") ' hella ' >>> print id(str2) 41547264 >>> str2.replace(""o"",""A"") ' hellA ' >>> print id(str2) 41547264 >>> str2.replace("" "",""A"") 'AhelloA' >>> print id(str2) 41547264  #--- list--#   >>> lst [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 'a', 2] >>> print id(lst) 41465776 >>> lst.pop(2) 4 >>> print id(lst) 41465776 >>>",True
@mountainking212,2017-08-15T23:37:15Z,4,"Hi Corey, thanks for your video. If strings are immutable, how is it possible that you can append a new string to the original one? This is in reference to the last example in your video.",True
@LopogaX,2017-07-24T13:51:30Z,0,"This playlist is what I was looking for, good tutorial",True
@yogeshbaviskar2292,2017-06-07T04:04:26Z,0,"In the last section, you have used a list containing multiple strings. You showed that the various strings are stored at different addresses. As List is mutable, so is it like if I change the value in one of the string in the list it will modify it at the same address ?",True
@justgivemethetruth,2017-05-16T00:42:37Z,0,"Why do you always use the word ""whenever"" when the word ""when"" would work just fine, and even be more appropriate in about half your cases?  This is one of those mindless things people from the South do just to sound Southern, huh?",True
@Limpuls,2017-05-14T02:09:54Z,0,Thanks for this great explanation. I have a question. Can perfomance issues for immutable objects be solved by using recursions instead of loop iterations? I ask because functional languages use immutable data structures and a lot of those languages do not have loops originally in the language.,True
@swadhikarc7858,2017-05-07T16:02:51Z,0,Can't explain more simpler than corey does,True
,2017-05-05T09:22:19Z,0,"Thank you very much, you're very clear",True
@jakubknitter2679,2017-02-21T15:29:05Z,0,What about StringBuilder? Is it not better than StringBuffer class considering performance?,True
@psalt21,2016-12-07T22:35:16Z,5,I wish I could give you more than one thumbs up. Your explanation and example really hit the concept home for me. I hope you can get more views since I think you did a very good job. The final example was a great practical example of how the way it is stored in memory could really affect what you are trying to do - in certain situations mutable is ideal in others immutable will have great advantages. The better you understand the difference between the two the better you can decide the approach to best meet your needs.,True
@srinidhiskanda754,2016-07-15T06:08:24Z,1,tanx.  if string is immutable and has performance issue than why did string is made immutable,True
@markrity,2016-02-25T20:27:59Z,59,"In your last example of displaying the employees , you said its a bad way to represent a big list of employees , so what would be the right way ?",True
@jamespretlow3028,2016-02-15T21:34:38Z,3,"I hope you have some classes on Udemy. If so, let me know and I will sign up.",True
@evgenygoldin5024,2016-02-11T11:12:21Z,0,Gold! Thank you a lot!,True
@Fat1Dada,2016-01-29T05:48:25Z,4,+1 for clarity and choice of example with the String class at the beggining :) thank you!,True
