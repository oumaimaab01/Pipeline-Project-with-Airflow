author,updated_at,like_count,text,public
@wilsonfam6,2014-03-14T04:56:22Z,1," Since the raw data is already in a numpy object it is more efficient to iterate over it using numpy.  Numpy has an average function that can average the rows of a two dimensional array. np.average(data, axis=1)  So, to turn your data into a two dimensional array use the numpy function reshape.  Reshape takes a tuple describing the desired shape.  We don't know how many rows we will need so we can use the argument -1 for the number of rows desired.  x.reshape((-1, divby)) - Except this won't work if the number of elements in x is not evenly divisible by divby.  In your video you truncate the first elements of the array until the array is evenly divisible by divby.  This can be done using numpy sub scripting; data = x[len(x)%divby:].  Putting it all together in one line, in one well documented function yields:  def chngGran(x, divby):     """"""Computes windowed averages of x where the window size is divby.      Assumes x is numpy objects""""""     return np.average(x[len(x) % divby:].reshape(-1, divby), axis=1)  Now changeGranularity can simply call chngGran twice.  def changeGranularity(x, y, divby):     ""assumes x & y are numpy objects""     return chngGran(x, divby), chngGran(y, divby)",True
@GM-cm5dq,2013-11-30T03:05:25Z,0,thanks for putting it in hd really helps the screen,True
@GM-cm5dq,2013-11-30T03:03:56Z,0,nice video how do you start making videos,True
