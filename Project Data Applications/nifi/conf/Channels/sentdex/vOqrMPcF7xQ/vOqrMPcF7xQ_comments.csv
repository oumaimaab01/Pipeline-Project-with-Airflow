author,updated_at,like_count,text,public
@slonbeskonechen8310,2021-11-29T16:14:19Z,0,"Thank you, it was very helpful for me!",True
@takayoshi3943,2019-10-12T14:26:49Z,0,Good for me. I looked up a difference between __str__ and __repr__. I could understand it:D Thank you.,True
@alifzl,2018-04-04T12:30:56Z,0,usefull information,True
@X0Lineage0X,2017-08-06T20:29:52Z,0,"Liked and Subbed! Thank you for showing how to modify what repr outputs, so many search results only talk about reprs definition.",True
@zakariyaal2848,2017-07-03T21:46:28Z,0,You are a legend sir thanks a lot!,True
@sumwun9071,2017-03-19T13:26:00Z,2,Harrison be the type o' guy to type a line to terminate the program just to use the shell.,True
@antopolskiy,2017-01-12T09:10:09Z,0,"Awesome stuff. I knew most of the material in the series already, but some things are new (e.g. logging) and anyway it is nice to refine and patch holes.   Any plans on doing something related to debugging, like pdb module? This is something I struggle with in python sometimes and I think maybe I am doing it wrong.",True
@isilanes,2016-12-14T22:59:29Z,25,"Nice video and nice series. A piece of advice on the new string formatting. You take no advantage of the {} notation, and I think you should. For example, you write:  return 'Blob of color: {}, size: {}, location: ({}, {})'.format(self.color, self.size, self.x, self.y)  when you could write:  return 'Blob of color: {s.color}, size: {s.size}, location: ({s.x}, {s.y})'.format(s=self)  The concision gain can be noticeable, but above all it is the clarity that improves a lot. The second way is much more readable (I think), and much much less error prone. It is really painful (and should be unnecessary) to keep track of the order and amount of arguments in the format() part, and make them match the amount and order of curly brackets on the left side. The second form takes care of that. It is also more flexible: you could decide to say omit self.x, and then just delete s.x, without touching the argument part. You could switch s.x,s.y for s.y,s.x or use s.x,s.x without ever reordering or deleting anything on the arguments side (those changes are meaningless in your example, but things like that happen all the time in real coding life).  Another tiny detail... why write:  'Blob add op {} + {}'.format(str(self), str(other_blob))  when the string conversion does automatic casting into string? Just write:  'Blob add op {} + {}'.format(self, other_blob)  Keep up the good material!",True
@varuntewari26,2016-12-14T03:22:16Z,0,This by far is the best channel I have found on YouTube! Cheers Sentdex!,True
@NumericalVideos,2016-12-13T22:34:46Z,2,"Hi sentdex, do you think you could make a short series on Git/Github?  It's something i've never been able to grok and have to Google every time I need to do something.  I think it would be super helpful, even if it isn't strictly python.",True
@JurekKedra,2016-12-13T22:06:09Z,1,repr is supposed to be parsed by Python. So when you are implementing the __repr__ usually you want to it to be a valid constructor call. Something you may cut and paste into console. Not just an arbitrary order of same values.,True
@cmatthew91,2016-12-13T21:31:50Z,1,This series is super useful!,True
@eav300M,2016-12-13T17:00:07Z,0,like!,True
@ItalianPizza64,2016-12-13T16:45:31Z,1,amazing stuff man!,True
