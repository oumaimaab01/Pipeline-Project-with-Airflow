author,updated_at,like_count,text,public
@voldemortxu,2018-06-11T12:24:46Z,0,"for historical data, I believe you can find pretty much every year on SEC EDGAR.",True
@frankzhu104,2016-06-12T19:01:10Z,0,"Thanks for your videos. How do you update ( add, remove symbols) your russell 3000 list?",True
@chrisk5628,2016-05-15T06:44:53Z,0,"Hey sentdex - I've been using a .csv file in excel that I can paste lists of rs3000/sp500/whatever into an then a macro to remove unwanted info, add 's around the tickers and transpose the rows to columns to read into the python script. However, I get a quotation mark at the beginning and end of the list when it reads into the stock list plus a terminal value. rstrip('\n') seems to remove the \n okay, but it doesn't seem to want to function with rstrip('""). I assume it's because the "" is reserved in python or something.  I've just been doing the above and reopening the CSV in notepad and pasting the values into the list, which might be the easiest way, but didn't know if I could be even lazier.  Any suggestions?",True
@michiellescrauwaet166,2015-08-17T10:15:40Z,1,In the meantime AFAM gained more than 100 % in value; good screening!,True
@felixsalvester5028,2014-12-27T00:13:38Z,4,"I extended the stock screener to pull all the fundamental data on Yahoo for each stock in your list and save it to a CSV file named after the stock in a sub folder called ""stocks"" that you will have to manually create.  This way you don't have to re-visit the site every time you want to look at the data in a different way. I hope this helps save people some time and bandwidth!  (the .replace() removes a comma from dates that write on some lines which would complicate the CSV file.  Some lines use .split() 3 times because there are dates or other data that change from stock to stock and over time which has to be skipped.  At the end of the pull, stocks which yahoo doesn't recognize will be printed in the failures list.)  import time import urllib2 from urllib2 import urlopen import datetime stocksToAnalize = ( 'AAPL', 'GOOG' )  failures = [] def getFundamentals(stock):          print stock,str(datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S'))     try:         sourceCode = urllib2.urlopen('https://ca.finance.yahoo.com/q/ks?s='+stock).read()                  Market_Cap_intraday = sourceCode.split('Market Cap (intraday)<font size=""-1""><sup>5</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('"">')[1].split('</span>')[0]         Enterprise_Value = sourceCode.split('<tr><td class=""yfnc_tablehead1"" width=""74%"">Enterprise Value (')[1].split('""yfnc_tabledata1"">')[1].split('</td>')[0]         Trailing_P_to_E_ttm_intraday = sourceCode.split('Trailing P/E (ttm, intraday):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Forward_P_to_E_fye = sourceCode.split('""yfnc_tablehead1"" width=""74%"">Forward P/E')[1].split('""yfnc_tabledata1"">')[1].split('</td>')[0]         PEG_Ratio_5_yr_expected = sourceCode.split('PEG Ratio (5 yr expected)<font size=""-1""><sup>1</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         PricetoSales_ttm = sourceCode.split('Price/Sales (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         PricetoBook_mrq = sourceCode.split('Price/Book (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Enterprise_Value_to_Revenue_ttm = sourceCode.split('Enterprise Value/Revenue (ttm)<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Enterprise_Value_to_EBITDA_ttm = sourceCode.split('Enterprise Value/EBITDA (ttm)<font size=""-1""><sup>6</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Fiscal_Year_Ends = sourceCode.split('Fiscal Year Ends:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Most_Recent_Quarter_mrq = sourceCode.split('Most Recent Quarter (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Profit_Margin_ttm = sourceCode.split('Profit Margin (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Operating_Margin_ttm = sourceCode.split('Operating Margin (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Return_on_Assets_ttm = sourceCode.split('Return on Assets (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Return_on_Equity_ttm = sourceCode.split('Return on Equity (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Revenue_ttm = sourceCode.split('Revenue (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Revenue_Per_Share_ttm = sourceCode.split('Revenue Per Share (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Qtrly_Revenue_Growth_yoy = sourceCode.split('Qtrly Revenue Growth (yoy):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Gross_Profit_ttm = sourceCode.split('Gross Profit (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         EBITDA_ttm = sourceCode.split('width=""74%"">EBITDA (ttm)<font size=""-1""><sup>6</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Net_Income_Avl_to_Common_ttm = sourceCode.split('Net Income Avl to Common (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Diluted_EPS_ttm = sourceCode.split('Diluted EPS (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Qtrly_Earnings_Growth_yoy = sourceCode.split('Qtrly Earnings Growth (yoy):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Total_Cash_mrq = sourceCode.split('Total Cash (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Total_Cash_Per_Share_mrq  = sourceCode.split('Total Cash Per Share (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Total_Debt_mrq = sourceCode.split('Total Debt (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Total_Debt_to_Equity_mrq = sourceCode.split('Total Debt/Equity (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Current_Ratio_mrq = sourceCode.split('Current Ratio (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Book_Value_Per_Share_mrq = sourceCode.split('Book Value Per Share (mrq):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Operating_Cash_Flow_ttm = sourceCode.split('Operating Cash Flow (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Levered_Free_Cash_Flow_ttm = sourceCode.split('Levered Free Cash Flow (ttm):</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Beta = sourceCode.split('Beta:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         _52_Week_Change = sourceCode.split('52-Week Change<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         S_and_P500_52_Week_Change = sourceCode.split('S&amp;P500 52-Week Change<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         _52_Week_High = sourceCode.split('yfnc_tablehead1"" width=""74%"">52-Week High')[1].split('""yfnc_tabledata1"">')[1].split('</td>')[0]         _52_Week_Low = sourceCode.split(' width=""74%"">52-Week Low')[1].split('""yfnc_tabledata1"">')[1].split('</td>')[0]         _50_Day_Moving_Average = sourceCode.split('50-Day Moving Average<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         _200_Day_Moving_Average = sourceCode.split('200-Day Moving Average<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Avg_Vol_3_month = sourceCode.split('Avg Vol (3 month)<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Avg_Vol_10_day = sourceCode.split('Avg Vol (10 day)<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Shares_Outstanding = sourceCode.split('Shares Outstanding<font size=""-1""><sup>5</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Float = sourceCode.split('Float:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Percent_Held_by_Insiders = sourceCode.split('% Held by Insiders<font size=""-1""><sup>1</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Percent_Held_by_Institutions = sourceCode.split('% Held by Institutions<font size=""-1""><sup>1</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Shares_Short = sourceCode.split('</td></tr><tr><td class=""yfnc_tablehead1"" width=""74%"">Shares Short')[1].split('""yfnc_tabledata1"">')[1].split('</td>')[0]         Short_Ratio = sourceCode.split(' width=""74%"">Short Ratio')[1].split('""yfnc_tabledata1"">')[1].split('</td>')[0]         Short_Percent_of_Float = sourceCode.split('width=""74%"">Short % of Float')[1].split('""yfnc_tabledata1"">')[1].split('</td>')[0]         Shares_Short_prior_month = sourceCode.split('Shares Short (prior month)<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Forward_Annual_Dividend_Rate = sourceCode.split('Forward Annual Dividend Rate<font size=""-1""><sup>4</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Forward_Annual_Dividend_Yield = sourceCode.split('Forward Annual Dividend Yield<font size=""-1""><sup>4</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Trailing_Annual_Dividend_Yield_Ammount = sourceCode.split('Trailing Annual Dividend Yield<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Trailing_Annual_Dividend_Yield_Percent = sourceCode.split('Trailing Annual Dividend Yield<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[2].split('</td>')[0]         _5_Year_Average_Dividend_Yield = sourceCode.split('5 Year Average Dividend Yield<font size=""-1""><sup>4</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Payout_Ratio = sourceCode.split('Payout Ratio<font size=""-1""><sup>4</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Dividend_Date = sourceCode.split('Dividend Date<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Ex_Dividend_Date = sourceCode.split('Ex-Dividend Date<font size=""-1""><sup>4</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Last_Split_Factor_new_per_old = sourceCode.split('Last Split Factor (new per old)<font size=""-1""><sup>2</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]         Last_Split_Date = sourceCode.split('Last Split Date<font size=""-1""><sup>3</sup></font>:</td><td class=""yfnc_tabledata1"">')[1].split('</td>')[0]              except Exception,e:         print 'web pull,var asignments.',str(e)                       try:         if 'There are no results for the given search term.' in sourceCode:             failures.append(stock)         elif:             'There is no Key Statistics data available for' in sourceCode:             failures.append(stock)         else:             saveFileLine = 'stocks/'+stock+'.txt'             saveFile = open(saveFileLine,'a')             lineToWrite = 'Market_Cap_intraday,'+Market_Cap_intraday.replace(',', '')+(                 '\n')+'Enterprise_Value,'+Enterprise_Value.replace(',', '')+(                 '\n')+'Trailing_P_to_E_ttm_intraday,'+Trailing_P_to_E_ttm_intraday.replace(',', '')+(                 '\n')+'Forward_P_to_E_fye,'+Forward_P_to_E_fye.replace(',', '')+(                 '\n')+'Forward_P_to_E_fye,'+Forward_P_to_E_fye.replace(',', '')+(                 '\n')+'PEG_Ratio_5_yr_expected,'+PEG_Ratio_5_yr_expected.replace(',', '')+(                 '\n')+'PricetoSales_ttm,'+PricetoSales_ttm.replace(',', '')+(                 '\n')+'PricetoBook_mrq,'+PricetoBook_mrq.replace(',', '')+(                 '\n')+'Enterprise_Value_to_Revenue_ttm,'+Enterprise_Value_to_Revenue_ttm.replace(',', '')+(                 '\n')+'Enterprise_Value_to_EBITDA_ttm,'+Enterprise_Value_to_EBITDA_ttm.replace(',', '')+(                 '\n')+'Enterprise_Value_to_EBITDA_ttm,'+Enterprise_Value_to_EBITDA_ttm.replace(',', '')+(                 '\n')+'Fiscal_Year_Ends,'+Fiscal_Year_Ends.replace(',', '')+(                 '\n')+'Most_Recent_Quarter_mrq,'+Most_Recent_Quarter_mrq.replace(',', '')+(                 '\n')+'Profit_Margin_ttm,'+Profit_Margin_ttm.replace(',', '')+(                 '\n')+'Operating_Margin_ttm,'+Operating_Margin_ttm.replace(',', '')+(                 '\n')+'Return_on_Assets_ttm,'+Return_on_Assets_ttm.replace(',', '')+(                 '\n')+'Return_on_Equity_ttm,'+Return_on_Equity_ttm.replace(',', '')+(                 '\n')+'Revenue_ttm,'+Revenue_ttm.replace(',', '')+(                 '\n')+'Revenue_Per_Share_ttm,'+Revenue_Per_Share_ttm.replace(',', '')+(                 '\n')+'Qtrly_Revenue_Growth_yoy,'+Qtrly_Revenue_Growth_yoy.replace(',', '')+(                 '\n')+'Gross_Profit_ttm,'+Gross_Profit_ttm.replace(',', '')+(                 '\n')+'EBITDA_ttm,'+EBITDA_ttm.replace(',', '')+(                 '\n')+'Net_Income_Avl_to_Common_ttm,'+Net_Income_Avl_to_Common_ttm.replace(',', '')+(                 '\n')+'Diluted_EPS_ttm,'+Diluted_EPS_ttm.replace(',', '')+(                 '\n')+'Qtrly_Earnings_Growth_yoy,'+Qtrly_Earnings_Growth_yoy.replace(',', '')+(                 '\n')+'Total_Cash_mrq,'+Total_Cash_mrq.replace(',', '')+(                 '\n')+'Total_Cash_Per_Share_mrq,'+Total_Cash_Per_Share_mrq.replace(',', '')+(                 '\n')+'Total_Debt_mrq,'+Total_Debt_mrq.replace(',', '')+(                 '\n')+'Total_Debt_to_Equity_mrq,'+Total_Debt_to_Equity_mrq.replace(',', '')+(                 '\n')+'Current_Ratio_mrq,'+Current_Ratio_mrq.replace(',', '')+(                 '\n')+'Book_Value_Per_Share_mrq,'+Book_Value_Per_Share_mrq.replace(',', '')+(                 '\n')+'Operating_Cash_Flow_ttm,'+Operating_Cash_Flow_ttm.replace(',', '')+(                 '\n')+'Levered_Free_Cash_Flow_ttm,'+Levered_Free_Cash_Flow_ttm.replace(',', '')+(                 '\n')+'Beta,'+Beta.replace(',', '')+(                 '\n')+'_52_Week_Change,'+_52_Week_Change.replace(',', '')+(                 '\n')+'S_and_P500_52_Week_Change,'+S_and_P500_52_Week_Change.replace(',', '')+(                 '\n')+'_52_Week_High,'+_52_Week_High.replace(',', '')+(                 '\n')+'_52_Week_Low,'+_52_Week_Low.replace(',', '')+(                 '\n')+'_50_Day_Moving_Average,'+_50_Day_Moving_Average.replace(',', '')+(                 '\n')+'_200_Day_Moving_Average,'+_200_Day_Moving_Average+(                 '\n')+'Avg_Vol_3_month,'+Avg_Vol_3_month.replace(',', '')+(                 '\n')+'Avg_Vol_10_day,'+Avg_Vol_10_day.replace(',', '')+(                 '\n')+'Shares_Outstanding,'+Shares_Outstanding.replace(',', '')+(                 '\n')+'Float,'+Float.replace(',', '')+(                 '\n')+'Percent_Held_by_Insiders,'+Percent_Held_by_Insiders.replace(',', '')+(                 '\n')+'Percent_Held_by_Institutions,'+Percent_Held_by_Institutions.replace(',', '')+(                 '\n')+'Shares_Short,'+Shares_Short.replace(',', '')+(                 '\n')+'Short_Ratio,'+Short_Ratio.replace(',', '')+(                 '\n')+'Short_Percent_of_Float,'+Short_Percent_of_Float.replace(',', '')+(                 '\n')+'Shares_Short_prior_month,'+Shares_Short_prior_month.replace(',', '')+(                 '\n')+'Forward_Annual_Dividend_Rate,'+Forward_Annual_Dividend_Rate.replace(',', '')+(                 '\n')+'Forward_Annual_Dividend_Yield,'+Forward_Annual_Dividend_Yield.replace(',', '')+(                 '\n')+'Trailing_Annual_Dividend_Yield_Ammount,'+Trailing_Annual_Dividend_Yield_Ammount.replace(',', '')+(                 '\n')+'Trailing_Annual_Dividend_Yield_Percent,'+Trailing_Annual_Dividend_Yield_Percent.replace(',', '')+(                 '\n')+'_5_Year_Average_Dividend_Yield,'+_5_Year_Average_Dividend_Yield.replace(',', '')+(                 '\n')+'Payout_Ratio,'+Payout_Ratio.replace(',', '')+(                 '\n')+'Dividend_Date,'+Dividend_Date.replace(',', '')+(                 '\n')+'Ex_Dividend_Date,'+Ex_Dividend_Date.replace(',', '')+(                 '\n')+'Last_Split_Factor_new_per_old,'+Last_Split_Factor_new_per_old.replace(',', '')+(                 '\n')+'Last_Split_Date,'+Last_Split_Date.replace(',', '')+('\n')              saveFile.write(lineToWrite)             saveFile.close()                  except Exception, e:         print 'save file', str(e)  for stock in stocksToAnalize:     getFundamentals(stock)     time.sleep(10) print failures",True
@Souliee,2014-11-17T18:24:13Z,0,"Please make a tutorial on the parsing of the way back machine as I am from Sweden I can't really do much with the russell and yahoo data. I would like to invest in the Swedish OMX Stockholm, and a way to get the historical data would be great!  Anyhow, awesome tutorials. This is the second playlist I've watched in two days! :)",True
@sentdex,2013-10-03T13:59:53Z,0,wow quandl is epic! Tons of data here. I'll grab their module and definitely toss that in here. Thanks for sharing! Never heard of this website,True
@dfrusdn,2013-10-03T07:25:44Z,0,You can pull old data from quandl.com and damodaran online. I think they go back to 2003 for financial reports. You can also do it manually from EDGAR on the SEC website.,True
