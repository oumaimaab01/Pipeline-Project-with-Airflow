author,updated_at,like_count,text,public
@nigelpallatt,2023-02-11T16:59:47Z,0,"Well, this is where I have to go, you Washington post thing does not work so no point using it in your examples. so good by",True
@darpananeja6755,2022-02-22T23:29:15Z,0,"Its not n:news anymore, its news:news",True
@mohamedgamea8846,2021-02-11T04:57:58Z,0,"@5:58 ( redefining Locations in ""News"" struct ) made me a bit confused as I had expected that ""News"" struct is only for <news> and all tags that are underneath ,, so I think it's less important to redefine ""Locations"" as you already did in struct ""SitemapIndex""",True
@thegreenman9000,2020-12-27T11:53:47Z,0,"I found 2 major issues with this code.  I made a github repo with my revised code and a description of the issues here:  https://github.com/PatrickEGorman/GoPracticalProgrammingTutoral13Revised .  I also have brief descriptions and solutions to the issues below here in this comment:  1: The washington post sitemap url has been changed to         ""https://www.washingtonpost.com/news-sitemaps/index.xml""  2: You will find that http.get(""https://www.washingtonpost.com/news-sitemaps/index.xml"") is extremely slow.   I struggled with this untilI ran across the solution on stack overflow:  Washingtonpost.com now has anti bot scripts that slow down traffic from devices flagged as bots.  If you use http.get() by itself with no headers, washingtonpost.com immidiately flags you as a bot and slows you down.  You need to ""trick"" the site into thinking your not a bot by creating a custom get request with standard looking headings.  I ended up making it a separate method so that I could call it multiple times without rewriting a bunch of duplicate code.  Definitely going to speed up that for loop for the sub sitemaps a whole lot. 	client := &http.Client{} 	req, _ := http.NewRequest(""GET"", ""https://www.washingtonpost.com/news-sitemaps/index.xml"", nil) 	req.Header.Set(""Connection"",""Keep-Alive"") 	req.Header.Set(""Accept-Language"",""en-US"") 	req.Header.Set(""User-Agent"",""Mozilla/5.0"") 	resp, _ := client.Do(req) 	bytes, _ := ioutil.ReadAll(resp.Body)",True
@kamilziemian995,2020-07-13T23:05:19Z,0,"June 2020. How to fix possible bug when using web page ""https://www.washingtonpost.com/news-sitemaps/index.XML"".  Since web page shown in video is outdated now I follow advice of marcosantar93 and use address mentioned above. But, after line xml.Unmarshal(bytes, &s) address in slice s.Locations have form ""\nhttps://www.washingtonpost.com/news-sitemaps/politics.xml\n"". Due to newline symbol ""\n"" at the beging and the end http.Get(Location) bound value ""nil"""" to resp and send an error.  You can fix it very easily by putting after ""xml.Unmarshal(bytes, &s)"" loop for i, Location := range s.Locations {     s.Locations[i] = Location[1:len(Location)-1] } Meaning of this line is like in Python: you throw away first and last char in string. If you need more comments, please write response to this post. I will try to help.  If you want to see error which http.Get(Location) send write resp, err := http.Get(Location) if err != nil {    Println(""err:"", err) } If there is no error variable err will have value ""nil"". If you replace err with _ as in video, its like telling Go compiler to don't care about error and carry on work (this how I understand this).",True
@kevinl.9657,2020-04-28T11:34:46Z,1,"No one caught the Django at 8:24 . Well, it has ""go"" in it so... Anyways, I really liked your videos! Keep it up! I'm learning a lot.",True
@knifesk,2019-10-24T21:34:33Z,2,"n is a namespace for the tags.. and is also defined in the root of the XML <urlset ..... xmlns:n=""....""> and is used to group the attributes relevant to the schema defined in the url (...google.com/schemas/sitemap-news/0.9)...",True
@kaipeng21,2019-05-06T00:07:51Z,3,"For those getting “invalid control character in url”, add “Location = strings.TrimSpace(Location)” before ioutil.ReadAll",True
@samfranklin151,2019-01-09T17:45:12Z,0,"This lesson's code throws ""panic: runtime error: invalid memory address or nil pointer dereference"" in main's for loop.  I think it may be b/c the ""//"" after ""https:"" is being interpreted as commenting out what follows after it.  If you hardcode in a url to that loop's http.Get, then it works fine.",True
@hoodedwarrior8956,2018-12-23T14:47:35Z,0,This by default might be a finer scraper than what I'm currently using. We'll see I guess.,True
@bryku,2018-10-21T13:19:20Z,0,"I was really liking this series how each part was a full new thing, until the web app.",True
@adip9213,2018-08-23T11:04:15Z,0,Thanks for the awesome tutorial.  How is it possible that the news struct is able to store an array of news object.  I partly understood the reason behind using strut but I am getting confused by the way data is stored in the news strut,True
@HobSpillane,2018-08-03T05:26:58Z,1,"Like the others have said, the n is used for namespacing.  If you want to know why it's used specifically on that tag and not on others, look to the namespace itself, defined in the document's root tag:  http://www.google.com/schemas/sitemap-news/0.9  This means they're not using namespacing to prevent naming conflicts.  Rather, they're declaring that these nodes belong to a public namespace.  It allows any system that understands the Google News schema to pick up this feed & syndicate it.",True
@MysteryJake89,2018-07-18T04:05:03Z,2,"The ""n"" prefix is the namespace which contains the ""news"" schema. You can see the namespace declared using ""xmlns:n"" on the root ""urlset"" element.",True
@tansvideos7193,2018-05-28T07:12:04Z,3,N: signifies the namespace for news,True
@KarlHepler1985,2018-05-24T22:32:51Z,0,"The n: notation is a namespace. You can see that it is defined in the root tag <urlset />. xmlns:ns=""http://www.google.com/schemas/sitemap-news/0.9""",True
@gajop,2018-05-24T03:52:13Z,33,"I think you probably figured it out by now, but the reason news is written as n:news is because it belongs to a different namespace (specified by a different XML schema). Separating things into different namespaces guarantees that you won't have name conflicts from multiple schemas -> notice how these schemas are created by different organizations (and hosted on different sites). You can imagine it'd be impractical to try enforcing name consistency on the whole of internet.",True
@weratebikes6406,2017-11-04T02:45:15Z,3,"is there no need for ""resp.Body.Close()"" ? I noticed it has been removed here.",True
@unbalancedbinarytree2194,2017-10-29T19:16:59Z,6,Let's GO!,True
@JP-pm1fe,2017-10-29T17:46:46Z,0,"three things: 1. I really like your way of explaining things and really appreciate your work 2. in your for loop in the http.Get part, shouldn't be it Locations instead of Location? 3. Why is there this game/video running in the background? is there someone allways playing when you record? :D",True
@ShortBusTrading,2017-10-29T14:59:04Z,24,"The XML namespace is used as ""n"" to use another XML vocabulary which conforms to another schema, it is Google's NEWS schema ... you can see the namespace being used at the top of the XML definition. It allows reusability of the XML structure from another organization. xmlns:n=""http://www.google.com/schemas/sitemap-news/0.9""",True
@draakisback,2017-10-29T14:28:10Z,1,Golang hashmaps are fairly straightforward.  Though if I was writing this code I would make a slice of my news struct and use that to bind the values and pass them to the template.,True
