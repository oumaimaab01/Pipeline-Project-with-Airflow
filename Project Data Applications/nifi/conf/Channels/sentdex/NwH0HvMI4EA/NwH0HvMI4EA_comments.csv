author,updated_at,like_count,text,public
@janeavassel9865,2023-10-19T16:01:33Z,0,Thank You So Much!,True
@mike19558,2021-06-18T05:33:46Z,0,"I'm a tad confused, what is print_lock locking? worker?",True
@GHOST-qx6wi,2021-04-28T22:18:10Z,0,i know this is before 8 years but this guy better explain then whole semestre,True
@knightplayer7360,2020-10-28T04:34:57Z,0,"I can say this tutorial is very complex, not beginner-friendly",True
@darshanpanchal3046,2020-09-13T16:54:38Z,0,How to terminate infinite running thread,True
@user-ns8ur8yh8r,2020-07-14T17:20:53Z,0,@sentdex i was joking my teacher sentdex.....i learn from you alot of and i got a job cause your lessons......in php really......we love you brother,True
@engineeredtogether8067,2020-03-09T01:48:52Z,0,"I'm a bit confused by the logic, how can we do a get on the queue before putting a worker in first? Since the threading function is run first, how are we getting the workers?",True
@bilelmalek6721,2020-03-08T13:23:06Z,0,to be honest  i never understood this thread on py until i see your video thanks,True
@FRIENDSofCAP,2020-01-31T23:53:03Z,0,"Hi there... I am getting and erroe (see below with code) and I am hoping you will reply and can help me with this.  I followed your tutorial on threading and I get the same error I got from another threading tutorial by Corey Schafer.  The error is right below, followed by the code as you showed in your example. LAST LINE IN ERROR IS:   ""AttributeError: module 'threading' has no attribute 'lock'""   FULL ERROR MSG IS: Traceback (most recent call last):   File ""/Volumes/Data Drive/python_projects/threading.py"", line 12, in <module>     import threading   File ""/Volumes/Data Drive/python_projects/threading.py"", line 17, in <module>     print_lock = threading.lock() AttributeError: module 'threading' has no attribute 'lock'   Python3 COde: import threading from queue import Queue import time     print_lock = threading.lock()   def exampleJob(worker):     time.sleep(0.5)     with print_lock:         print(threading.current_thread().name, worker)   q = Queue()     def threader():     while True:         worker = q.get()         exampleJob(worker)         q.task_done()     for x in range (10):     t = threading.Thread(target = threader)     t.daemon = True     t.start()   start = time.time()   for worker in range (20):     q.put(worker)   q.join()   finish = time.time() print(",True
@justinjose9618,2020-01-22T09:19:26Z,0,i have created a program with socket and threads but i am unable to create multiple threads in python 3 and this 1 thread is capable to hande only 2 requests can you explain how to create multiple threads in python ?,True
@justinjose9618,2020-01-21T16:01:23Z,1,dude can you make a vided on threading+queue+socketserver? if you have already made one please replay back with link,True
@ultraprim,2019-12-05T20:09:19Z,0,17:57 that's a mood,True
@bbman10pwns,2019-10-15T04:33:36Z,0,"This is definitely not a beginner video, but this is the only video so far that has actually mentioned why queues are important (issue I was running into). All the other videos section queues off from threading and make it extra confusing.",True
@mrlufus,2019-10-03T13:35:20Z,1,"An alle deutschen, welche Teile seines Codes noch nicht verstanden haben, hier mein Code mit Erklärungen (auskommentiert mit #)  import threading from queue import Queue import time  print_lock = threading.Lock() #jeder Thread muss warten bevor er printen darf (Skittles Problem)  def exampleJob(worker):     time.sleep(0.5)     with print_lock: #with Befehl, damit print Befehl automatisch nach benutzung freigegeben wird         print(threading.current_thread().name, worker)  """""" SAME CODE: (wie die with funktion nur länger und umständlicher, deshalb nimmt man with)     print_lock.acquire()     print(threading.current_thread().name, worker)     print_lock.release() """"""  def threader():     while True:         worker = q.get() #achtung worker ist eine private variable         exampleJob(worker)         q.task_done()  q = Queue()  for x in range(10): #Anzahl der Threads ((x hat keine Bedeutung muss nur aufgeschrieben werden zur vollständigen Syntax, damit die for Schleife hochzählt))     t = threading.Thread(target= threader) #erstellt einen Thread und sagt ihm, dass seine Aufgabe nun die Funktion threader ist...     t.daemon = True #Sagt das er ein Backgound Task ist, wenn der main thread fertig ist brauchen wir diese Threads nicht mehr, weshalb Sie daemons sind     t.start()  start = time.time()  for worker in range(20): #Anzahl der zu erfüllenden Tasks     q.put(worker) #tut einen freien worker in die Warteschlange q.join()  print(""Entire job took:"",time.time()-start)",True
@Ttalos,2019-09-08T19:28:54Z,0,A very useful example for running hardware would be to use two LEDS and two switches. How would you use threading to turn the LEDs on and off while reading the state of the switches/LEDs?,True
@scienceblossom6197,2019-08-10T03:34:27Z,0,"where's that ""original"" threading video you're referring to multiple times but seems to no exist when I search YouTube? A link to it in the descriptions would be great help to watchers. And thanks for the tutorial.",True
@raysantamaria2351,2019-07-18T19:33:48Z,0,"Hello @sentdex I love you videos, they are great for starting python and developing my skills further. I am fairly new to python, and I had a question about possibly threading a test script along with a PyQt progress bar script. How would I be able to make a script that can run both the test and progress bar simultaneously? Thank you!",True
@kamilczarnogorski9200,2019-07-05T14:53:12Z,0,it is a bit chaotic - just like threading in python ;),True
@syedjunaidkhalid1011,2019-06-25T19:00:23Z,0,poorly explained!,True
@coolest4101,2019-06-25T07:22:34Z,1,"I heard that threading won't make python programs faster due to the ""global interpreter lock"", but it does appear to be faster in your example. Could you please explain this in detail? Thanks~",True
@TotalImmort7l,2019-06-15T07:43:03Z,0,I let my eyes and brain feast on something awesome!,True
@juanbas100,2019-05-22T21:00:14Z,1,9 minutes and i still don't understand anything. I'll have to leave the video with a dislike.,True
@GeorgeLenoHolmesJr,2019-05-19T16:15:29Z,0,Better video to understand threading: https://youtu.be/2ZwuKeL0aHs,True
@bennguyen1313,2019-05-02T15:50:43Z,0,"The terminology is definitely a bit confusing for a rookie!  I understand there's 10 threads, only 1 queue.. but 20 of workers or jobs?  The way it's used, the difference between threads and workers seem subtle, as does jobs and workers. For example at the 16m mark, he says q.get() gets the THREAD/worker.. but isn't getting job/worker?  Speaking of q.get(), I've always seen it used with the timeout parameter (ex.  q.get(timeout=1))..  when should that be used?   the q.join line is also a bit confusing!",True
@rulofmg,2019-04-23T15:49:53Z,1,is there easier way to do threading so that my gui not freezing in 2019?,True
@hyperunstable9397,2019-04-04T23:46:42Z,1,you just saved me your amazing,True
@RMCMC_AmitNikhade,2019-03-27T15:04:37Z,0,how to stop a thread from a function,True
@DanielLewisDance,2019-03-25T23:30:57Z,0,"For people who are confused, I feel some of the confusion also comes from how he has named his threads / workers.  May help if you think of SentDex's 'workers' as 'jobs', and his 'threads' as 'workers'.   Makes more sense to me that way!",True
@sonicjon9993,2019-03-22T05:00:24Z,0,He is so when writing code,True
@deepanshuaggarwal7042,2019-03-21T09:34:25Z,0,getting runtime error thread can only be started once. I checked that thread is not alive. can u tell me reason,True
@ananava254,2019-02-03T00:22:02Z,0,"So helpful, in the documentation there isn't any example",True
@satyammandal5672,2019-01-04T08:33:32Z,0,in Thread why use Join,True
@vettomd,2018-12-31T19:07:21Z,0,"Finally found solition, python 3.6/7 does not seem to accept t.daemon = True, have added it to threader. ""t = threading.Thread(target = threader, daemon = True)""  I have published the script I have created using your video and simplified version here. https://github.com/vettom/PythonBasics  Thanks a ton for this video.",True
@vettomd,2018-12-30T18:05:38Z,0,"Thanks you for this fantastic video, I am new to python and have managed to write my own task with Multithreading saving loads of time. Only issues I find is that at end script still waits, that is same with copy of your script too. I have tried on Python 3.7 and 3.6 with same result, tried multiple options but so far not found solution. Task finishes, but does not return to prompt.",True
@adityachitrigemath762,2018-12-21T08:48:38Z,0,Are threads useful in python even when GIL is present? Does it have any other uses other than I/O bound application.,True
@yuqingwang3593,2018-12-16T04:38:41Z,0,"I think doing time.sleep() isn't quite good for performance illustration of threading. Because Python (Cpython) has GIL which will be released when time.sleep() is called,  so the sleep work can be done concurrently and the performance is surely better than running one thread. However,  in most job cases, the operations in exampleJob() will not release GIL, which means only one thread can have the GIL and running at one time. So the performance won't be improved much (or maybe decreased) when using multi-threading. Just replace 'time.sleep(.5)' with 'a = sum([x for _ in range(100000)])' and have a comparison between the run time of multi-threading and one-threading.",True
@CoralsAustralia,2018-12-13T06:50:54Z,0,i dont get it man,True
@azeer1988,2018-12-12T01:55:38Z,1,"I think that 'worker' term is confusing a bit, i'd rather call it 'job', and call the thread a worker, to explain this i modified the script and added comments:  import threading from queue import Queue import time  print_lock = threading.Lock()  # the job(function) to be executed  def doJob(job):  time.sleep(0.5)   with print_lock:   print(threading.current_thread().name,job)  # this function gets a ""job"" from the queue and executes it in a thread(worker) and at # the end tells the queue that this job is done in order to get released form the queue, when a # worker is done, it takes the next job in the queue in case there is any thus the 'while True' def threader():  while True:   job = q.get()   doJob(job)   q.task_done()  # create a queue q = Queue()  # put jobs in the the queue for job_num in range(20):  q.put(""job "" + str(job_num))  # note starting time start = time.time()  # now make 10 threads(workers) which will run the function threader() in parallel for worker in range(10):  t = threading.Thread(target = threader)  t.daemon = True  t.start()  # this blocks until all jobs in the queue are executed q.join()  print('entire job took: ',time.time()-start)",True
@lucajaich,2018-11-23T23:25:38Z,1,"omg this guy has a tutorial for everything, i love him",True
@about2mount,2018-10-23T22:33:37Z,0,Another example of a thread is a browser. It runs one thread and its processes in one tab for one processed thread with many queue's. When you open another tab it begins another active thread with its processes also in queue. And at times one thread process may need to work with another process. To do this we have to use a Queue Lock in that thread to grab a variable from another thread. Example of these are passing a variable or objects from one too the other behind the scenes. Example of this is when t5he main browser program on one thread the user may close one tab then close the second. Means both of those tab threads of web-pages are linked to the main browser program and can be killed by it through using variables Queue locked in their respective threads to do so.,True
@about2mount,2018-10-23T22:15:05Z,0,"He is explaining how it works basically.  And it is much simpler than how he is trying to explain it. Better would be a Loop while running a Tkinter process. The program runs and holds its visible objects in a Queue or in a lock on a time in the loop. Because the loop starts at the top and works down from top to bottom at 32 to 64 million iterations per second repeating itself from top to bottom of the program. Everything could not be viewed at that speed without a lock/queue on a time in it;s Thread.  And when a function or process needs to work another thread outside of itself is essentially a separate loop and interacting with the first loop. Example is when Tkinter uses Top Window Widgets. These run in a separate Thread for each new window, these also holding on a set Queue/time. Images in these Queue cant hold themselves in Queue without re-assigning their variable to itself in the Thread. image=image.",True
@ElizabethFrazier,2018-09-15T14:57:06Z,0,"Hi, I'm trying to understand the terminating condition. You said that once the worker is done, it is put back in the queue to it can do more work. However based o the program output each worker only performs the job once, which tells me that they are not going back into the queue. Since threader is an infinite loop, how does the program know to break out of it once the queue is empty or there are no more unfinished tasks?",True
@mdzubayerrahman7710,2018-09-14T08:13:44Z,8,"This is ""The Most Complex Video on Threading"" I've ever seen!",True
@psyience3213,2018-08-19T16:06:22Z,0,"task_done() confused me until i looked it up. it would have helped to explain that it's a synchronized class and is meant to work with threads using put() and get(). I was wondering why you didn't have to lock the Queue as you were calling get(), as an asynchronise get() would have crashed.  Queue.task_done() Indicate that a formerly enqueued task is complete. Used by queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete.  If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue).  Raises a ValueError if called more times than there were items placed in the queue.",True
@zamsalak,2018-08-17T13:53:35Z,0,"I think this is one of your least comprehensive tutorials. Thanks, though. **Types 'bucky threading' in search**",True
@markd964,2018-08-12T03:03:05Z,0,"Good video of complex topic for beginner, but also good explanation by Refaeli below. This code makes more sense to me to think of 'worker' as workjobs needing to be done (as there are 20 of these jobs), and 't' as threads (or actual workers,  10 of these, who can do the jobs which require to be done). Interestingly,  running and then re-running this code in jupyter does not reset my 'thread' ID numbers (threading.current_thread().name) to 0-9, but increments range by 10 on each re-run (0-9, then, 10-19, then 20-29...) Great series Sentdex - thanks",True
@renovatiovr,2018-08-10T01:12:11Z,0,The do that that and do that. Seems like you yourself are training an army of workers in real life without explaining the core mechanics of threading and why the fuck you are actually doing those things.,True
@jamiemarshall8284,2018-08-06T22:14:28Z,0,"Be warned, you've got the meaning of daemon backwards.  Daemon threads do not die with the main thread and run even if your main execution has quit - https://docs.python.org/3/library/threading.html#threading.Thread.daemon",True
@12350752,2018-07-15T08:53:05Z,0,"From my experience of python coding, this is probably the most confusing way of explaining threads you could have picked. Start simple then build on it, some of the people watching your videos have no programming experience. Just a suggestion, your first few videos are really well explained and simple to follow, then here we jump onto the space shuttle haha.",True
@vishalgupta9620,2018-07-13T13:26:47Z,0,Why do we have the For worker in range is (20) function after the threading function()  if it is used to initialise the queue shouldn't it be before threading function  Plzzz explain,True
@eurofnac-4238,2018-07-08T06:55:33Z,0,how to run 2 functions simultaneously?,True
@AkashCool004,2018-06-16T06:02:25Z,0,hello sir..im working on a project and getting an error while using threading as (AssertionError: group argument must be None for now)..how can we remove it... please help,True
@AKagNA,2018-06-11T10:41:48Z,0,It is first the time i understood nothing from a tutorial. Sorry but dislike mate :D,True
@Snout007,2018-06-02T20:19:39Z,0,Doesn't work I even tried copy pasting your code from your website. ehh :(,True
@theoutstander,2018-06-01T23:03:56Z,0,Why is there a lock for the print function but not for examyJob? Does print reference global variables or something?,True
@mandlakrishna6444,2018-04-19T18:29:23Z,0,Can't understanding...can u teach slowly...,True
@abhishekanand3285,2018-04-10T20:05:47Z,0,for Worker in range(29):     ^ IndentationError: unexpected indent,True
@kelvin13230,2018-04-02T18:30:18Z,0,"Quite good explanation but you used ""worker"" and ""job"" interchangeably which makes it a little confusing",True
@jeSuisLeChef1,2018-03-07T17:22:06Z,0,"Hey, are the local variable concerned by the problem of two threads modifying the same variable?",True
@youbanaitbelaid681,2018-03-03T06:32:22Z,0,"I think that variable ""worker"" is misleading here; ""work"" or ""job"" would have been more suitable and less confusing. Great video though!!",True
@epiphone908,2018-02-24T04:18:31Z,0,"What exactly causes the main thread to die in this case?  I thought there were 10 threads, so which one is the main thread?",True
@janistihonovs2534,2018-02-07T14:19:44Z,0,"I'm just curious isn't ""worker"" actually a ""job instance"" that is put in the queue. Thread looks like a ""worker"" to me in this code. I know  its just naming but it kinda confused me. Great video regardless.",True
@robomextv,2018-01-27T08:16:49Z,0,explained it clearly.....loved it. Thanks a lot,True
@NikeshBajaj,2018-01-27T07:22:20Z,0,"Is there way to use threading in tkinter GUI, I am trying it without using queue, as I just need one thing keep going on, where as all the buttons and Entry widgets are left active, which changes the some variables which effects the on going function. I am keep getting error. Is there any python3 tkinter gui, example code which can help me doing it? Thanks",True
@hudsondaniel3539,2018-01-26T05:10:07Z,0,Plz increase Ur voice,True
@ayushshrivastava5663,2018-01-25T04:26:05Z,0,Error-Idle  internal error in code,True
@thetruth45678,2018-01-16T18:14:50Z,0,"import threading threading.Thread(target = any_function, args = (your, arguments, here),                                 daemon = True).start()",True
@onlybrad8434,2017-12-18T04:42:18Z,1,"this code makes no sense until I've read the documentation of Queue:  Queue.get([block[, timeout]]) Remove and return an item from the queue. If optional args block is true and timeout is None (the default), block if necessary until an item is available [...]  Since you started the threads before actually putting anything in the queue, the .get() should have returned no values because it was initially empty. .get() will actually wait a little bit if the queue is empty before returning any value.  I think mentioning that would have removed all confusion from this code",True
@MrFedX,2017-10-28T13:58:17Z,0,Great tutorial! I´m glad you mention concurrency issues. I guess that´s what´s causing most headaches. Now I´ll try to do some threading and the get into functional programming... :),True
@zebraxlj,2017-10-27T02:39:17Z,0,I was worrying about the thread safety with queue till I find out that Queue is a synchronized class.,True
@haydensmith950,2017-10-16T21:54:45Z,0,"Hey sentdex, I have this problem with parallel programming, I am trying to make a raspberry pi light up while being able to control the thread at any time. I'm so close and this video helped a lot.",True
@davincerica7232,2017-09-19T04:36:58Z,0,"import argparse, socket,calendar   def server(interface, port):     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # stvori TCP spojnicu     sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # postavi opcije spojnice     sock.bind((interface, port)) # povezi spojnicu s mreznim suceljem     sock.listen(1)   # osluskuj klijente u redu cekanja velicine 1     sc, sockname = sock.accept()     while True:         message = sc.recv(2046)         message = message.decode()         message = message.split()         if message[0] == ""\isLeap"":             if calendar.isleap(int(message[1])):                 answer = message[1] + "" je prijestupna""             else:                 answer = message[1] + "" nije prijestupna""         if message[0] == ""\\nearLeap"":             a = int(message[1])             b = 0             i = 0             while True:                 if calendar.isleap(a + i):                     b = 1                     break                 if calendar.isleap(a-i):                     b = 2                     break                 i += 1             if b == 1:                 a += i             else:                 a -= i             answer = str(a) + "" je najbliza prijestupna""         if message[0] == ""\exit"":             sc.sendall(message[0].encode())             break         sc.sendall(answer.encode())     sc.close()  def client(host, port):     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # stvori TCP spojnicu     sock.connect((host, port))  # povezi se s posluziteljem     while True:         msg = input('>>')         sock.sendall(msg.encode())         reply = sock.recv(2046).decode()         if reply == ""\exit"":             break         print(reply)     sock.close()  if __name__ == '__main__':     choices = {'client': client, 'server': server}     parser = argparse.ArgumentParser(description='Salji i primaj preko TCP')     parser.add_argument('role', choices=choices, help='mrezna uloga')     parser.add_argument('host', help='domacin na kojem posluzitelj ceka poruke;'                         ' odnosno klijent salje poruke')     parser.add_argument('-p', metavar='PORT', type=int, default=1060,                         help='TCP port (pretpostavljeno 1060)')     args = parser.parse_args()     function = choices[args.role]     function(args.host, args.p)          [""\\isLeap"",""1990""]",True
@davincerica7232,2017-09-19T04:36:41Z,0,"from socket import * import sys from random import randint  host = '' port = 3210  s = socket(AF_INET,SOCK_STREAM) s.bind((host,port)) s.listen(1)  n = int(sys.argv[1]) a = randint(1,n) b = randint(1,n) odgovor = 1 bomba = (a,b) print ('Bomba je postavljena na ',bomba,'')  client_sock, client_adr = s.accept() print ('Klijent ',client_adr,' se spojio na FIND_BOMB')  while True:   # zapirmi poruku    encodedMessage = client_sock.recv(1024)   #print (""Od klijenta: "",encodedMessage)   message = encodedMessage.decode('UTF-8')   #print (""Od klijenta dekodirano: "", message)    if message=="""":     break    pokusaj = eval(message)   print (pokusaj)   c = pokusaj[0]   d = pokusaj[1]    pokusaj = (c,d)   # promijeni poruku   if (pokusaj)!=bomba:     print (""Klijent je poslao "",message)     odgovor+=1      if c==a: k = "" ""     else:        if c<a: k = ""DESNO""        else: k = ""LIJEVO""       if d==b: j="" ""     else:         if d<b: j=""GORE""         else: j=""DOLJE""      response = str(k)+str(' ')+str(j)     #print (""Response: "", response)     client_sock.send(response.encode())   else:     print (""Klijent je poslao "",message,"" i otkrio lokaciju! Kraj."")     result = ""Bingo""     client_sock.send(result.encode('UTF-8'))     break  s.close()",True
@davincerica7232,2017-09-19T04:36:23Z,0,"import socket   host = '127.0.0.1' port = 3210  client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM) client_socket.connect((host,port)) print ('Spojeni ste na FIND_BOMB') odgovor=1 print ('Kratke upute : unosite brojeve u uredjenim parovima u obliku (a,b) ili a,b. Sretno 🙂 ') gameOver = False while gameOver != True:     poruka = input('>> ')     #print (""Od usera: "",poruka)     encodedMessage = poruka.encode('UTF-8','strict')     #print (""Od usera encoded: "", encodedMessage)     client_socket.send(encodedMessage)     # zaprimi poruku     odgovor_servera = client_socket.recv(1024)     #print (""Odgovor servera kodiran: "",odgovor_servera)     decodedResponse = odgovor_servera.decode('UTF-8')     #print (""Odgovor servera dekodiran: "", decodedResponse)      if decodedResponse!='Bingo':         print (decodedResponse)         odgovor = odgovor + 1     else:          print ('Bravo,pogodili ste lokaciju bombe iz ',odgovor,'. pokusaja!')          gameOver = True   client_socket.close()",True
@davincerica7232,2017-09-19T04:35:33Z,0,"from socket import * import sys from random import randint  host = '' port = 3210  s = socket(AF_INET,SOCK_STREAM) s.bind((host,port)) s.listen(1)  n = int(sys.argv[1]) m = int(sys.argv[2]) broj = randint(n,m) odgovor = 1 print ('Sretan bingo broj je ',broj,'')  client_sock, client_adr = s.accept() print ('Klijent ',client_adr,' se spojio na BINGO')  while True:   # zapirmi poruku    encodedMessage = client_sock.recv(1024)   #print (""Od klijenta: "",encodedMessage)   message = encodedMessage.decode('UTF-8')   #print (""Od klijenta dekodirano: "", message)      if message=="""":     break      pokusaj = eval(message)   print (pokusaj)      # promijeni poruku   if (pokusaj)!=broj:     print (""Klijent je poslao "",message)     odgovor+=1       response = str('To nije trazeni broj, pokusaj ponovno')     #print (""Response: "", response)     client_sock.send(response.encode())   else:     print (""Klijent je poslao "",message,"" i otkrio sretan broj! Kraj."")     result = ""Bingo""     client_sock.send(result.encode('UTF-8'))     break  s.close()",True
@davincerica7232,2017-09-19T04:35:10Z,0,"import socket   host = '127.0.0.1' port = 3210  client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM) client_socket.connect((host,port)) print ('Spojeni ste na BINGO') odgovor=1 print ('Kratke upute : unosite broj . Sretno :) ') gameOver = False while gameOver != True:     poruka = input('>> ')     #print (""Od usera: "",poruka)     encodedMessage = poruka.encode('UTF-8','strict')     #print (""Od usera encoded: "", encodedMessage)     client_socket.send(encodedMessage)     # zaprimi poruku     odgovor_servera = client_socket.recv(1024)     #print (""Odgovor servera kodiran: "",odgovor_servera)     decodedResponse = odgovor_servera.decode('UTF-8')     #print (""Odgovor servera dekodiran: "", decodedResponse)      if decodedResponse!='Bingo':         print (decodedResponse)         odgovor = odgovor + 1     else:          print ('Bravo,pogodili ste bingo broj iz ',odgovor,'. pokusaja!')          gameOver = True   client_socket.close()",True
@tiagovla,2017-09-18T01:14:39Z,0,"One thing that makes no sense to me is that if I have 1 CPU and I create 2 threads of 0.5s sleep, to me it should still take 1s. Or even a little more, sinse it will be switching from one process to the other. Does threading use other cores? Or just with multiprocessing?",True
@ApplySkills,2017-09-05T02:38:54Z,0,i got lost at from queue import queue,True
@servantofourlordjesuschris6456,2017-08-12T07:46:39Z,0,Is threading also used to do things at the same time? Ex: you  created a server or something like a chat room. then you add threading in it so that you don't have to input something in order to hear the clients words. when all you do is line by line.              client <--------> input() <-----------> Server    you get it? the threading is like doing its own thing in a other function called receive.  while you are doing the input and the sending. I also want to tell you that you are doing a good job creating videos. It must take a lot of practice talking out in public like that. I want to see you do a basic series on c ++ and java. Well you can do one of them that would be fine . I think the job of a computer programmer is not only to talk to computers using  one language but to  learn as much as you possibly can.,True
@pengli3642,2017-08-09T23:37:45Z,24,"I renamed the variables to let everyone understand the code better.  ==== import threading import time from queue import Queue  print_lock = threading.Lock()  def worker(job):     time.sleep(0.5)     with print_lock:         print(threading.current_thread().name,'Task'+str(job))  def worker_thread():     while True:         job=q.get()         worker(job)         q.task_done()  q = Queue()  num_jobs=10 num_workers=20  for wk in range(num_workers):     t = threading.Thread(target = worker_thread)     t.name='Worker-'+str(wk)     t.daemon =True     t.start()  start=time.time()  for job in range(num_jobs):     q.put(job)  q.join()  print('Entire job took:', time.time()-start) ===  When num_jobs=10, num_workers=20, the code outputs >>> Worker-2 Task1 Worker-7 Task7 Worker-3 Task3 Worker-1 Task0 Worker-5 Task4 Worker-9 Task8 Worker-4 Task5 Worker-0 Task2 Worker-6 Task6 Worker-8 Task9 Entire job took: 0.5330305099487305  When num_jobs=20,  num_workers=10, we get >>> Worker-4 Task2 Worker-8 Task8 Worker-6 Task5 Worker-5 Task6 Worker-7 Task7 Worker-1 Task3 Worker-9 Task9 Worker-0 Task0 Worker-2 Task4 Worker-3 Task1 Worker-4 Task10 Worker-8 Task11 Worker-6 Task12 Worker-5 Task13 Worker-7 Task14 Worker-1 Task15 Worker-9 Task16 Worker-0 Task17 Worker-2 Task18 Worker-3 Task19 Entire job took: 1.0650608539581299  Make sense?",True
@arula10101,2017-08-03T18:31:02Z,0,hi Harrison! Do you have more tutorials on threading? thanks!,True
@mafiaboy16,2017-07-25T17:52:17Z,0,"Hi, by channing the amount of workers and the amount of threading the program becomes faster:  for x in range(80):     t =threading.Thread(target = threader)     t.daemon = True     t.start()  for worker in range(1):     q.put(worker)  by making the first rage bigger and the range worker smaller  that i don't know why.  please explane  Ronny Charles",True
@polyspastos,2017-07-16T17:31:01Z,0,So far I'd say I understood everything fairly well. This video is Chinese from the getgo. Maybe this helps.,True
@hantookoyakk8048,2017-07-05T10:17:15Z,1,"welp, u are handsome xD",True
@vaibhavsingh1049,2017-06-01T13:02:07Z,2,semantically should'nt you put something in the queue first before q.get()  In the code: for worker in range(20):     q.put(worker)  Should be before:  for x in range(10):     t = threading.Thread(target=threader)     t.daemon = True     t.start(),True
@robinhellsten8903,2017-05-18T17:57:01Z,0,"Great video, but new to thread/queue, so a I'm little confused.  In the example, the function ""exampleJob()"" was being executed 20 times. What if I have 3 different functions I want to execute instead of the same function over and over.   making a list doesn't seem to work....  -------------------------------------- class AwesomeClass:      def request_google(self, query, worker):         pass  # Some other functions, snipped      my_functions = [""request_google"", ""request_youtube"", ""request_facebook""]     for each_function in my_functions:         worker = self.q.get         each_function(worker)                 <--- string not callable  --------------------------------------  My functions have a few prints, a GET-request and so on.  I want to fire all functions(hence also the requests) at once, and the print the whole output at once.  For example, a function might print ""This is google"", do the request, parse the results, and then print the parsed data. So I don't only want a print lock, but more or less a lock on the whole function so it doesn't print ""this is google"", and the loose the lock and print the parsed youtube page.  If i put everything after print_lock, it basically locks everything, hence making the threading useless right? def locked_func():     with print_lock:         #The rest of the function  Sorry for long post, any ideas would be of great value :)",True
@ramprashathmba6225,2017-05-12T01:50:29Z,0,Is threading and Map Reduce in Python is similar ?,True
@stijn1113,2017-04-27T13:34:02Z,0,Can I also use this to run a clock and the program itself at the same time?,True
@adityachawla2163,2017-04-24T07:14:32Z,0,threading seems powerful but I don't really understand how it works from just this much info,True
@masteroziniii2486,2017-04-23T19:16:23Z,0,I got this Error AttributeError: 'Queue' object has no attribute 'task_done',True
@nagarjuncs4000,2017-04-11T01:50:51Z,0,can you please explain how to use variables declared in one thread in an another thread?? i.e sharing common variables between two separate threads,True
@FranciscoLopez-ox5pe,2017-03-20T17:25:24Z,0,"First of all, thank you for your work and apologyze for not to be fluent in english  I have a question: it's possible do the same in nested loops?.  For example:  import threading from queue import Queue import time  print_lock = threading.Lock()  def make_this(month, day):     with print_lock:         print (month, day)  def threader():     while True:         month = q.get()         for day in range(0,31):             make_this(month, day)         q.task_done()  q = Queue()  for x in range(12):     t = threading.Thread (target = threader)     t.daemon = True     t.start()  start = time.time()  for month in range(0,12):     q.put(month)  q.join()  print('Entire job took:', time.time()-start)  With this, i can get threading month, but not days. I have tried change the variable in the last sentence for day and only get a list of days and not a list of days inside months. I have tried too, to made (erasen the sentence ""for"" in threader):  def threader():     while True:         month = q.get()         make_this(month, day)         q.task_done()   for month in range(0,12):       for day in range(0,30)             q.put (month)  And the final result is the list of month fixing 30 in each day; In case you use the variable day instead month the result is a fixed month with the 30 days.  I apreciate very much your videos. Thanks a lot",True
@alengm,2017-03-12T06:03:23Z,0,queouioui,True
@deeraj69,2017-03-09T08:30:48Z,2,"Understood most of it except, not quite sure how are we able to reference the variable worker if we are only putting it in the queue right at the end of the script.",True
@Davisurena,2017-02-03T17:04:44Z,1,"Thanks for the tutorial sentdex, however; I find this particular video either very abstract or I'm not ready for this session. I'm trying to avoid my tkinter window freeze while performing a (not so trivial) process that takes about 5 minutes to process; I wonder how I can apply this concept to my application.   Thanks again for your series and the time you put to upload and explain python.",True
@zman350x,2017-01-10T15:58:50Z,9,i just want one loop running forever in the background while my main script is running normally? any really simple answers?,True
@mynameisZhenyaArt_,2017-01-06T08:41:17Z,0,"Why didn't you start your explanation of your code from an entry point? (if we don't count q and print_lock initialization, then - for x in range(10): )",True
@chenjing8043,2016-12-26T12:01:18Z,2,love you man! (I'm from Shanghai!),True
@sagarbhamare6997,2016-12-20T08:29:31Z,23,"How some one can dislike this video, he is sharing knowledge it's up to listener to get it or leave it.",True
@markuskosters4301,2016-12-16T12:37:19Z,0,"why can you save all the threads in ""t"" isnt that like declining t 10 times another function?",True
@howzeman,2016-12-11T18:28:16Z,0,"I was wondering why you don't have to lock queue. Answer: ""The Queue class in this module implements all the required locking semantics."" (http://docs.python.org/library/queue.html)",True
@AJG6150,2016-11-26T22:51:21Z,1,"How can we create those threads that use workers off the q (in the for loop with 10 iterations), when the for loop that actually puts workers on the q in the first place occurs afterwards?",True
@adrianmxmx,2016-11-26T08:27:24Z,0,"Thank you for your time. I've used this awhile ago to multi-thread many ssh connections to routers, which has saved a ton of time!!",True
@augustorigobertomoreirafra9741,2016-11-05T16:27:05Z,17,"Hi Sentdex, do you have na pratical example with threads and tkinter? I am struggling with that.",True
@JonnyHuman,2016-10-23T16:52:27Z,0,What's the best method for RETURNING values from (as in the tutorial) the exampleJob() function?,True
@KapilMarwaha,2016-10-23T12:16:35Z,11,print_lock = threading.Lock() AttributeError: module 'threading' has no attribute 'Lock',True
,2016-10-14T19:31:04Z,0,"this technique represents simd computation. opencl makes automaticly simd on cpu,gpu,fpgas,dsp cards and any others.",True
@khushbuparakh496,2016-10-09T14:04:40Z,0,this is really helpful for me even after an year of this video,True
@IIIWhiteBoyIII,2016-10-01T19:26:16Z,11,Also make sure you don't name your script threading.py lol,True
@danfan6343,2016-10-01T16:02:00Z,0,"I understand the code to do the threading, but for my purposes, I need to assign the ""workers"" completely separate jobs, how do I do this?",True
@quarkpol,2016-08-24T23:26:18Z,1,"Great tutorial, but I can't understand what makes the while loop in threader() function stop? Does q.task_done() terminates a whole thread If quene q is empty?",True
@billwhite1454,2016-07-03T16:13:19Z,0,have you done any python hacking videos,True
@AkarshKonchada,2016-06-25T19:32:51Z,2,"If the threads are declared daemon's and the target function is on a infinite loop, doesn't it make the thread kept running in the background with no tasks to take up ?",True
@roeyy7148,2016-06-14T15:42:57Z,1,"hey man, im trying to connect 2 clients to start into 1 server in the same time. i tried to learn thread but i dont really understand that. can you tell me how can i do what i need?",True
@GagandeepSingh-id5cq,2016-06-14T12:43:36Z,0,"at what point does a thread actually start executing in the above code ? is it at t.start () ? If so, at that point, shouldn't the queue be empty, because q.put hasn't been done yet.",True
@pwnweb5734,2016-06-10T22:24:03Z,0,"ok, you created threads 10 threads and executed function. function have worker.q.get()// now at this moment how do 'q' have  items, bcz u have inserted items in q after creating threads",True
@gyan2664,2016-05-27T12:51:49Z,25,everything went top of my head,True
@RealMcDudu,2016-05-08T22:22:25Z,219,"I think this video is a bit confusing because it mixes 2 different topics: ""threading"", and ""queue"".   As I understand, queue is not so relevant here, since it's only used to number the different threads, and kind of ""indexing"" them.  The important things to take out of this video (threading-wise) is, IMO (disclaimer: I'm not an expert), this:  # t = threading.Thread(target=threader)  # t.start() this creates different threads and tell them to execute a command called ""threader"" (confusing name, but he could have called it ""banana""), and puts it in an object called t. But first, you have to start the thread by using the <thread object>.start() command   Since this runs on a loop 10 times - it means 10 different threads are created and are executing ""threader""/""banana"" - command (and this is the important part) simultaneously! (!!!) Meaning, the 2nd loop thread does not wait until the first loop thread finishes before it executes - it runs off to do the command side by side.   # t.daemon = True  is defining the thread as a daemon, meaning it is not the main thread. I don't see the significance of that in this program, and maybe you can take it off.   Now what does the threader command/function do? First - it gives the thread an index from 0-19, and then it tells him to do exampleJob, which is just to wait 1/2 a second, and print the thread name, and the index.   # print_lock = threading.Lock() # with print_lock: ... print...  are used to lock the other threads from stepping on each other while printing. Meaning - if thread #9 is now printing, all the other threads that currently arrived at this command have to wait until it finishes.   So you will get printed a random arrangement of the 10 different threads names, and the ""index"" they were executing. Each thread will get 2 ""indexes"", resulting in 20 instances of the printed command.    [[[ This (above) is the important code for threading. Down below is using the queue code ]]]  Why 2? Why 20?  # for worker in range(20): #    q.put(worker) the reason it will happen 20 times, is because there are 20 ""indexes"" being sent to the threading/banana command, and-  # worker = q.get()  # exampleJob(worker) -  the ten threads created are reaching here basically at the same time, are assigned an ""index"", and execute exampleJob with that index (here ""worker"" is actually a new local variable, that gets the other ""worker"" variable out of the main code, again a bit confusing, but he could have called it a different name). This is looped until-  # q.task_done() # q.join() -all the ""indexes"" are ""returned"".   Then the program continues to its last command (print...) and finishes. Since there are 20 ""indexes"", there will be 20 times exampleJob will be executed, but since there are 10 threads, they will do simultaneously the first 10 exampleJob, come back and do the second 10 exampleJob (this is why, ""index""-wise, the first 10 indexes will always be 0-9, and the last 10 indexes will always be 10-19).   Since every time the 10 threads execute exampleJob they have to wait 1/2 a second, and they do this twice, the whole thing takes around 1 second, in total.",True
,2016-04-04T11:54:34Z,0,"Hello, I can't understand why my code crushes. I wrote this code (https://anaconda.org/Yahuda/threadingtest/notebook) by following your tutorial and I get less output than I expected. list_items.txt is 512 lines of 'a0, b0; a0, b1, a0, b2' etc. So my output should have 512 lines of 'Thread-6 b1 @ a0, done'.  I started to try with 30 threads, then 10, then 5 but it still crushes. I even tried on different machines, different python versions. Can you please help me why I only get about 210 lines of output?",True
@Polish95Hero,2016-04-03T12:45:46Z,0,Why aren't you locking the Queue? Is it doing it automatically?,True
@nitinmutt1036,2016-03-20T04:45:52Z,0,how to pass two or more parameters by using above describe method. i am very new to python this may be very simple query plz help me in solving this. tq,True
@NarendraDehury,2016-03-02T04:26:03Z,0,"q.task_done(): where is task_done() defined, buddy ?",True
@stairdle9594,2016-02-29T21:03:14Z,0,"Hi, I don´t understand :-(  Can you show me on my example?   from tkinter import * import time   def button_action1():         text1.insert(END, 'Thread one ')              time.sleep(2)         text1.insert(END, 'Thread two')      root = Tk() text1 = Text(root, height=20, width=30) text1.pack()  change_button = Button(root, text=""test"", command=button_action1) change_button.pack()       root.mainloop()",True
@pinkalpatel947,2016-02-07T23:08:26Z,9,can you explain threading with socket running two different file client.py and server.py in one machine ?,True
@user-pk3ti4es9k,2016-02-05T17:13:13Z,0,"Love it man, thanks..",True
@Freedster,2016-01-27T01:13:39Z,1,"The job took 2 seconds for me. What did I do wrong? I looked through the video again, I couldn't find the error. import threading from queue import Queue import time  print_lock = threading.Lock()  def exampleJob(worker):     time.sleep(0.5)      with print_lock:         print(threading.current_thread().name, worker)  def threader():     while True:         worker = q.get()         exampleJob(worker)         q.task_done()   q = Queue()  for x in range(10):     t = threading.Thread(target = threader)     t.daemon = True     t.start()      start = time.time()  for worker in range(20):     q.put(worker)  q.join()  print('Entire job took:',time.time() -start)",True
@aperyon1990,2015-11-06T20:06:21Z,0,"Hey there! I find threading not confusing or complicated to understand yet hard to understand propery. You said, we have 10 workers ie threads yet for worker in range(20): not for task in range(20). Other thing i dont find out how it works how is the same worker applied to an other job after finished? how come after the thread finishes its first task doesnt stand idle but wait for a new job to do",True
@malcolmjohn9490,2015-09-24T19:54:36Z,0,"great videos, I'm new to python 3 programming so your tutorials are just the ticket! How can I get the source code for all of your tutorials?  Keep up the good work :O)",True
@Neceros,2015-07-23T23:45:46Z,0,"This is very new to me, threading, so I need some assistance.  If all I need to do is start up a function with one thread that constantly runs and spits out data for my interface to pickup and use, and then send data back into the function (maybe a generator would be best here?)  I feel pretty confident in my scripting ability, but now we're getting into the real mechanic stuff. My mind can't get a grasp on what is required and what is extra, to show off the project.   Basically, should I run my main loop in a single thread and just interface with it with Queue, or build a generator?",True
@mathsforever9264,2015-07-22T22:51:22Z,0,how do I get python to open a certain amount of threads at a time. By that I mean if I attempt to open 600 threads at a time python tells me it cannot open all threads at once so I want to open 30 threads at a time.,True
@SamsWebDev,2015-07-18T22:24:33Z,0,"Love your videos! A bit confused on this example though. What causes the while loop to terminate in the `threader` function? It is an infinite loop, so what causes it to break out?",True
@halcyonramirez6469,2015-07-05T05:27:50Z,0,tnx for your awesome vids man hope you will never stop making em!  btw what does threading.lock() do?,True
@usuman,2015-05-27T04:54:39Z,5,good video but just a little bit confusing in some parts,True
@NetPwn,2015-05-19T16:32:25Z,0,Another great tutorial ! Skittles!,True
@tamert13,2015-05-11T07:48:48Z,0,"how i am ""pygame.image.save"" function is parallel ? because very slow record ...",True
@spider93286,2015-05-10T06:56:46Z,0,Thanks for making these videos :),True
@fredyharter6293,2015-03-30T21:28:48Z,0,"Hello Harrison! I understand the aim of threading, looks very useful, yet I still have a little question about it:  What makes the link between the Threads t and the Queue q?  I see the "" q.put(worker) "" statement putting a task number on the queue and the "" worker = q.get() "" statement getting this number, but no reference to the Threads t are done. Why are these Threads t (the 'daemons') running? Is it because of the argument assignement ""target = threader""?  And would they run if I was calling the threader() function from another script? Imagining I import the module of this tutorial and call the threader function on a list of values. Will the threads run minimizing the processing time again, as in the video?  Thanks a lot, Happy Easter!",True
@truthadjustr,2015-02-06T18:24:57Z,0,"something is not right in this code. I'm still checking exactly what that is. To begin with, you waited on the queue object instead of the threads. Secondly, you did not clearly explain how the lock acquire() and release() happen. I can already estimate your depth here.. as i've been doing posix pthreads in C for many years, and now I'm learning how python does it. I'm thankful for all your videos, especially on Flask/Highcharts stuff. But please keep your explanations solid and tighten up loose ends. Otherwise, you will lose one fan here. I will post next my findings .. because my code here is not running ok it is hanging...",True
@newnewdaniel,2015-01-02T05:01:56Z,0,"Quick question, what is run first when the Python script is executed?  Is it the 'for worker' control block or the 'for x in range' control block?",True
@karryliu186,2014-12-31T17:43:06Z,0,good video. Very useful,True
@varun46v123,2014-11-10T04:37:01Z,2,"Hey Harrison ,       print_lock = threading.Lock AttributeError: 'module' object has no attribute 'Lock'  Please help me out  Thanks ",True
@MrSmartass42,2014-08-21T23:14:03Z,0,"Honestly: WTF. From your website:  ># how many threads are we going to allow for >for x in range(10):  ># 20 jobs assigned. >for worker in range(20): >    q.put(worker)  ># with 10 workers and 20 tasks  No. You defined 10 x or t or threads, 20 workers and tasks (jobs?) are something you only mention in the comment. What's even going on?  I wanted to understand threading but I can't even read your code if you don't keep naming consistent.",True
@mahbubahmed7,2014-07-31T20:55:34Z,1,"Hi, thank you for your wonderful tutorials. Could you please make a tutorial on how to create a simple database (CRUD) based desktop application using Python 3 ? It would be really helpful ! Thanks :)",True
