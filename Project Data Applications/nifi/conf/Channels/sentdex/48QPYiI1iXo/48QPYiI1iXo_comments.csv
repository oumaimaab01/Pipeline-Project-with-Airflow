author,updated_at,like_count,text,public
@jleal666,2024-01-27T02:01:10Z,0,Why if the condition to end the game is not the number of wagers but the profit/lost. I mean: You end the game if lose 1/3 (parametrer for this) of the value and end the game if you double (parameter for this) the money. Every day the gambler do this . After a year it will be a winner strategy?,True
@porlando12,2017-01-04T02:58:14Z,2,"Awesome video! This tutorial has been a lot of fun so far. Unfortunately I am running into a memory error when trying to determine winning multiples. Even after reducing our sample size down from 100000 to 1000 this is still the case.   How long did it take for you to determine the winners shown in this video with your desktop? I'm currently running a laptop with an i5 and 4GB RAM. I'm going to try this script on my lab's computer tomorrow. That one has 32GB memory and a Xeon processor!\  I am really starting to get the hang of python, thanks for the engaging series!",True
@userrussia9718,2015-09-02T22:11:43Z,4,"import random import matplotlib import matplotlib.pyplot as plt import time  lower_bust = 31.235 higher_profit = 63.208  sampleSize = 100  startingFunds = 10000 wagerSize = 100 wagerCount = 100  def rollDice():     roll = random.randint(1,100)      if roll == 100:         #print roll,'roll was 100, you lose. What are tho edds?! Play again!'         return False     elif roll <= 50:         #print roll, 'roll was 1-50, you lose. Play again!'         return False      elif 100 > roll >= 50:         #print roll, 'roll was 51-99, you win! * pretty lights flash* Play more!'         return True  def multiple_bettor(funds, initial_wager, wager_count):     global multiple_busts     global multiple_profits      value = funds     wager = initial_wager     wX = []     vY = []      currentWager = 1     previousWager = 'win'     previousWagerAmount = initial_wager      while currentWager <= wager_count:         if previousWager == 'win':             #print 'we won the last wager, great'             if rollDice():                 value+=wager                 #print value                 wX.append(currentWager)                 vY.append(value)             else:                 value -= wager                 previousWager = 'loss'                 #print value                 previousWagerAmount = wager                 wX.append(currentWager)                 vY.append(value)                 if value <= 0:                     #print 'we went broke after'.currentWager,'bets'                     multiple_busts += 1                     break          elif previousWager == 'loss':             #print 'we lost the last one, so we will be smart and double'             if rollDice():                 wager = previousWagerAmount * random_multiple                 if (value - wager) < 0:                     wager = value                 #print 'we won',wager                 value += wager                 #print value                 wager = initial_wager                 previousWager = 'win'                 wX.append(currentWager)                 vY.append(value)             else:                 wager = previousWagerAmount * random_multiple                 if (value - wager) < 0:                     wager = value                 #print 'we lost',wager                 value -= wager                 previousWagerAmount = wager                 wX.append(currentWager)                 vY.append(value)                 if value <= 0:                     #print 'we went broke after',currentWager,'bets'                     multiple_busts += 1                     break                  #print value                 previousWager = 'loss'          currentWager += 1      #print value     #plt.plot(wX,vY,color)     if value > funds:         multiple_profits += 1  def doubler_bettor(funds, initial_wager, wager_count, color):     value = funds     wager = initial_wager     global doubler_busts     global doubler_profits     wX = []     vY = []      currentWager = 1     previousWager = 'win'     previousWagerAmount = initial_wager      while currentWager <= wager_count:         if previousWager == 'win':             #print 'we won the last wager, great'             if rollDice():                 value+=wager                 #print value                 wX.append(currentWager)                 vY.append(value)             else:                 value -= wager                 previousWager = 'loss'                 #print value                 previousWagerAmount = wager                 wX.append(currentWager)                 vY.append(value)                 if value <= 0:                     #print 'we went broke after'.currentWager,'bets'                     doubler_busts += 1                     break          elif previousWager == 'loss':             #print 'we lost the last one, so we will be smart and double'             if rollDice():                 wager = previousWagerAmount * 2                  if (value - wager) < 0:                     wager = value                 #print 'we won',wager                 value += wager                 #print value                 wager = initial_wager                 previousWager = 'win'                 wX.append(currentWager)                 vY.append(value)             else:                 wager = previousWagerAmount * 2                 if (value - wager) < 0:                     wager = value                 #print 'we lost',wager                 value -= wager                 previousWagerAmount = wager                 wX.append(currentWager)                 vY.append(value)                 if value <= 0:                     #print 'we went broke after',currentWager,'bets'                     doubler_busts += 1                     break                  #print value                 previousWager = 'loss'          currentWager += 1      #print value     plt.plot(wX,vY,color)     if value > funds:         doubler_profits += 1  def simple_bettor(funds, initial_wager, wager_count, color):     global simple_busts     global simple_profits     value = funds     wager = initial_wager      wX = []     vY = []      currentWager = 1      while currentWager <= wager_count:         if rollDice():             value += wager             wX.append(currentWager)             vY.append(value)         else:             value -= wager             wX.append(currentWager)             vY.append(value)          currentWager += 1      if value <= 0:         value = 0         simple_busts+=1     #print 'Funds:', value      plt.plot(wX,vY,color)     if value > funds:         value = 0         simple_profits+=1      while True:     multiple_busts = 0.0     multiple_profits = 0.0      multipleSampSize = 100000     currentSample = 1      random_multiple = random.uniform(0.1,10.0)      while currentSample <= multipleSampSize:         multiple_bettor(startingFunds,wagerSize,wagerCount)         currentSample += 1      if ((multiple_busts/multipleSampSize)*100.00 < lower_bust) and ((multiple_profits/multipleSampSize)*100.00 > higher_profit):         print '############'         print 'Found a winner, the multiple was', random_multiple         print 'Lower bust to beat',lower_bust         print 'Higher profit rate to beat:', higher_profit         print 'bust rate:',(multiple_busts/multipleSampSize)*100.00         print 'Profit rate:',(multiple_profits/multipleSampSize)*100.00         print '############'      else:         pass         '''print '############'         print 'Found a loser, the multiple was', random_multiple         print 'Lower bust to beat',lower_bust         print 'Higher profit rate to beat:', higher_profit         print 'bust rate:',(multiple_busts/multipleSampSize)*100.00         print 'Profit rate:',(multiple_profits/multipleSampSize)*100.00         print '############'''",True
@cwgreenley,2014-08-26T18:01:49Z,1,"Shouldn't you be looking at the percent of survivors who profited, not the percent of total bettors?",True
