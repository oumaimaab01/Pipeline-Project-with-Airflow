author,updated_at,like_count,text,public
@ManulaAlahakoon,2024-03-11T10:52:49Z,0,"I came until the end . However , idle time is not reducing. Is that because I did not use sitemapindex struct to unmarshel ????????  ( I directly use News struct to unmarshal)   package main  import ( 	""encoding/xml"" 	""fmt"" 	""html/template"" 	""io"" 	""net/http"" 	""sync"" )  /* type Sitemapindex struct { 	Locations []string `xml:""url>loc""` } */  var wg sync.WaitGroup  type News struct { 	Titles    []string `xml:""url>news>title""` 	Dates     []string `xml:""url>news>publication_date""` 	Locations []string `xml:""url>loc""` }  type NewsMap struct { 	Date     string 	Location string }  type NewsAggPage struct { 	Title string 	News map[string]NewsMap }  func newsAggHandler(w http.ResponseWriter, r *http.Request) {  	news_map := make(map[string]NewsMap)  	channel := make(chan News, 1) 	wg.Add(1) 	go newsRoutine(channel) 	wg.Wait() 	close(channel)  	for elem := range channel { 	for idx, _ := range elem.Locations { 		news_map[elem.Titles[idx]] = NewsMap{elem.Dates[idx], elem.Locations[idx]} 		} 	} 		 	p := NewsAggPage{Title: ""News aggregator"", News: news_map} 	t, _ := template.ParseFiles(""basicTemplating.html"") 	t.Execute(w, p)  }  func indexHandler(w http.ResponseWriter, r *http.Request) { 	fmt.Fprintf(w, ""<h1>Let's go</h1>"") }  func newsRoutine(c chan News) { 	defer wg.Done() 	var n News 	resp, _ := http.Get(""https://www.washingtonpost.com/news-world-sitemap.xml"") 	bytes, _ := io.ReadAll(resp.Body) 	xml.Unmarshal(bytes, &n) 	resp.Body.Close()  	c <- n }  func main() { 	//var s Sitemapindex 	http.HandleFunc(""/"", indexHandler) 	http.HandleFunc(""/agg/"", newsAggHandler) 	http.ListenAndServe("":8000"", nil)  }",True
@saheelsapovadia2354,2023-03-01T16:50:24Z,0,Shows how to extract real value of this concurrency.,True
@costagmc1,2022-11-10T13:47:31Z,0,Excellent work!,True
@younjojny,2022-07-17T19:08:07Z,0,Thanks for the great series. I am sure someone has already pointed this out but I could not see it. Part of the reason that the loading of News was faster with Go Routines was because you only loaded the first 30. Keep up the great work.,True
@cd78,2021-09-11T20:10:51Z,0,Does this method replace the need to use Ajax calls,True
@Agrim26,2021-07-12T23:47:58Z,1,I wasted a lot of time on some Go tutorials. Wish I would have found this playlist sooner. Thank you for this amazing series. Great explanation. Simplified a lot of concepts for me. And coming from python I was making a lot of the same mistakes as you so could relate to these. Thanks again for this playlist.,True
@shofyansky,2020-10-31T02:20:38Z,0,"thanks sentdex, iam from indonesia really appreciate your effort to create such a complete real problem golang tutorial.",True
@untitledchannel9350,2020-09-08T20:47:45Z,0,"thanks so much, this is help me understand the goroutine on real case, thumb up",True
@rahulmysore23,2020-06-21T23:13:26Z,0,"Is it me? for 445 search results:  1. idle time without go routines - 110771 ms 2. idle time with goroutines - 24384 ms Yes, it reduced the time, but should it take 110771 ms for 445 results in the first place? does it depend on our server(PC)?",True
@jarsystechnology860,2020-06-21T14:17:38Z,0,will this working for json api response.. ?,True
@serhioromano,2020-04-07T17:21:47Z,3,"I am a one-week young go developer. Finished to watch your videos. I feel like I have to write something.   1. Thank you for this series, it helped me a lot. 2. Thank you for making your videos compact and not frustrating time if I may say this way   I am sure it is 3 years already and you most probably much better at go, but your channel's videos are not revealing. I which you could make better videos. Not that it is not clear, I get what you say, but you cover only one pattern to use channels, it is actually set a full-stack before iterate through them. But the pattern when you have sender and receiver both in endless goroutines would be nice too.",True
@melissanewman5497,2020-02-03T10:27:14Z,0,"I finished this tutorial series.  It is great. For most of them, I used the text version, so thanks for being to thorough and posting both the video version and the text-based versions.",True
@niprjct,2019-12-11T03:23:33Z,0,"The BEST tutorial for beginners no doubt, thank you for putting your time on teaching us. Can you make another one with some more advanced stuff such as working with DB and files?",True
@shitijagrawal528,2019-12-07T14:44:12Z,1,What if we have different categories of news and then we want to get it concurrently without mixing them How can we do that ? Thank You In Advance ...!!,True
@chethans1659,2019-12-02T08:14:29Z,0,Hii iam getting a nil pointer derefernce in line 42 and 60 can anyone figure it out,True
@ajinkyax,2019-11-04T21:56:05Z,8,"The way you changed the Python tutorials scene on youtube, please go for GO too. There are not many good teachers on the internet.",True
@BRUHItsABunny,2019-10-29T22:37:57Z,0,"given the nature of golang it may be easier and faster to poll (like once a minute, maybe once every 10 mins) the news in one goroutine and save that data in local memory or maybe in a database with better latency than your news source  then have your server goroutine read from your newly created datasource (whether it be local memory or nearby database) and display that  data retrieval is the main slowdown in the current implementation and this way it wouldnt be the main slowdown anymore, knocking it down to sub 50ms idle (if storing the polled data in memory) or whatever your latency to your nearby database is in ms",True
@anubhavagarwal246,2019-09-10T20:31:20Z,0,"Just a query: Sending and receiving elements to/from the channel is enqueue  and dequeue process respectively. In the example we are inserting element in the queue but we are not dequeuing it by using the operator. In this case we know that there are approx 15 sitemaps and we are taking buffer of 30, but according to me, it would lead to deadlock if in case we take buffer lesser than the sitemap range. Please correct me if I am missing something.",True
@AbhishekNigam,2019-08-18T18:46:38Z,1,Thank you for this series!,True
@chsaiman0j961,2019-05-11T04:53:10Z,0,Thanks for creating this series.,True
@nonsookoye3163,2019-04-17T14:32:48Z,0,Thanks alot,True
@bayonmbayo2997,2019-04-05T14:30:25Z,0,"Thank for your tutorial... On my computer, the web app loaded for 7 mins without goroutines but now with goroutines, he loads for only 30 seconds. Goroutine is awesome",True
@Thopen,2019-02-03T16:16:56Z,0,"Hey Sentdex. Are you till exploring Golang? Or if not, any reason why not (dissapointed/python-focus/...)? Any interest in focussing on SCALA / Julia / Rust perhaps? :-)",True
@beuman0,2018-08-06T04:03:33Z,1,Can you please tell me wtf is happening on the screen behind you in every video ? I thought it was a video game as I could see a logitech G27 but it looks more like a video from a camera,True
@xtpsxreportsx,2018-07-12T07:29:34Z,0,"Great series man! I learned a lot!  I was able to significantly improve load times by asynchronously refreshing a locally cached copy of all of the collected news, and then the endpoint just reads from it  https://gist.github.com/tpsrep0rts/5bcc9eb8e621fccfa8cec3d12c674ddd  It doesn't demonstrate the wonders of parallelism (or even benefit much from it) but it does load faster :)  This adds the use of packages though (for the sake of hiding the news_feed variable). Could be a good Episode 25?",True
@michaelblessing5852,2018-07-08T23:40:24Z,2,Thanks for creating this series!,True
@pablogrillo7362,2018-05-30T14:52:19Z,1,you're awesome,True
@gajop,2018-05-25T03:59:40Z,1,Interesting how Go does multithreading. Thanks!,True
@GustavoEmmel,2018-05-12T13:57:27Z,2,"thanks for the tutorial. Do you have some sugestions  for making the ""30"" on the code bellow more dinamic? queue := make(chan News, 30)",True
@boomermanisch,2018-05-11T14:41:56Z,0,Hi! I just added this series to https://github.com/golang/go/wiki/Training because it can't be missing there!,True
@fahmiirfan6923,2018-04-28T01:58:48Z,0,"Thanks man, this is help me alot. Will you do more go programming ?",True
@ABHISHEKSAHBCS,2018-04-16T21:54:09Z,2,"Man, you were awesome. Completed by the end. Many thanks for such clean and clear explanations.",True
@tiennguyenthanh755,2018-03-25T07:09:27Z,1,"I just have been interesting with go lang few days ago. Your tutorial is very cool, simply and very easy to understand. You should more careful with your code guy (just kidding :D ). But it's really really cool tutorial series. Thank you so much!",True
@robertsolomon9446,2018-03-24T22:00:27Z,0,"If the site were to change the aggregator link, how would be determine what the new one would be?  And a related question, how can we determine the URL for other news sites so that we can aggregate them if wanted?",True
@krishnamurthyganeshb8543,2018-03-23T12:38:48Z,0,"Great videos on GO. A quick set of questions... Are the http Url routes created by Golang http server also async allowing more concurrency or are they blocking? Second, Any video on creating two files with .go and importing one file into another and installing and importing an external package?",True
@koodauskanava9096,2018-01-07T21:31:53Z,10,Nice video series. Could you do just a simple JSON REST with some database with go? I guess that's how people use go when building backend.,True
@lautanax,2018-01-03T22:30:18Z,1,Men you are the real MVP!,True
@mikrchzichy,2017-12-04T06:17:48Z,34,"TIP - speed up: load the first 10  items and display them while others are loading in background.  - search will only work on first 10 until rest are loaded - even quicker would be to take not just first 10 listed items but rather first 10 returned items allowing the slow 70ms returns to happen after initial load  - this brings your load time to match fastest 10 items + rendering ...  - decrease rendering time - preload first page formatted with only 10 items when go routine is run.  - now you have a web page that will blink onto the page... slowest part being fastest returned items, rest loading in background and populating your search ability. 7-15 ms for articles, 5-10 ms for page load ... concurrent or 15ms ---- even faster ----  host this on google servers, using googles gigabit networking and GPU+ multi thread Golang hosting  then the slowest part will be between your web app and you own system....  you could have a web app that poles the news articles and updates as they change  slowest part would be the initial running of webapp ... after that the whole page with info could be cached and served",True
@arkoraa,2017-11-27T21:36:46Z,1,Great stuff. Is this series still going?,True
@elbachirnouni,2017-11-24T13:30:01Z,10,"Point 1: There is another improvement. There you use the channel to just appending news, then after all the news had been loaded you process the appending into the NewsMap. You can fire a gorouting that reads from the channel as the news loaded and append them into the map. You should not forgot to change wg.Add(1) to wg.Add(2) : 1 for the loading of the news and the other 1 for the appending. and in the appending loop you add also wg.Done()  Point 2: I don't think it will be easy to implements the pagination from the server side. because in all cases we should load all news and then returns only the requested paginatino page to the user. Don't like if we have data on a database or a storage that enable getting only the required data.  Thanks for this series",True
@blenderm4n,2017-11-22T23:26:34Z,0,"Awesome stuff, really enjoying your tutorial. Why don't you use VS Code with the go extension? This would give you error detection in the editor and speed up the tutorial. On the other hand, maybe it's good to do it the hard way while learning it.",True
@Domacs88,2017-11-20T21:41:00Z,1,"thanks for the awesome tutorial, more golang tutorials would be awesome :)",True
@georgegrunwald,2017-11-16T05:39:36Z,1,Thank you for all of these videos. This channel is full of useful information.,True
@ehsaanasghar3836,2017-11-15T00:30:35Z,0,"Hi, im doing a project which involves coding using a raspberry pi. And i am outputin a cars data onto a screen which will help the driver, i was wondering if you could give me some tips and some help.  Would be much appreciated as this is my final project at university.  Thanks!",True
@weratebikes6406,2017-11-14T05:16:34Z,0,"if you don't load every page up front, will the Search field only find terms on that loaded page?",True
@myztic123,2017-11-13T18:08:00Z,0,great tutorial series!,True
@LetsDark,2017-11-12T23:43:37Z,0,"Why do we have to wait for all goroutine until we can check the chanel? Normaly I would think, we only have to wait for the first routine to finish and then we can get the first chanel value. Could we sync this too? In theory the handeling of the data could cost expensive time and we would start some new goroutines with the handeling while some old goroutines are wating for the data to come in.",True
@9y070,2017-11-12T21:40:07Z,1,6:52 you know how many locations you have since they are all stored in the s variable. isn't it better to get te size of the locations and pass that number to the channel?,True
@draakisback,2017-11-12T20:18:30Z,0,"The code is a little messy but the only way I can think of to actually increase performance would be to build this without using wait groups and to change the way the front end works.    So basically as far as the wait groups goes, you have this extra part that has to fire before the code starts to sync up, but you can naturally use go routines to handle syncing in 99% of cases if you write your code properly.  Unfortunately, I don't have the time right now to sit down and write a version with out wait groups, maybe later.  Also the template is unpacking the NewsAggPage struct which could be done better in the back end to get a little more speed.  Lets just say that If i was going to rewrite this code, I would probably use a map to store the incoming data and then I would be able to access that data directly with out having to iterate through it on the template.",True
@encryptedname4141,2017-11-12T18:23:51Z,15,"Best tutorials on go lang! Thank you for these. I would love a tutorial about sql or nosql database. How to connect, fetch results and so on.",True
@easyBob100,2017-11-12T17:57:16Z,2,"For speed, I'd recommend loading the data once every minute or so on the back end.  I don't like the idea of loading the data from the WP every time a user visits your page....you'll be making A LOT of requests to their site.  This of course works even better for things that don't change as fast either.",True
@koobs6283,2017-11-12T17:11:06Z,18,Please do a golang machine learning video/project 😁,True
@japrogramer,2017-11-12T16:03:35Z,1,"Since the weight group is global, wouldn't you end up waiting for other requests to finish to send one if more than one happened before the wg was empty for previous request ?",True
