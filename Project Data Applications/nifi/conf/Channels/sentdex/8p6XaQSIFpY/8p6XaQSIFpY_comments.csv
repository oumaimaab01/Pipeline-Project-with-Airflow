author,updated_at,like_count,text,public
@user-ic5zw7ry9f,2024-03-28T08:55:56Z,0,What's the alternate of df.convert_objects(convert_numeric = true),True
@damisirekogi8148,2024-01-26T11:08:08Z,0,"For future users, not sure if df[columns] .unique existed at the time of the creation of the video, but you can get the unique values of the column by using df[columns].unique, and how many unique values by using df[columns].nunique",True
@SatyamKumar-25,2023-10-19T14:07:07Z,0,"# df.convert_objects(convert_numeric=True)   instead of using the above line, one can use the below-mentioned line also   df.infer_objects()",True
@emirtunakorkmaz6462,2023-10-13T07:36:59Z,0,Why don't we use LabelEncoder ? Am I missing something technically ?,True
@enesercin6182,2022-07-13T08:54:24Z,0,"Whenever I face a problem and google it, you come to my help. I appreciate that, thank you especially",True
@asaf8775,2021-12-28T11:00:52Z,0,for future viewers: data[[non_nomeric_list]] = data[[non_nomeric_list]].apply(lambda x: pd.factorize(x)[0]),True
@amryasser3638,2021-10-21T16:16:34Z,0,"Nothing from the comments did it for me. But I found this  def cat_to_num(df):     x = df.copy()     cols = x.columns.values     for col in cols:         if x[col].dtype == 'object':             x[col] = pd.Categorical(x[col])             x[col] = x[col].cat.codes.replace(-1,np.nan)     return x",True
@jairajsahgal5062,2021-09-22T14:42:54Z,0,"""FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only   df.drop(['body', 'name'], 1, inplace=True)"" This warning comes, any solution anyone has?",True
@jairajsahgal5062,2021-09-22T14:07:59Z,0,Thank you,True
@amendoinjpr,2021-08-21T21:48:00Z,0,"Why does he think the body_identification will taint the data ? Coudn't that easy the learning curve ? I mean, if someone have a ""body"" value they are surely dead. The network doesn't even need to look at the rest.",True
@kyleyoung4974,2021-07-26T16:49:48Z,0,dude slow down your typing jesus hahahaha,True
@rudranagk1403,2021-06-15T09:50:29Z,0,Did it convert all the columns to numeric? Int or float,True
@Dua-yu2db,2021-04-15T06:56:15Z,0,"I am always getting this error on EVERY video... how can i fix this from sklearn import preprocessing, cross_validation ImportError: cannot import name 'cross_validation' from 'sklearn'    I pip installed everything, I don't know what the issue is",True
@SNRU_VEVO,2021-03-24T15:34:32Z,0,I get a -  text_digit_vals[unique] = x  IndexError : list assignment index out of range Can anyone help me,True
@Caradaoutradimensao,2021-02-16T17:58:41Z,0,You would preffer to use get dummies() for the non numerical values. Search that.,True
@asafsbg,2021-01-19T18:14:50Z,0,why not use get_dummies instead?,True
@VilleLaitila1,2020-12-13T19:08:09Z,0,Can you do something like this KNN approach (Prolog) https://www.youtube.com/watch?v=BHRy7P0gMy8  but with  Python?,True
@suvarghaghoshdastidar4013,2020-11-30T06:46:46Z,1,"def to_numeric_data(df):   column = df.columns.values   for columns in column :     if df.columns.dtype != np.int64 or df.columns.dtype != np.float64 :       df[columns] = pd.factorize(np.array(df[columns]))[0]   return df you can use this also give this a try",True
@vireshsaini705,2020-09-23T17:47:04Z,0,"Function handel_non_numerical_data is executing correctly but getting error while printing the converted dataframe values by  df =handel_non_numerical_data(df) print(df)  Error:- TypeError                                 Traceback (most recent call last) <ipython-input-231-098b0cf3e83c> in <module> ----> 1 df =handel_non_numerical_data(df)       2 print(df)  <ipython-input-227-14be7355b051> in handel_non_numerical_data(df)       1 def handel_non_numerical_data(df): ----> 2     columns = df.columns.values()       3        4     for column in columns:       5         text_digit_vals = {}  TypeError: 'numpy.ndarray' object is not callable  Please advice",True
@TheWohnJick,2020-09-15T17:20:16Z,1,When the fuck did Edward Snowden started teaching Machine Learning?,True
@MrAnandml,2020-09-13T12:17:21Z,0,"To avoid this sort of warnings   Import warnings  warnings.filterwarnings(""ignore"")",True
@decode0126,2020-08-28T09:16:12Z,0,It was an amazing tutorial.It is quite informative and is helping me a lot for getting better at coding. Thanks a lot,True
@aravindnaidu1286,2020-08-19T13:02:31Z,0,for changing non numeric data to numeric data i think we can use label encoder from scikit learn!!!!,True
@healy4513,2020-06-22T16:43:35Z,1,"That was very helpful, Thanks.",True
@batatambor,2020-05-22T12:32:28Z,0,"If you see where NA values are, you will notice that you have a lot of data in the age column, which is probably bad because when you set the value to zero you are essentially causing a distortion in your data. You'd rather fill it with the median value or drop it .",True
@dantusqq,2020-05-10T21:17:37Z,75,"for future viewers of this amazing tutorials; if you getting an error like AttributeError: 'DataFrame' object has no attribute 'convert_objects' use;  df.apply(pd.to_numeric, errors='ignore')  instead of  df.convert_objects(convert_numeric=True) it worked for me hope it works for you too. GL",True
@aaronge5195,2020-04-20T02:31:22Z,1,"In case you wanted a simpler version of converting the non-numerical data:    def pd_df_non_numeric_to_numeric(df):     for column in df.columns:         if type(df[column].values[0]) != np.int64 and type(df[column].values[0]) != np.float64:             xformlist = dict()             for item, value in enumerate(df[column].unique()):                 xformlist[value]=item             df[column] = (df[column].apply(lambda x: xformlist[x]))     return df",True
@daliamokhtar1764,2020-04-19T15:46:11Z,2,"for n in df.columns.values:      df[n] = pd.to_numeric(df[n],errors=""ignore"") that works with me.",True
@bat_man1138,2020-04-11T07:49:09Z,0,What about onehotencoder,True
@williambrandon5146,2019-12-21T17:23:24Z,4,ðŸ˜‚ðŸ˜‚ðŸ˜‚how come no one is commenting/laughing at the meme at 1:38,True
@metalgodmaiden,2019-12-08T05:40:46Z,0,"---> 14 if df[column].dtype != np.int64 and df[column].dtype != np.float64:      15             column_contents = df[column].values.tolist()      16             unique_elements = set(column_contents)  NameError: name 'column' is not defined  Can someone help me resolve this error",True
@WritankarBhattacharya,2019-11-06T06:26:54Z,1,"we can use df[column].unique() to get a list of all unique values in a column. Then we create a dictionary with the unique values and numbers (let's say xformlist). Then we can use lambda function to do the whole assignment in one go without using lists.  df[column] = pd.to_numeric(df[column].apply(lambda x: xformlist[x])) Here is my version of the function  defÂ pd_df_non_numeric_to_numeric(df): Â Â Â Â forÂ columnÂ inÂ df.columns.values: Â Â Â Â Â Â Â Â ifÂ df[column].dtypeÂ !=Â np.int64Â andÂ df[column].dtypeÂ !=Â np.float64: Â Â Â Â Â Â Â Â Â Â Â Â xformlistÂ =Â dict() Â Â Â Â Â Â Â Â Â Â Â Â forÂ item,Â valueÂ inÂ enumerate(df[column].unique()): Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â xformlist[value]=item Â Â Â Â Â Â Â Â Â Â Â Â df[column]Â =Â pd.to_numeric(df[column].apply(lambdaÂ x:Â xformlist[x])) Â Â Â Â returnÂ df",True
@samik_pal,2019-11-05T15:47:28Z,0,I think you could use counter and then make a list out of that and then accoudingly assign value to each element using the indexes.( if this makes any sense;)),True
@MohitRudrarajuSuresh,2019-08-31T04:29:43Z,6,You can use instead of - df.convert_objects(convert_numeric=True) - df._convert(numeric=True),True
@AutitsicDysexlia,2019-08-22T10:49:00Z,0,"Fix your volume,",True
@antonburenko2852,2019-07-24T10:38:34Z,0,"I think you can take away the if statement, because the values of a set are already unique:   for unique in unique_elements:          if unique not in text_digit_vals:  <--- this                     text_digit_vals[unique] = x                     x+=1  so rewrite it to:             for unique in unique_elements:                     text_digit_vals[unique] = x                     x+=1",True
@ashishgudla7961,2019-06-28T05:00:16Z,0,Is this non numerical data function similar to hotencoders in sklearn?,True
@abhigyannath1134,2019-03-28T14:35:36Z,0,what IDE is being used here?,True
@PapayaPaii,2019-03-28T09:42:55Z,11,"Converting an entire DF from strings to numeric values per column in a single line:  def fac_df(df):     #factorizes every column in the dataframe, starting with 0.      df = df.apply(lambda x: pd.factorize(x)[0]+1)     return df  This functions does pretty much everything your functions do, but in a single line. Hope this is helpful to some of you.",True
@Jjolasman,2018-11-12T15:56:00Z,2,To transform your non-numerical data into numerical you can use:  from sklearn.preprocessing import LabelEncoder labelEncoder = LabelEncoder()  labelEncoder.fit(data['column']) data['column'] = labelEncoder.transform(data['column']) or even passing all the dataframe.,True
@paras8361,2018-11-02T17:38:28Z,0,what is the use of inplace=True???,True
@ElChe-Ko,2018-10-30T18:20:48Z,0,"Alternative method to map string values to numbers:   # Loop through all columns for col_name in df:     # Select one column at the time     col = df[col_name]      # Run if the column is non-numeric     if np.issubdtype(col.dtype, np.number)==False:         # Get all the possible values inside the columns         values = col.drop_duplicates()         # Assign to each value the index         mapping = pd.Series(values.index.values, index=values).to_dict()         # Map to each of the dataframe the value the index previously defined         df[col_name] = df[col_name].replace(mapping)",True
@ChintapalliSwapna,2018-10-04T01:32:24Z,0,"Hi, what if one of my dataset column consists both alphabet and numbers...How to convert it to numeric??",True
@PrateekSharma03,2018-08-21T20:17:58Z,0,Is there any particular need to use //df.convert_objects(convert_numeric=True)// statement??,True
@stepheniezzi34,2018-07-22T18:54:52Z,0,"Hey Sentdex,   I noticed that whenever you do print(df.head()) the output can be hard to read at times instead if you just put df.head() without wrapping the print statement around it the output is a lot cleaner to read. Btw love the videos, keep up the awesome work!",True
@shimjur,2018-07-11T16:04:50Z,1,why cant we use .factorize() or onehotencoder(),True
@shohaghossen3032,2018-06-13T03:32:46Z,1,"FileNotFoundError: [Errno 2] No such file or directory: 'titanic.xls'  Here is the code .....  import matplotlib.pyplot as plt from matplotlib import style style.use('ggplot') import numpy as np from sklearn.cluster import KMeans from sklearn import preprocessing, cross_validation import pandas as pd  df = pd.read_excel('titanic.xls') df.drop(['body','name'], 1, inplace=True)  please help me.",True
@gamingbugs9296,2018-06-12T05:59:39Z,10,"Can't we use this ? le = preprocessing.LabelEncoder() df = df.apply(le.fit_transform)",True
@jrM5492,2018-05-22T00:10:25Z,0,which function turns non-numerical data into integer? how did it come up with those numbers?,True
@mlnjsh1,2018-05-08T10:51:48Z,0,"Hi nice code , I have simple question in my data set i have income column whose entries are ' <=50K' ,' >50K' ,' <=75K' ..etc..but i want to encode them ..what should i do?",True
@JohnIriyeEsq,2018-04-19T22:59:02Z,0,"I would suggest a different method, which avoids looping through the data.  Note: For those of you who are not using Spyder, ""#  %%""  creates Jupyter style cells in Spyder.  # -*- coding: utf-8 -*- """""" Created on Thu Apr 19 15:45:11 2018  @author: overlordx """""" # Importing the libraries import pandas as pd import copy import numpy  # Declare variables # File to be processed fileName = ('data/titanic/titanic.csv') # Cols with categorical data categoricalCols = ['name', 'sex', 'cabin', 'home.dest', 'embarked', 'boat', 'ticket'] # Cols to be dropped droppedCols = ['name', 'body'] # Cols to be tested observationCols = ['survived', 'cabin']  # %% # Process the data # Import the csv and convert NaN values to 0 dataset = pd.read_csv(fileName) dataset.fillna(0, inplace = True) # Convert categorical cols for colName in categoricalCols:     dataset[colName] = dataset[colName].astype(""category"").cat.codes # Drop columns X = copy.copy(dataset) X = X.drop(droppedCols, axis=1) X = X.drop(observationCols, axis=1) # Createy using the observation cols y = copy.copy(dataset[observationCols])",True
@athulreji_,2018-04-16T03:32:13Z,1,Use LabelEncoder for the representation of categorical data. from sklearn.preprocessing Use  df = df.apply(preprocessing.LabelEncoder().fit_transform) instead of handle_non_numerical_data(df) function.,True
@athulreji_,2018-04-16T03:03:55Z,17,"If anyone get Deprecation Warning while using cross_validation, use model_selection instead",True
@trufflesfresh7165,2018-03-19T16:42:09Z,0,"How about df.replace, i get back 0s and 1s",True
@skjold73,2018-02-25T11:26:58Z,0,"@sentdex changing  df.convert_objects(convert_numeric=True) to df = df.apply(pd.to_numeric, errors='coerce').fillna(0).astype(int) and deleting df.fillna(0, inplace=True) returns without futurewarningsÂ  but it converts to much to 0",True
@monasbhar2329,2018-02-12T21:49:48Z,0,"Hi Sentdex, how would you handle date-type data?",True
@pushkardeshpande7389,2018-02-05T23:05:13Z,0,"I am getting this <ipython-input-49-c7c087ce5455> in <module>()      15             td[column]=list(map(conver_to_int, df[column]))      16         return td ---> 17 td = handle_nonNum(td)      18 print(td.head())  <ipython-input-49-c7c087ce5455> in handle_nonNum(td)       5         def convert_to_int(val):       6             return text_digit_vals[val] ----> 7         if td[column].dtypr !=np.int64 and td[column].dtype!=np.float64:       8             column_contents=td[column].values.tolist()       9             unique_elements=set(column_contents)  C:\Users\pushd\Anaconda3\lib\site-packages\pandas\core\generic.py in __getattr__(self, name)    3079             if name in self._info_axis:    3080                 return self[name] -> 3081             return object.__getattribute__(self, name)    3082     3083     def __setattr__(self, name, value):  AttributeError: 'Series' object has no attribute 'dtypr'    I dont know what I did wrong",True
@SkielCast,2018-02-01T17:09:05Z,17,"With pandas 0.18+ there is a one-liner to do the whole job, it even removes the original columns pd.get_dummies(dataFrame, columns=[list of columns], drop_first=True)  Credits to Data School",True
@salasmdi7293,2018-01-31T19:29:34Z,0,How to encode the Date var.  ?,True
@ROHITSINGH-kw1oo,2017-12-29T10:58:56Z,0,"Eventually ""df.convert_objects(convert_numeric=True)"" won't have any effect upon the dataframe ""df"", as ""convert_objects"" returns a modified dataframe, and doesn't make any changes to the source dataframe. In my opinion, ""df=df.convert_objects(convert_numeric = True)"" would do.",True
@iamdivyansh,2017-11-04T19:36:27Z,0,I run the exact same code on terminal and it gives the error 'DataFrame' object has no attribute 'coulmns' any idea how to resolve it??,True
@jaydebsarker16,2017-11-03T00:55:05Z,0,"I have found this error: Warning (from warnings module):   File ""/home/jaydeb/.local/lib/python3.5/site-packages/sklearn/cross_validation.py"", line 41     ""This module will be removed in 0.20."", DeprecationWarning) DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20. Traceback (most recent call last):   File ""/home/jaydeb/Desktop/Clustering/Sentdx/kmeans_titanic_2.py"", line 10, in <module>     df= pd.read(titanic.xls) AttributeError: module 'pandas' has no attribute 'read'",True
@marklittlewood2418,2017-09-12T13:15:11Z,0,Plan your session before delivering it,True
@Jake3D,2017-09-07T05:42:51Z,4,When i run this code multiple times I get some weird results. the first 6 columns are consistent but the rest except fare have different values every time I run it. the ticket number changes every time. The cabin # I expect to change as it does but its a random value the passengers that had matching values still do just not the original values.  I suspect this is because there was a missing value in the stack and all values were reassigned to a random value from 1 to total number of unique values.  Another odd thing is when I put the code into a for loop it generates the same values multiple times. When I run it again it generates new values multiples times (with the for loop). Is this because its using the same 'random seed' number based on the start time of the script?  Can anyone tell me whats going on here? Is this behavior because of a string in the data set and all values being reset?,True
@Omprakash-nb3mk,2017-08-23T14:45:03Z,0,is there any inbuilt function to convert string into numbers,True
@zikriaosmani,2017-07-31T12:14:02Z,0,"Im new, but i learned to do decision Trees and now i need to plut my database into it.. One of the ways to do it is to make all the values into Numerical values. I get an error when im doing your tutoriol, you might help me here:        with open(filename, ""rb"") as f:  FileNotFoundError: [Errno 2] No such file or directory: 'titanic.xls'  Hope someone can help me here.",True
@revanttiwari4669,2017-07-19T09:37:07Z,0,"Traceback (most recent call last):   File ""titanic.py"", line 9, in <module>     df=pd.read_excel('titanic')   File ""C:\Users\asus\Miniconda3\lib\site-packages\pandas\io\excel.py"", line 200, in read_excel     io = ExcelFile(io, engine=engine)   File ""C:\Users\asus\Miniconda3\lib\site-packages\pandas\io\excel.py"", line 229, in __init__     import xlrd  # throw an ImportError if we need to ModuleNotFoundError: No module named 'xlrd'   i am getting this error..please help!!",True
@sorayaanvari5906,2017-07-10T19:51:53Z,1,Tnx for your tut :) I have this error when Im trying your code : 'DataFrame' object has no attribute 'dtype'    anyone could help???,True
@aashishpaudel9178,2017-07-09T15:13:42Z,0,"Sentdex, can you explain why is it 'and' and not 'or' in this expression-> if df[column].dtype != np.int64 and df[column].dtype != np.float64:",True
@deborahweissner8527,2017-07-05T12:31:50Z,0,This is so great. Thank you Sentdex. Now I hope to find a way to add an intermittent step in the for loop that saves the dictionary - to use as a label key.,True
@yathiraju3404,2017-06-06T10:25:58Z,0,I guess following code works good! Sorry if I'm wrong  def handle_non_numericalValue(df):     enc = LabelEncoder()     columns_list = df.columns.values     for col in columns_list:         if df[col].dtype != np.int64 and df[col].dtype != np.float64:             unique_item = df[col].tolist()             enc.fit(unique_item)             temp = enc.transform(unique_item)             df[col] = temp,True
@dunhilldimaapi2308,2017-05-31T06:49:58Z,0,"Is it possible to handle data with a features of product name and product description using Kmeans? If yes, how can I convert name and description to numeric? Thanks",True
@ug0ts3rvd,2017-02-17T15:38:43Z,10,Lmfao at the gender pic,True
@RobertoFrobs,2017-01-26T22:48:23Z,88,"Hi Sentdex. I think you are making a mistake encoding categorical variables as continuous numerical. Technically, you should create a dummy variable for each class (if the variable has more than 2 classes). For example, if you have a variable 'city', and the following dataset [(n0, Tokio), (n1, Rome),  (n2, Rome), (n3, London)], you should transform it as follows: [(n0, 1,0,0), (n1,0,1,0), (n2,0,1,0), (n3,0,0,1)] This is the correct way according to statistics books. If you just convert it to a continuous numerical variable, the algo won't know that you are not talking about a quantity. If you feed that data to a linear regression, for example, you would end up with weird results such as ""y grows 0.25 for each unitary increase of city"", which doesn't make sense. On the other hand, if you use the dummy variables you end up with something like ""y grows 0.25 when 'london' is 1 and everything else is 0', which is much more meaningful. Pandas has a method pd.get_dummies() that does that process for you, but it's very heavy on memory, because if you have a variable with 1000 categories you will have 1000 more columns. I'm looking for a way to solve that problem, maybe sparse arrays? But how do we combine a sparse array with a non-sparse array at the moment of algo-fitting? Can we work out something?",True
@kumaragurusivasankaran369,2017-01-19T22:59:26Z,1,Is the error mentioned in the tutorial debugged by this time? can someone share link/details as how to get rid of it?,True
@iamstickfigure,2016-12-25T03:05:18Z,17,"I think I saw a couple people who already mentioned something like this, but I'll say it again. Enumerating categorical types isn't a typically a good way of encoding non-numerical data.  If the possible strings have some sort of order to them, like ""strongly disagree,"" ""disagree,"" ""neither,"" ""agree,"" ""strongly agree"", then maybe you can use a simple enumeration. But if it's something like race, gender, or some other categorical type which has no order, then enumeration is a bad approach. Instead, you can use something called ""One-Hot"" encoding. This will split the categorical feature into multiple features of all the different options.   So for a male entry, the features will be, sex_male = 1, sex_female = 0  For a female, sex_male = 0, sex_female = 1",True
@amyxst,2016-12-14T00:19:25Z,5,"For converting to numeric (pandas 0.19.1), use df.apply(pd.to_numeric, errors='ignore')",True
@rahulkulkarni7224,2016-12-08T22:37:34Z,0,"Code to convert the Non-numerical columns to Numeric, using LabelEncoder() X is my dataset.  from sklearn.preprocessing LabelEncoder  le = LabelEncoder() for i in X.columns:     if X[i].dtype == 'object':         le.fit(X[i])         X[i] = le.transform(x[i])",True
@Rochbenritter,2016-07-24T16:59:45Z,0,"I got ""FutureWarning: convert_objects is deprecated.  Use the data-type specific converters pd.to_datetime, pd.to_timedelta and pd.to_numeric.   df.convert_objects(convert_numeric=True)"" Interesting :P",True
@RealMcDudu,2016-06-19T08:44:09Z,28,in order to use the pd.read_excel('') - you need to install the xlrd package/module.,True
@ghanemimehdi1063,2016-06-17T10:06:51Z,0,Hi  How can i deal with longitude and latitude data to make prediction ?  Excellent ! :-),True
@onepunchsaitma1413,2016-06-11T07:39:37Z,0,How many tutorials are in this series?,True
@tsully87,2016-06-11T07:09:01Z,7,See sklearn.preprocessing.LabelEncoder,True
@mr_sandiego,2016-06-11T05:22:14Z,27,Great Job Sentdex.  The resemblance between you and Snowden is uncanny btw.,True
